
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022fc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080023fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080023fc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000738c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013e3  00000000  00000000  00027403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b7  00000000  00000000  00029090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cc1  00000000  00000000  00029747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009dd8  00000000  00000000  00043408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009faa1  00000000  00000000  0004d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ed8  00000000  00000000  000ecc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eeb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080023a0 	.word	0x080023a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080023a0 	.word	0x080023a0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa22 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f812 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f906 	bl	8000438 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022c:	f000 f84e 	bl	80002cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 0x0400;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x28>)
 8000232:	2280      	movs	r2, #128	; 0x80
 8000234:	00d2      	lsls	r2, r2, #3
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <main+0x2c>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f001 fa3b 	bl	80016b8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000242:	e7fe      	b.n	8000242 <main+0x26>
 8000244:	40012c00 	.word	0x40012c00
 8000248:	20000028 	.word	0x20000028

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b093      	sub	sp, #76	; 0x4c
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	2414      	movs	r4, #20
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2334      	movs	r3, #52	; 0x34
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 f873 	bl	8002348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	0018      	movs	r0, r3
 8000266:	2310      	movs	r3, #16
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 f86c 	bl	8002348 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	0021      	movs	r1, r4
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2202      	movs	r2, #2
 8000276:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2201      	movs	r2, #1
 800027c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2210      	movs	r2, #16
 8000282:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2200      	movs	r2, #0
 8000288:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	187b      	adds	r3, r7, r1
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fc99 	bl	8000bc4 <HAL_RCC_OscConfig>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000296:	f000 f917 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f80a 	bl	80012d0 <HAL_RCC_ClockConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002c0:	f000 f902 	bl	80004c8 <Error_Handler>
  }
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b013      	add	sp, #76	; 0x4c
 80002ca:	bd90      	pop	{r4, r7, pc}

080002cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d2:	2348      	movs	r3, #72	; 0x48
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 f833 	bl	8002348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e2:	2340      	movs	r3, #64	; 0x40
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	2308      	movs	r3, #8
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 f82b 	bl	8002348 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f2:	2324      	movs	r3, #36	; 0x24
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	231c      	movs	r3, #28
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 f823 	bl	8002348 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	2320      	movs	r3, #32
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f002 f81c 	bl	8002348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000310:	4b47      	ldr	r3, [pc, #284]	; (8000430 <MX_TIM1_Init+0x164>)
 8000312:	4a48      	ldr	r2, [pc, #288]	; (8000434 <MX_TIM1_Init+0x168>)
 8000314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000316:	4b46      	ldr	r3, [pc, #280]	; (8000430 <MX_TIM1_Init+0x164>)
 8000318:	2207      	movs	r2, #7
 800031a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b44      	ldr	r3, [pc, #272]	; (8000430 <MX_TIM1_Init+0x164>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000322:	4b43      	ldr	r3, [pc, #268]	; (8000430 <MX_TIM1_Init+0x164>)
 8000324:	22fa      	movs	r2, #250	; 0xfa
 8000326:	00d2      	lsls	r2, r2, #3
 8000328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032a:	4b41      	ldr	r3, [pc, #260]	; (8000430 <MX_TIM1_Init+0x164>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000330:	4b3f      	ldr	r3, [pc, #252]	; (8000430 <MX_TIM1_Init+0x164>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000336:	4b3e      	ldr	r3, [pc, #248]	; (8000430 <MX_TIM1_Init+0x164>)
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800033c:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <MX_TIM1_Init+0x164>)
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f912 	bl	8001568 <HAL_TIM_Base_Init>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000348:	f000 f8be 	bl	80004c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034c:	2148      	movs	r1, #72	; 0x48
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2280      	movs	r2, #128	; 0x80
 8000352:	0152      	lsls	r2, r2, #5
 8000354:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000356:	187a      	adds	r2, r7, r1
 8000358:	4b35      	ldr	r3, [pc, #212]	; (8000430 <MX_TIM1_Init+0x164>)
 800035a:	0011      	movs	r1, r2
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fb29 	bl	80019b4 <HAL_TIM_ConfigClockSource>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000366:	f000 f8af 	bl	80004c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800036a:	4b31      	ldr	r3, [pc, #196]	; (8000430 <MX_TIM1_Init+0x164>)
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f94b 	bl	8001608 <HAL_TIM_PWM_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000376:	f000 f8a7 	bl	80004c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000388:	187a      	adds	r2, r7, r1
 800038a:	4b29      	ldr	r3, [pc, #164]	; (8000430 <MX_TIM1_Init+0x164>)
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f001 ff1e 	bl	80021d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000398:	f000 f896 	bl	80004c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800039c:	2124      	movs	r1, #36	; 0x24
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2260      	movs	r2, #96	; 0x60
 80003a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0x8000;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0212      	lsls	r2, r2, #8
 80003aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ca:	1879      	adds	r1, r7, r1
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_TIM1_Init+0x164>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fa29 	bl	8001828 <HAL_TIM_PWM_ConfigChannel>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80003da:	f000 f875 	bl	80004c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	0192      	lsls	r2, r2, #6
 8000402:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800040a:	1d3a      	adds	r2, r7, #4
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_TIM1_Init+0x164>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f001 ff3b 	bl	800228c <HAL_TIMEx_ConfigBreakDeadTime>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800041a:	f000 f855 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <MX_TIM1_Init+0x164>)
 8000420:	0018      	movs	r0, r3
 8000422:	f000 f89b 	bl	800055c <HAL_TIM_MspPostInit>

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b016      	add	sp, #88	; 0x58
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	20000028 	.word	0x20000028
 8000434:	40012c00 	.word	0x40012c00

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b089      	sub	sp, #36	; 0x24
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	240c      	movs	r4, #12
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f001 ff7d 	bl	8002348 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_GPIO_Init+0x8c>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_GPIO_Init+0x8c>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	03c9      	lsls	r1, r1, #15
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_GPIO_Init+0x8c>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	4013      	ands	r3, r2
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_GPIO_Init+0x8c>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0x8c>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0289      	lsls	r1, r1, #10
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_GPIO_Init+0x8c>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	029b      	lsls	r3, r3, #10
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2201      	movs	r2, #1
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fb7a 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000494:	0021      	movs	r1, r4
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2201      	movs	r2, #1
 80004a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2202      	movs	r2, #2
 80004a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2203      	movs	r2, #3
 80004ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80004ae:	187a      	adds	r2, r7, r1
 80004b0:	2390      	movs	r3, #144	; 0x90
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f9ee 	bl	8000898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b009      	add	sp, #36	; 0x24
 80004c2:	bd90      	pop	{r4, r7, pc}
 80004c4:	40021000 	.word	0x40021000

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>
	...

080004d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x44>)
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_MspInit+0x44>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	619a      	str	r2, [r3, #24]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_MspInit+0x44>)
 80004f4:	69da      	ldr	r2, [r3, #28]
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_MspInit+0x44>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0549      	lsls	r1, r1, #21
 80004fc:	430a      	orrs	r2, r1
 80004fe:	61da      	str	r2, [r3, #28]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <HAL_MspInit+0x44>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	055b      	lsls	r3, r3, #21
 8000508:	4013      	ands	r3, r2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40021000 	.word	0x40021000

0800051c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_TIM_Base_MspInit+0x38>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_TIM_Base_MspInit+0x3c>)
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_TIM_Base_MspInit+0x3c>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0109      	lsls	r1, r1, #4
 8000538:	430a      	orrs	r2, r1
 800053a:	619a      	str	r2, [r3, #24]
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_TIM_Base_MspInit+0x3c>)
 800053e:	699a      	ldr	r2, [r3, #24]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b004      	add	sp, #16
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40012c00 	.word	0x40012c00
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	240c      	movs	r4, #12
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f001 feea 	bl	8002348 <memset>
  if(htim->Instance==TIM1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <HAL_TIM_MspPostInit+0x78>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d125      	bne.n	80005ca <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <HAL_TIM_MspPostInit+0x7c>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_TIM_MspPostInit+0x7c>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0289      	lsls	r1, r1, #10
 8000588:	430a      	orrs	r2, r1
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_TIM_MspPostInit+0x7c>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	029b      	lsls	r3, r3, #10
 8000594:	4013      	ands	r3, r2
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	0052      	lsls	r2, r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	0021      	movs	r1, r4
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2202      	movs	r2, #2
 80005a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2202      	movs	r2, #2
 80005ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	187a      	adds	r2, r7, r1
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 f967 	bl	8000898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b009      	add	sp, #36	; 0x24
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40012c00 	.word	0x40012c00
 80005d8:	40021000 	.word	0x40021000

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <NMI_Handler+0x4>

080005e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <HardFault_Handler+0x4>

080005e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f87a 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f7ff fff7 	bl	800060a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f001 fe89 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fde9 	bl	800021c <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000658:	080023f0 	.word	0x080023f0
  ldr r2, =_sbss
 800065c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000660:	20000074 	.word	0x20000074

08000664 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_COMP_IRQHandler>
	...

08000668 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_Init+0x24>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_Init+0x24>)
 8000672:	2110      	movs	r1, #16
 8000674:	430a      	orrs	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f809 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067e:	f7ff ff29 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_InitTick+0x5c>)
 800069a:	681c      	ldr	r4, [r3, #0]
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_InitTick+0x60>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	23fa      	movs	r3, #250	; 0xfa
 80006a4:	0098      	lsls	r0, r3, #2
 80006a6:	f7ff fd2d 	bl	8000104 <__udivsi3>
 80006aa:	0003      	movs	r3, r0
 80006ac:	0019      	movs	r1, r3
 80006ae:	0020      	movs	r0, r4
 80006b0:	f7ff fd28 	bl	8000104 <__udivsi3>
 80006b4:	0003      	movs	r3, r0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f8e1 	bl	800087e <HAL_SYSTICK_Config>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	e00f      	b.n	80006e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d80b      	bhi.n	80006e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	2301      	movs	r3, #1
 80006ce:	425b      	negs	r3, r3
 80006d0:	2200      	movs	r2, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f8be 	bl	8000854 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_InitTick+0x64>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b003      	add	sp, #12
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x1c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	001a      	movs	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x20>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	18d2      	adds	r2, r2, r3
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_IncTick+0x20>)
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000008 	.word	0x20000008
 8000718:	20000070 	.word	0x20000070

0800071c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  return uwTick;
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <HAL_GetTick+0x10>)
 8000722:	681b      	ldr	r3, [r3, #0]
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000070 	.word	0x20000070

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b7f      	cmp	r3, #127	; 0x7f
 8000744:	d828      	bhi.n	8000798 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000746:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <__NVIC_SetPriority+0xd4>)
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b25b      	sxtb	r3, r3
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	33c0      	adds	r3, #192	; 0xc0
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	589b      	ldr	r3, [r3, r2]
 8000756:	1dfa      	adds	r2, r7, #7
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	0011      	movs	r1, r2
 800075c:	2203      	movs	r2, #3
 800075e:	400a      	ands	r2, r1
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	21ff      	movs	r1, #255	; 0xff
 8000764:	4091      	lsls	r1, r2
 8000766:	000a      	movs	r2, r1
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	019b      	lsls	r3, r3, #6
 8000772:	22ff      	movs	r2, #255	; 0xff
 8000774:	401a      	ands	r2, r3
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	0018      	movs	r0, r3
 800077c:	2303      	movs	r3, #3
 800077e:	4003      	ands	r3, r0
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000784:	481f      	ldr	r0, [pc, #124]	; (8000804 <__NVIC_SetPriority+0xd4>)
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b25b      	sxtb	r3, r3
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	430a      	orrs	r2, r1
 8000790:	33c0      	adds	r3, #192	; 0xc0
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000796:	e031      	b.n	80007fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <__NVIC_SetPriority+0xd8>)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0019      	movs	r1, r3
 80007a0:	230f      	movs	r3, #15
 80007a2:	400b      	ands	r3, r1
 80007a4:	3b08      	subs	r3, #8
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	3306      	adds	r3, #6
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	3304      	adds	r3, #4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	1dfa      	adds	r2, r7, #7
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	0011      	movs	r1, r2
 80007b8:	2203      	movs	r2, #3
 80007ba:	400a      	ands	r2, r1
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	21ff      	movs	r1, #255	; 0xff
 80007c0:	4091      	lsls	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	401a      	ands	r2, r3
 80007c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	019b      	lsls	r3, r3, #6
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	401a      	ands	r2, r3
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0018      	movs	r0, r3
 80007d8:	2303      	movs	r3, #3
 80007da:	4003      	ands	r3, r0
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <__NVIC_SetPriority+0xd8>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	001c      	movs	r4, r3
 80007e8:	230f      	movs	r3, #15
 80007ea:	4023      	ands	r3, r4
 80007ec:	3b08      	subs	r3, #8
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	430a      	orrs	r2, r1
 80007f2:	3306      	adds	r3, #6
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	18c3      	adds	r3, r0, r3
 80007f8:	3304      	adds	r3, #4
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b003      	add	sp, #12
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	1e5a      	subs	r2, r3, #1
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	045b      	lsls	r3, r3, #17
 800081c:	429a      	cmp	r2, r3
 800081e:	d301      	bcc.n	8000824 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000820:	2301      	movs	r3, #1
 8000822:	e010      	b.n	8000846 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <SysTick_Config+0x44>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	3a01      	subs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082c:	2301      	movs	r3, #1
 800082e:	425b      	negs	r3, r3
 8000830:	2103      	movs	r1, #3
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff7c 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x44>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	210f      	movs	r1, #15
 8000860:	187b      	adds	r3, r7, r1
 8000862:	1c02      	adds	r2, r0, #0
 8000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	187b      	adds	r3, r7, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff5d 	bl	8000730 <__NVIC_SetPriority>
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ffbf 	bl	800080c <SysTick_Config>
 800088e:	0003      	movs	r3, r0
}
 8000890:	0018      	movs	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}

08000898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e155      	b.n	8000b54 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d100      	bne.n	80008c0 <HAL_GPIO_Init+0x28>
 80008be:	e146      	b.n	8000b4e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2203      	movs	r2, #3
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d005      	beq.n	80008d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2203      	movs	r2, #3
 80008d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d130      	bne.n	800093a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	409a      	lsls	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	43da      	mvns	r2, r3
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	409a      	lsls	r2, r3
 80008fa:	0013      	movs	r3, r2
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090e:	2201      	movs	r2, #1
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	43da      	mvns	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	2201      	movs	r2, #1
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2203      	movs	r2, #3
 8000940:	4013      	ands	r3, r2
 8000942:	2b03      	cmp	r3, #3
 8000944:	d017      	beq.n	8000976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	43da      	mvns	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2203      	movs	r2, #3
 800097c:	4013      	ands	r3, r2
 800097e:	2b02      	cmp	r3, #2
 8000980:	d123      	bne.n	80009ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	08da      	lsrs	r2, r3, #3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3208      	adds	r2, #8
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	58d3      	ldr	r3, [r2, r3]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	2207      	movs	r2, #7
 8000994:	4013      	ands	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2107      	movs	r1, #7
 80009ae:	400b      	ands	r3, r1
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	08da      	lsrs	r2, r3, #3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3208      	adds	r2, #8
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	6939      	ldr	r1, [r7, #16]
 80009c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	409a      	lsls	r2, r3
 80009d8:	0013      	movs	r3, r2
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2203      	movs	r2, #3
 80009e8:	401a      	ands	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	23c0      	movs	r3, #192	; 0xc0
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	4013      	ands	r3, r2
 8000a08:	d100      	bne.n	8000a0c <HAL_GPIO_Init+0x174>
 8000a0a:	e0a0      	b.n	8000b4e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0c:	4b57      	ldr	r3, [pc, #348]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	4b56      	ldr	r3, [pc, #344]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	430a      	orrs	r2, r1
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a24:	4a52      	ldr	r2, [pc, #328]	; (8000b70 <HAL_GPIO_Init+0x2d8>)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	589b      	ldr	r3, [r3, r2]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2203      	movs	r2, #3
 8000a36:	4013      	ands	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	43da      	mvns	r2, r3
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	2390      	movs	r3, #144	; 0x90
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d019      	beq.n	8000a86 <HAL_GPIO_Init+0x1ee>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0x1ea>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a46      	ldr	r2, [pc, #280]	; (8000b78 <HAL_GPIO_Init+0x2e0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00d      	beq.n	8000a7e <HAL_GPIO_Init+0x1e6>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d007      	beq.n	8000a7a <HAL_GPIO_Init+0x1e2>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_GPIO_Init+0x1de>
 8000a72:	2304      	movs	r3, #4
 8000a74:	e008      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a76:	2305      	movs	r3, #5
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e004      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a86:	2300      	movs	r3, #0
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	4093      	lsls	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a98:	4935      	ldr	r1, [pc, #212]	; (8000b70 <HAL_GPIO_Init+0x2d8>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	035b      	lsls	r3, r3, #13
 8000abe:	4013      	ands	r3, r2
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43da      	mvns	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	039b      	lsls	r3, r3, #14
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43da      	mvns	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	029b      	lsls	r3, r3, #10
 8000b12:	4013      	ands	r3, r2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	025b      	lsls	r3, r3, #9
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	40da      	lsrs	r2, r3
 8000b5c:	1e13      	subs	r3, r2, #0
 8000b5e:	d000      	beq.n	8000b62 <HAL_GPIO_Init+0x2ca>
 8000b60:	e6a2      	b.n	80008a8 <HAL_GPIO_Init+0x10>
  } 
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	48001000 	.word	0x48001000
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	0008      	movs	r0, r1
 8000b92:	0011      	movs	r1, r2
 8000b94:	1cbb      	adds	r3, r7, #2
 8000b96:	1c02      	adds	r2, r0, #0
 8000b98:	801a      	strh	r2, [r3, #0]
 8000b9a:	1c7b      	adds	r3, r7, #1
 8000b9c:	1c0a      	adds	r2, r1, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba0:	1c7b      	adds	r3, r7, #1
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba8:	1cbb      	adds	r3, r7, #2
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bb0:	e003      	b.n	8000bba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bb2:	1cbb      	adds	r3, r7, #2
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f000 fb76 	bl	80012c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4013      	ands	r3, r2
 8000be0:	d100      	bne.n	8000be4 <HAL_RCC_OscConfig+0x20>
 8000be2:	e08e      	b.n	8000d02 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000be4:	4bc5      	ldr	r3, [pc, #788]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	220c      	movs	r2, #12
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d00e      	beq.n	8000c0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf0:	4bc2      	ldr	r3, [pc, #776]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d117      	bne.n	8000c2c <HAL_RCC_OscConfig+0x68>
 8000bfc:	4bbf      	ldr	r3, [pc, #764]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	23c0      	movs	r3, #192	; 0xc0
 8000c02:	025b      	lsls	r3, r3, #9
 8000c04:	401a      	ands	r2, r3
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	025b      	lsls	r3, r3, #9
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d10e      	bne.n	8000c2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0e:	4bbb      	ldr	r3, [pc, #748]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	029b      	lsls	r3, r3, #10
 8000c16:	4013      	ands	r3, r2
 8000c18:	d100      	bne.n	8000c1c <HAL_RCC_OscConfig+0x58>
 8000c1a:	e071      	b.n	8000d00 <HAL_RCC_OscConfig+0x13c>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d000      	beq.n	8000c26 <HAL_RCC_OscConfig+0x62>
 8000c24:	e06c      	b.n	8000d00 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f000 fb4c 	bl	80012c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d107      	bne.n	8000c44 <HAL_RCC_OscConfig+0x80>
 8000c34:	4bb1      	ldr	r3, [pc, #708]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4bb0      	ldr	r3, [pc, #704]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0249      	lsls	r1, r1, #9
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e02f      	b.n	8000ca4 <HAL_RCC_OscConfig+0xe0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10c      	bne.n	8000c66 <HAL_RCC_OscConfig+0xa2>
 8000c4c:	4bab      	ldr	r3, [pc, #684]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4baa      	ldr	r3, [pc, #680]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c52:	49ab      	ldr	r1, [pc, #684]	; (8000f00 <HAL_RCC_OscConfig+0x33c>)
 8000c54:	400a      	ands	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	4ba8      	ldr	r3, [pc, #672]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4ba7      	ldr	r3, [pc, #668]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c5e:	49a9      	ldr	r1, [pc, #676]	; (8000f04 <HAL_RCC_OscConfig+0x340>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e01e      	b.n	8000ca4 <HAL_RCC_OscConfig+0xe0>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d10e      	bne.n	8000c8c <HAL_RCC_OscConfig+0xc8>
 8000c6e:	4ba3      	ldr	r3, [pc, #652]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4ba2      	ldr	r3, [pc, #648]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	02c9      	lsls	r1, r1, #11
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	4b9f      	ldr	r3, [pc, #636]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b9e      	ldr	r3, [pc, #632]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	0249      	lsls	r1, r1, #9
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e00b      	b.n	8000ca4 <HAL_RCC_OscConfig+0xe0>
 8000c8c:	4b9b      	ldr	r3, [pc, #620]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b9a      	ldr	r3, [pc, #616]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c92:	499b      	ldr	r1, [pc, #620]	; (8000f00 <HAL_RCC_OscConfig+0x33c>)
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	4b98      	ldr	r3, [pc, #608]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b97      	ldr	r3, [pc, #604]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000c9e:	4999      	ldr	r1, [pc, #612]	; (8000f04 <HAL_RCC_OscConfig+0x340>)
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d014      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff fd36 	bl	800071c <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb4:	e008      	b.n	8000cc8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb6:	f7ff fd31 	bl	800071c <HAL_GetTick>
 8000cba:	0002      	movs	r2, r0
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	2b64      	cmp	r3, #100	; 0x64
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e2fd      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	4b8c      	ldr	r3, [pc, #560]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	029b      	lsls	r3, r3, #10
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d0f0      	beq.n	8000cb6 <HAL_RCC_OscConfig+0xf2>
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fd21 	bl	800071c <HAL_GetTick>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fd1c 	bl	800071c <HAL_GetTick>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	; 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e2e8      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	4b82      	ldr	r3, [pc, #520]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	029b      	lsls	r3, r3, #10
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x11c>
 8000cfe:	e000      	b.n	8000d02 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2202      	movs	r2, #2
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x14a>
 8000d0c:	e06c      	b.n	8000de8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d0e:	4b7b      	ldr	r3, [pc, #492]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	220c      	movs	r2, #12
 8000d14:	4013      	ands	r3, r2
 8000d16:	d00e      	beq.n	8000d36 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d18:	4b78      	ldr	r3, [pc, #480]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d11f      	bne.n	8000d64 <HAL_RCC_OscConfig+0x1a0>
 8000d24:	4b75      	ldr	r3, [pc, #468]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	23c0      	movs	r3, #192	; 0xc0
 8000d2a:	025b      	lsls	r3, r3, #9
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d116      	bne.n	8000d64 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	4b71      	ldr	r3, [pc, #452]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d005      	beq.n	8000d4c <HAL_RCC_OscConfig+0x188>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d001      	beq.n	8000d4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e2bb      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	22f8      	movs	r2, #248	; 0xf8
 8000d52:	4393      	bics	r3, r2
 8000d54:	0019      	movs	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	4b67      	ldr	r3, [pc, #412]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	e041      	b.n	8000de8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d024      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d6c:	4b63      	ldr	r3, [pc, #396]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b62      	ldr	r3, [pc, #392]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fcd0 	bl	800071c <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d82:	f7ff fccb 	bl	800071c <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e297      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d94:	4b59      	ldr	r3, [pc, #356]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d0f1      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	22f8      	movs	r2, #248	; 0xf8
 8000da4:	4393      	bics	r3, r2
 8000da6:	0019      	movs	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	00da      	lsls	r2, r3, #3
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e018      	b.n	8000de8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db6:	4b51      	ldr	r3, [pc, #324]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b50      	ldr	r3, [pc, #320]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fcab 	bl	800071c <HAL_GetTick>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fca6 	bl	800071c <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e272      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d1f1      	bne.n	8000dcc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2208      	movs	r2, #8
 8000dee:	4013      	ands	r3, r2
 8000df0:	d036      	beq.n	8000e60 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d019      	beq.n	8000e2e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fc89 	bl	800071c <HAL_GetTick>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc84 	bl	800071c <HAL_GetTick>
 8000e14:	0002      	movs	r2, r0
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e250      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	2202      	movs	r2, #2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d0f1      	beq.n	8000e10 <HAL_RCC_OscConfig+0x24c>
 8000e2c:	e018      	b.n	8000e60 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fc6f 	bl	800071c <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc6a 	bl	800071c <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e236      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d1f1      	bne.n	8000e44 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2204      	movs	r2, #4
 8000e66:	4013      	ands	r3, r2
 8000e68:	d100      	bne.n	8000e6c <HAL_RCC_OscConfig+0x2a8>
 8000e6a:	e0b5      	b.n	8000fd8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6c:	201f      	movs	r0, #31
 8000e6e:	183b      	adds	r3, r7, r0
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e76:	69da      	ldr	r2, [r3, #28]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	055b      	lsls	r3, r3, #21
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d110      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0549      	lsls	r1, r1, #21
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	61da      	str	r2, [r3, #28]
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000e90:	69da      	ldr	r2, [r3, #28]
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	055b      	lsls	r3, r3, #21
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e9c:	183b      	adds	r3, r7, r0
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_RCC_OscConfig+0x344>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d11a      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_RCC_OscConfig+0x344>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_RCC_OscConfig+0x344>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0049      	lsls	r1, r1, #1
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fc2e 	bl	800071c <HAL_GetTick>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec6:	f7ff fc29 	bl	800071c <HAL_GetTick>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b64      	cmp	r3, #100	; 0x64
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e1f5      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x344>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d10f      	bne.n	8000f0c <HAL_RCC_OscConfig+0x348>
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_RCC_OscConfig+0x338>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	621a      	str	r2, [r3, #32]
 8000ef8:	e036      	b.n	8000f68 <HAL_RCC_OscConfig+0x3a4>
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40021000 	.word	0x40021000
 8000f00:	fffeffff 	.word	0xfffeffff
 8000f04:	fffbffff 	.word	0xfffbffff
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x36a>
 8000f14:	4bca      	ldr	r3, [pc, #808]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	4bc9      	ldr	r3, [pc, #804]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	621a      	str	r2, [r3, #32]
 8000f20:	4bc7      	ldr	r3, [pc, #796]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4bc6      	ldr	r3, [pc, #792]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f26:	2104      	movs	r1, #4
 8000f28:	438a      	bics	r2, r1
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	e01c      	b.n	8000f68 <HAL_RCC_OscConfig+0x3a4>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x38c>
 8000f36:	4bc2      	ldr	r3, [pc, #776]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f38:	6a1a      	ldr	r2, [r3, #32]
 8000f3a:	4bc1      	ldr	r3, [pc, #772]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	621a      	str	r2, [r3, #32]
 8000f42:	4bbf      	ldr	r3, [pc, #764]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4bbe      	ldr	r3, [pc, #760]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0x3a4>
 8000f50:	4bbb      	ldr	r3, [pc, #748]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	4bba      	ldr	r3, [pc, #744]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	621a      	str	r2, [r3, #32]
 8000f5c:	4bb8      	ldr	r3, [pc, #736]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f5e:	6a1a      	ldr	r2, [r3, #32]
 8000f60:	4bb7      	ldr	r3, [pc, #732]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	2104      	movs	r1, #4
 8000f64:	438a      	bics	r2, r1
 8000f66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d014      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fbd4 	bl	800071c <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	e009      	b.n	8000f8e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fbcf 	bl	800071c <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	4aaf      	ldr	r2, [pc, #700]	; (8001244 <HAL_RCC_OscConfig+0x680>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e19a      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8e:	4bac      	ldr	r3, [pc, #688]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x3b6>
 8000f98:	e013      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fbbf 	bl	800071c <HAL_GetTick>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa2:	e009      	b.n	8000fb8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fbba 	bl	800071c <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4aa5      	ldr	r2, [pc, #660]	; (8001244 <HAL_RCC_OscConfig+0x680>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e185      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	4ba1      	ldr	r3, [pc, #644]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d105      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fcc:	4b9c      	ldr	r3, [pc, #624]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000fce:	69da      	ldr	r2, [r3, #28]
 8000fd0:	4b9b      	ldr	r3, [pc, #620]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000fd2:	499d      	ldr	r1, [pc, #628]	; (8001248 <HAL_RCC_OscConfig+0x684>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2210      	movs	r2, #16
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d063      	beq.n	80010aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d12a      	bne.n	8001040 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fea:	4b95      	ldr	r3, [pc, #596]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fee:	4b94      	ldr	r3, [pc, #592]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ff6:	4b92      	ldr	r3, [pc, #584]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ffa:	4b91      	ldr	r3, [pc, #580]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fb8b 	bl	800071c <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800100c:	f7ff fb86 	bl	800071c <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e152      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800101e:	4b88      	ldr	r3, [pc, #544]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001022:	2202      	movs	r2, #2
 8001024:	4013      	ands	r3, r2
 8001026:	d0f1      	beq.n	800100c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001028:	4b85      	ldr	r3, [pc, #532]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	22f8      	movs	r2, #248	; 0xf8
 800102e:	4393      	bics	r3, r2
 8001030:	0019      	movs	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	00da      	lsls	r2, r3, #3
 8001038:	4b81      	ldr	r3, [pc, #516]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800103a:	430a      	orrs	r2, r1
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
 800103e:	e034      	b.n	80010aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	3305      	adds	r3, #5
 8001046:	d111      	bne.n	800106c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001048:	4b7d      	ldr	r3, [pc, #500]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800104a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104c:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800104e:	2104      	movs	r1, #4
 8001050:	438a      	bics	r2, r1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001054:	4b7a      	ldr	r3, [pc, #488]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	22f8      	movs	r2, #248	; 0xf8
 800105a:	4393      	bics	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	00da      	lsls	r2, r3, #3
 8001064:	4b76      	ldr	r3, [pc, #472]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	e01e      	b.n	80010aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800106c:	4b74      	ldr	r3, [pc, #464]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800106e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001070:	4b73      	ldr	r3, [pc, #460]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001072:	2104      	movs	r1, #4
 8001074:	430a      	orrs	r2, r1
 8001076:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001078:	4b71      	ldr	r3, [pc, #452]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800107a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107c:	4b70      	ldr	r3, [pc, #448]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800107e:	2101      	movs	r1, #1
 8001080:	438a      	bics	r2, r1
 8001082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fb4a 	bl	800071c <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800108e:	f7ff fb45 	bl	800071c <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e111      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010a0:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f1      	bne.n	800108e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2220      	movs	r2, #32
 80010b0:	4013      	ands	r3, r2
 80010b2:	d05c      	beq.n	800116e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010b4:	4b62      	ldr	r3, [pc, #392]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	220c      	movs	r2, #12
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d00e      	beq.n	80010de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010c0:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d114      	bne.n	80010f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010cc:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	401a      	ands	r2, r3
 80010d6:	23c0      	movs	r3, #192	; 0xc0
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	429a      	cmp	r2, r3
 80010dc:	d10b      	bne.n	80010f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80010de:	4b58      	ldr	r3, [pc, #352]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80010e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	029b      	lsls	r3, r3, #10
 80010e6:	4013      	ands	r3, r2
 80010e8:	d040      	beq.n	800116c <HAL_RCC_OscConfig+0x5a8>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d03c      	beq.n	800116c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e0e6      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01b      	beq.n	8001136 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001102:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0249      	lsls	r1, r1, #9
 8001108:	430a      	orrs	r2, r1
 800110a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb06 	bl	800071c <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001116:	f7ff fb01 	bl	800071c <HAL_GetTick>
 800111a:	0002      	movs	r2, r0
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0cd      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800112a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x552>
 8001134:	e01b      	b.n	800116e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001136:	4b42      	ldr	r3, [pc, #264]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113a:	4b41      	ldr	r3, [pc, #260]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800113c:	4943      	ldr	r1, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x688>)
 800113e:	400a      	ands	r2, r1
 8001140:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff faeb 	bl	800071c <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800114c:	f7ff fae6 	bl	800071c <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e0b2      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	029b      	lsls	r3, r3, #10
 8001166:	4013      	ands	r3, r2
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x588>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800116c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <HAL_RCC_OscConfig+0x5b4>
 8001176:	e0a4      	b.n	80012c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	220c      	movs	r2, #12
 800117e:	4013      	ands	r3, r2
 8001180:	2b08      	cmp	r3, #8
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x5c2>
 8001184:	e078      	b.n	8001278 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	2b02      	cmp	r3, #2
 800118c:	d14c      	bne.n	8001228 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 8001194:	492e      	ldr	r1, [pc, #184]	; (8001250 <HAL_RCC_OscConfig+0x68c>)
 8001196:	400a      	ands	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fabf 	bl	800071c <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a4:	f7ff faba 	bl	800071c <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e086      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	049b      	lsls	r3, r3, #18
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	220f      	movs	r2, #15
 80011c8:	4393      	bics	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_RCC_OscConfig+0x690>)
 80011dc:	4013      	ands	r3, r2
 80011de:	0019      	movs	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	431a      	orrs	r2, r3
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011ec:	430a      	orrs	r2, r1
 80011ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0449      	lsls	r1, r1, #17
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fa8d 	bl	800071c <HAL_GetTick>
 8001202:	0003      	movs	r3, r0
 8001204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001208:	f7ff fa88 	bl	800071c <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e054      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	049b      	lsls	r3, r3, #18
 8001222:	4013      	ands	r3, r2
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x644>
 8001226:	e04c      	b.n	80012c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_RCC_OscConfig+0x67c>)
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <HAL_RCC_OscConfig+0x68c>)
 8001230:	400a      	ands	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fa72 	bl	800071c <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x6a6>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	40021000 	.word	0x40021000
 8001244:	00001388 	.word	0x00001388
 8001248:	efffffff 	.word	0xefffffff
 800124c:	fffeffff 	.word	0xfffeffff
 8001250:	feffffff 	.word	0xfeffffff
 8001254:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fa60 	bl	800071c <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e02c      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_RCC_OscConfig+0x708>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	049b      	lsls	r3, r3, #18
 8001272:	4013      	ands	r3, r2
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x694>
 8001276:	e024      	b.n	80012c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e01f      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_RCC_OscConfig+0x708>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_RCC_OscConfig+0x708>)
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	401a      	ands	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	429a      	cmp	r2, r3
 800129e:	d10e      	bne.n	80012be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	220f      	movs	r2, #15
 80012a4:	401a      	ands	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d107      	bne.n	80012be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	23f0      	movs	r3, #240	; 0xf0
 80012b2:	039b      	lsls	r3, r3, #14
 80012b4:	401a      	ands	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b008      	add	sp, #32
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0bf      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4013      	ands	r3, r2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d911      	bls.n	8001316 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b5e      	ldr	r3, [pc, #376]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4393      	bics	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	4013      	ands	r3, r2
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0a6      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2202      	movs	r2, #2
 800131c:	4013      	ands	r3, r2
 800131e:	d015      	beq.n	800134c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2204      	movs	r2, #4
 8001326:	4013      	ands	r3, r2
 8001328:	d006      	beq.n	8001338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 8001330:	21e0      	movs	r1, #224	; 0xe0
 8001332:	00c9      	lsls	r1, r1, #3
 8001334:	430a      	orrs	r2, r1
 8001336:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001338:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	22f0      	movs	r2, #240	; 0xf0
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	4013      	ands	r3, r2
 8001354:	d04c      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d120      	bne.n	80013ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e07a      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d107      	bne.n	8001386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	049b      	lsls	r3, r3, #18
 800137e:	4013      	ands	r3, r2
 8001380:	d114      	bne.n	80013ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e06e      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 8001390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d108      	bne.n	80013ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e062      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e05b      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4393      	bics	r3, r2
 80013b4:	0019      	movs	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c0:	f7ff f9ac 	bl	800071c <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c8:	e009      	b.n	80013de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ca:	f7ff f9a7 	bl	800071c <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_RCC_ClockConfig+0x1a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e042      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	220c      	movs	r2, #12
 80013e4:	401a      	ands	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d1ec      	bne.n	80013ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d211      	bcs.n	8001422 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_RCC_ClockConfig+0x19c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e020      	b.n	8001464 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	4013      	ands	r3, r2
 800142a:	d009      	beq.n	8001440 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_RCC_ClockConfig+0x1a8>)
 8001432:	4013      	ands	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001440:	f000 f820 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8001444:	0001      	movs	r1, r0
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_ClockConfig+0x1a0>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	220f      	movs	r2, #15
 800144e:	4013      	ands	r3, r2
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_RCC_ClockConfig+0x1ac>)
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	000a      	movs	r2, r1
 8001456:	40da      	lsrs	r2, r3
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_ClockConfig+0x1b0>)
 800145a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800145c:	2003      	movs	r0, #3
 800145e:	f7ff f917 	bl	8000690 <HAL_InitTick>
  
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40022000 	.word	0x40022000
 8001470:	40021000 	.word	0x40021000
 8001474:	00001388 	.word	0x00001388
 8001478:	fffff8ff 	.word	0xfffff8ff
 800147c:	080023b8 	.word	0x080023b8
 8001480:	20000000 	.word	0x20000000

08001484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_GetSysClockFreq+0xd0>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	220c      	movs	r2, #12
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d046      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0xb8>
 80014ae:	d848      	bhi.n	8001542 <HAL_RCC_GetSysClockFreq+0xbe>
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d002      	beq.n	80014ba <HAL_RCC_GetSysClockFreq+0x36>
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d003      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x3c>
 80014b8:	e043      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_GetSysClockFreq+0xd4>)
 80014bc:	613b      	str	r3, [r7, #16]
      break;
 80014be:	e043      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	0c9b      	lsrs	r3, r3, #18
 80014c4:	220f      	movs	r2, #15
 80014c6:	4013      	ands	r3, r2
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_RCC_GetSysClockFreq+0xd8>)
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_RCC_GetSysClockFreq+0xd0>)
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	220f      	movs	r2, #15
 80014d4:	4013      	ands	r3, r2
 80014d6:	4a22      	ldr	r2, [pc, #136]	; (8001560 <HAL_RCC_GetSysClockFreq+0xdc>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	23c0      	movs	r3, #192	; 0xc0
 80014e0:	025b      	lsls	r3, r3, #9
 80014e2:	401a      	ands	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	025b      	lsls	r3, r3, #9
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d109      	bne.n	8001500 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	481a      	ldr	r0, [pc, #104]	; (8001558 <HAL_RCC_GetSysClockFreq+0xd4>)
 80014f0:	f7fe fe08 	bl	8000104 <__udivsi3>
 80014f4:	0003      	movs	r3, r0
 80014f6:	001a      	movs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4353      	muls	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e01a      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	401a      	ands	r2, r3
 8001508:	23c0      	movs	r3, #192	; 0xc0
 800150a:	025b      	lsls	r3, r3, #9
 800150c:	429a      	cmp	r2, r3
 800150e:	d109      	bne.n	8001524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001514:	f7fe fdf6 	bl	8000104 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	001a      	movs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4353      	muls	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e008      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001528:	f7fe fdec 	bl	8000104 <__udivsi3>
 800152c:	0003      	movs	r3, r0
 800152e:	001a      	movs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4353      	muls	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	613b      	str	r3, [r7, #16]
      break;
 800153a:	e005      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_GetSysClockFreq+0xe0>)
 800153e:	613b      	str	r3, [r7, #16]
      break;
 8001540:	e002      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001544:	613b      	str	r3, [r7, #16]
      break;
 8001546:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001548:	693b      	ldr	r3, [r7, #16]
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b006      	add	sp, #24
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	40021000 	.word	0x40021000
 8001558:	007a1200 	.word	0x007a1200
 800155c:	080023c8 	.word	0x080023c8
 8001560:	080023d8 	.word	0x080023d8
 8001564:	02dc6c00 	.word	0x02dc6c00

08001568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e042      	b.n	8001600 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	223d      	movs	r2, #61	; 0x3d
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d107      	bne.n	8001596 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	223c      	movs	r2, #60	; 0x3c
 800158a:	2100      	movs	r1, #0
 800158c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	0018      	movs	r0, r3
 8001592:	f7fe ffc3 	bl	800051c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	223d      	movs	r2, #61	; 0x3d
 800159a:	2102      	movs	r1, #2
 800159c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	0019      	movs	r1, r3
 80015a8:	0010      	movs	r0, r2
 80015aa:	f000 fad7 	bl	8001b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2246      	movs	r2, #70	; 0x46
 80015b2:	2101      	movs	r1, #1
 80015b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	223e      	movs	r2, #62	; 0x3e
 80015ba:	2101      	movs	r1, #1
 80015bc:	5499      	strb	r1, [r3, r2]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	2101      	movs	r1, #1
 80015c4:	5499      	strb	r1, [r3, r2]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	2101      	movs	r1, #1
 80015cc:	5499      	strb	r1, [r3, r2]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2241      	movs	r2, #65	; 0x41
 80015d2:	2101      	movs	r1, #1
 80015d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2242      	movs	r2, #66	; 0x42
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2243      	movs	r2, #67	; 0x43
 80015e2:	2101      	movs	r1, #1
 80015e4:	5499      	strb	r1, [r3, r2]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2244      	movs	r2, #68	; 0x44
 80015ea:	2101      	movs	r1, #1
 80015ec:	5499      	strb	r1, [r3, r2]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2245      	movs	r2, #69	; 0x45
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	223d      	movs	r2, #61	; 0x3d
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e042      	b.n	80016a0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	223d      	movs	r2, #61	; 0x3d
 800161e:	5c9b      	ldrb	r3, [r3, r2]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	223c      	movs	r2, #60	; 0x3c
 800162a:	2100      	movs	r1, #0
 800162c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	0018      	movs	r0, r3
 8001632:	f000 f839 	bl	80016a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	223d      	movs	r2, #61	; 0x3d
 800163a:	2102      	movs	r1, #2
 800163c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f000 fa87 	bl	8001b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2246      	movs	r2, #70	; 0x46
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	223e      	movs	r2, #62	; 0x3e
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	223f      	movs	r2, #63	; 0x3f
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2240      	movs	r2, #64	; 0x40
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2241      	movs	r2, #65	; 0x41
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2242      	movs	r2, #66	; 0x42
 800167a:	2101      	movs	r1, #1
 800167c:	5499      	strb	r1, [r3, r2]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2243      	movs	r2, #67	; 0x43
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2244      	movs	r2, #68	; 0x44
 800168a:	2101      	movs	r1, #1
 800168c:	5499      	strb	r1, [r3, r2]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2245      	movs	r2, #69	; 0x45
 8001692:	2101      	movs	r1, #1
 8001694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	223d      	movs	r2, #61	; 0x3d
 800169a:	2101      	movs	r1, #1
 800169c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b002      	add	sp, #8
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d108      	bne.n	80016da <HAL_TIM_PWM_Start+0x22>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	223e      	movs	r2, #62	; 0x3e
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	4193      	sbcs	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	e01f      	b.n	800171a <HAL_TIM_PWM_Start+0x62>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d108      	bne.n	80016f2 <HAL_TIM_PWM_Start+0x3a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	223f      	movs	r2, #63	; 0x3f
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	4193      	sbcs	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	e013      	b.n	800171a <HAL_TIM_PWM_Start+0x62>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d108      	bne.n	800170a <HAL_TIM_PWM_Start+0x52>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	5c9b      	ldrb	r3, [r3, r2]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	1e5a      	subs	r2, r3, #1
 8001704:	4193      	sbcs	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	e007      	b.n	800171a <HAL_TIM_PWM_Start+0x62>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2241      	movs	r2, #65	; 0x41
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	4193      	sbcs	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e074      	b.n	800180c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <HAL_TIM_PWM_Start+0x7a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	223e      	movs	r2, #62	; 0x3e
 800172c:	2102      	movs	r1, #2
 800172e:	5499      	strb	r1, [r3, r2]
 8001730:	e013      	b.n	800175a <HAL_TIM_PWM_Start+0xa2>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d104      	bne.n	8001742 <HAL_TIM_PWM_Start+0x8a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	223f      	movs	r2, #63	; 0x3f
 800173c:	2102      	movs	r1, #2
 800173e:	5499      	strb	r1, [r3, r2]
 8001740:	e00b      	b.n	800175a <HAL_TIM_PWM_Start+0xa2>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d104      	bne.n	8001752 <HAL_TIM_PWM_Start+0x9a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	2102      	movs	r1, #2
 800174e:	5499      	strb	r1, [r3, r2]
 8001750:	e003      	b.n	800175a <HAL_TIM_PWM_Start+0xa2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2241      	movs	r2, #65	; 0x41
 8001756:	2102      	movs	r1, #2
 8001758:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fd10 	bl	8002188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a29      	ldr	r2, [pc, #164]	; (8001814 <HAL_TIM_PWM_Start+0x15c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00e      	beq.n	8001790 <HAL_TIM_PWM_Start+0xd8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_TIM_PWM_Start+0x160>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d009      	beq.n	8001790 <HAL_TIM_PWM_Start+0xd8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a26      	ldr	r2, [pc, #152]	; (800181c <HAL_TIM_PWM_Start+0x164>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d004      	beq.n	8001790 <HAL_TIM_PWM_Start+0xd8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <HAL_TIM_PWM_Start+0x168>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d101      	bne.n	8001794 <HAL_TIM_PWM_Start+0xdc>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_TIM_PWM_Start+0xde>
 8001794:	2300      	movs	r3, #0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0209      	lsls	r1, r1, #8
 80017a8:	430a      	orrs	r2, r1
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_TIM_PWM_Start+0x15c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00f      	beq.n	80017d6 <HAL_TIM_PWM_Start+0x11e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	429a      	cmp	r2, r3
 80017c0:	d009      	beq.n	80017d6 <HAL_TIM_PWM_Start+0x11e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_TIM_PWM_Start+0x16c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_TIM_PWM_Start+0x11e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_PWM_Start+0x160>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d111      	bne.n	80017fa <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2207      	movs	r2, #7
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d010      	beq.n	800180a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2101      	movs	r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017f8:	e007      	b.n	800180a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40012c00 	.word	0x40012c00
 8001818:	40014000 	.word	0x40014000
 800181c:	40014400 	.word	0x40014400
 8001820:	40014800 	.word	0x40014800
 8001824:	40000400 	.word	0x40000400

08001828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001834:	2317      	movs	r3, #23
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	223c      	movs	r2, #60	; 0x3c
 8001840:	5c9b      	ldrb	r3, [r3, r2]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001846:	2302      	movs	r3, #2
 8001848:	e0ad      	b.n	80019a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	223c      	movs	r2, #60	; 0x3c
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d100      	bne.n	800185a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001858:	e076      	b.n	8001948 <HAL_TIM_PWM_ConfigChannel+0x120>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d900      	bls.n	8001862 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001860:	e095      	b.n	800198e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d04e      	beq.n	8001906 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d900      	bls.n	8001870 <HAL_TIM_PWM_ConfigChannel+0x48>
 800186e:	e08e      	b.n	800198e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_PWM_ConfigChannel+0x56>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b04      	cmp	r3, #4
 800187a:	d021      	beq.n	80018c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800187c:	e087      	b.n	800198e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f9e8 	bl	8001c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2108      	movs	r1, #8
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6999      	ldr	r1, [r3, #24]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	619a      	str	r2, [r3, #24]
      break;
 80018be:	e06b      	b.n	8001998 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 fa4f 	bl	8001d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0109      	lsls	r1, r1, #4
 80018dc:	430a      	orrs	r2, r1
 80018de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4931      	ldr	r1, [pc, #196]	; (80019b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6999      	ldr	r1, [r3, #24]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	021a      	lsls	r2, r3, #8
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	619a      	str	r2, [r3, #24]
      break;
 8001904:	e048      	b.n	8001998 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f000 fab0 	bl	8001e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2108      	movs	r1, #8
 8001920:	430a      	orrs	r2, r1
 8001922:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2104      	movs	r1, #4
 8001930:	438a      	bics	r2, r1
 8001932:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69d9      	ldr	r1, [r3, #28]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	61da      	str	r2, [r3, #28]
      break;
 8001946:	e027      	b.n	8001998 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f000 fb15 	bl	8001f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69da      	ldr	r2, [r3, #28]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0109      	lsls	r1, r1, #4
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001974:	400a      	ands	r2, r1
 8001976:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69d9      	ldr	r1, [r3, #28]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	021a      	lsls	r2, r3, #8
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	61da      	str	r2, [r3, #28]
      break;
 800198c:	e004      	b.n	8001998 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800198e:	2317      	movs	r3, #23
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
      break;
 8001996:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	223c      	movs	r2, #60	; 0x3c
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

  return status;
 80019a0:	2317      	movs	r3, #23
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b006      	add	sp, #24
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	fffffbff 	.word	0xfffffbff

080019b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019be:	230f      	movs	r3, #15
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	223c      	movs	r2, #60	; 0x3c
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_TIM_ConfigClockSource+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e0bc      	b.n	8001b4e <HAL_TIM_ConfigClockSource+0x19a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	223c      	movs	r2, #60	; 0x3c
 80019d8:	2101      	movs	r1, #1
 80019da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	223d      	movs	r2, #61	; 0x3d
 80019e0:	2102      	movs	r1, #2
 80019e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2277      	movs	r2, #119	; 0x77
 80019f0:	4393      	bics	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_TIM_ConfigClockSource+0x1a4>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0192      	lsls	r2, r2, #6
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d040      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0xde>
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	0192      	lsls	r2, r2, #6
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d900      	bls.n	8001a1a <HAL_TIM_ConfigClockSource+0x66>
 8001a18:	e088      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	0152      	lsls	r2, r2, #5
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d100      	bne.n	8001a24 <HAL_TIM_ConfigClockSource+0x70>
 8001a22:	e088      	b.n	8001b36 <HAL_TIM_ConfigClockSource+0x182>
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	0152      	lsls	r2, r2, #5
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d900      	bls.n	8001a2e <HAL_TIM_ConfigClockSource+0x7a>
 8001a2c:	e07e      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a2e:	2b70      	cmp	r3, #112	; 0x70
 8001a30:	d018      	beq.n	8001a64 <HAL_TIM_ConfigClockSource+0xb0>
 8001a32:	d900      	bls.n	8001a36 <HAL_TIM_ConfigClockSource+0x82>
 8001a34:	e07a      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a36:	2b60      	cmp	r3, #96	; 0x60
 8001a38:	d04f      	beq.n	8001ada <HAL_TIM_ConfigClockSource+0x126>
 8001a3a:	d900      	bls.n	8001a3e <HAL_TIM_ConfigClockSource+0x8a>
 8001a3c:	e076      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a3e:	2b50      	cmp	r3, #80	; 0x50
 8001a40:	d03b      	beq.n	8001aba <HAL_TIM_ConfigClockSource+0x106>
 8001a42:	d900      	bls.n	8001a46 <HAL_TIM_ConfigClockSource+0x92>
 8001a44:	e072      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d057      	beq.n	8001afa <HAL_TIM_ConfigClockSource+0x146>
 8001a4a:	d900      	bls.n	8001a4e <HAL_TIM_ConfigClockSource+0x9a>
 8001a4c:	e06e      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a4e:	2b30      	cmp	r3, #48	; 0x30
 8001a50:	d063      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x166>
 8001a52:	d86b      	bhi.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d060      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x166>
 8001a58:	d868      	bhi.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d05d      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x166>
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d05b      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x166>
 8001a62:	e063      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a74:	f000 fb68 	bl	8002148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2277      	movs	r2, #119	; 0x77
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	609a      	str	r2, [r3, #8]
      break;
 8001a90:	e052      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001aa2:	f000 fb51 	bl	8002148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	01c9      	lsls	r1, r1, #7
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	609a      	str	r2, [r3, #8]
      break;
 8001ab8:	e03e      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	f000 fac4 	bl	8002054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2150      	movs	r1, #80	; 0x50
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 fb1e 	bl	8002114 <TIM_ITRx_SetConfig>
      break;
 8001ad8:	e02e      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	f000 fae2 	bl	80020b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2160      	movs	r1, #96	; 0x60
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 fb0e 	bl	8002114 <TIM_ITRx_SetConfig>
      break;
 8001af8:	e01e      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b06:	001a      	movs	r2, r3
 8001b08:	f000 faa4 	bl	8002054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 fafe 	bl	8002114 <TIM_ITRx_SetConfig>
      break;
 8001b18:	e00e      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0019      	movs	r1, r3
 8001b24:	0010      	movs	r0, r2
 8001b26:	f000 faf5 	bl	8002114 <TIM_ITRx_SetConfig>
      break;
 8001b2a:	e005      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
      break;
 8001b34:	e000      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b36:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	223d      	movs	r2, #61	; 0x3d
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	223c      	movs	r2, #60	; 0x3c
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]

  return status;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	ffff00ff 	.word	0xffff00ff

08001b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <TIM_Base_SetConfig+0xe4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d008      	beq.n	8001b86 <TIM_Base_SetConfig+0x2a>
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	05db      	lsls	r3, r3, #23
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d003      	beq.n	8001b86 <TIM_Base_SetConfig+0x2a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a30      	ldr	r2, [pc, #192]	; (8001c44 <TIM_Base_SetConfig+0xe8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d108      	bne.n	8001b98 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2270      	movs	r2, #112	; 0x70
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a29      	ldr	r2, [pc, #164]	; (8001c40 <TIM_Base_SetConfig+0xe4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d018      	beq.n	8001bd2 <TIM_Base_SetConfig+0x76>
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	05db      	lsls	r3, r3, #23
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d013      	beq.n	8001bd2 <TIM_Base_SetConfig+0x76>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <TIM_Base_SetConfig+0xe8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00f      	beq.n	8001bd2 <TIM_Base_SetConfig+0x76>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <TIM_Base_SetConfig+0xec>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00b      	beq.n	8001bd2 <TIM_Base_SetConfig+0x76>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <TIM_Base_SetConfig+0xf0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <TIM_Base_SetConfig+0x76>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <TIM_Base_SetConfig+0xf4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <TIM_Base_SetConfig+0x76>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <TIM_Base_SetConfig+0xf8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d108      	bne.n	8001be4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <TIM_Base_SetConfig+0xfc>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	4393      	bics	r3, r2
 8001bea:	001a      	movs	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <TIM_Base_SetConfig+0xe4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00b      	beq.n	8001c2a <TIM_Base_SetConfig+0xce>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <TIM_Base_SetConfig+0xf0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <TIM_Base_SetConfig+0xce>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <TIM_Base_SetConfig+0xf4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d003      	beq.n	8001c2a <TIM_Base_SetConfig+0xce>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <TIM_Base_SetConfig+0xf8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d103      	bne.n	8001c32 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	615a      	str	r2, [r3, #20]
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b004      	add	sp, #16
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40002000 	.word	0x40002000
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	40014400 	.word	0x40014400
 8001c54:	40014800 	.word	0x40014800
 8001c58:	fffffcff 	.word	0xfffffcff

08001c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	001a      	movs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2270      	movs	r2, #112	; 0x70
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4393      	bics	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <TIM_OC1_SetConfig+0xf8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00b      	beq.n	8001cd2 <TIM_OC1_SetConfig+0x76>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <TIM_OC1_SetConfig+0xfc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <TIM_OC1_SetConfig+0x76>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <TIM_OC1_SetConfig+0x100>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d003      	beq.n	8001cd2 <TIM_OC1_SetConfig+0x76>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <TIM_OC1_SetConfig+0x104>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10c      	bne.n	8001cec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4393      	bics	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <TIM_OC1_SetConfig+0xf8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00b      	beq.n	8001d0c <TIM_OC1_SetConfig+0xb0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <TIM_OC1_SetConfig+0xfc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d007      	beq.n	8001d0c <TIM_OC1_SetConfig+0xb0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <TIM_OC1_SetConfig+0x100>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <TIM_OC1_SetConfig+0xb0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <TIM_OC1_SetConfig+0x104>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d111      	bne.n	8001d30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <TIM_OC1_SetConfig+0x108>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <TIM_OC1_SetConfig+0x10c>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	621a      	str	r2, [r3, #32]
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b006      	add	sp, #24
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	40014000 	.word	0x40014000
 8001d5c:	40014400 	.word	0x40014400
 8001d60:	40014800 	.word	0x40014800
 8001d64:	fffffeff 	.word	0xfffffeff
 8001d68:	fffffdff 	.word	0xfffffdff

08001d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	001a      	movs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a2e      	ldr	r2, [pc, #184]	; (8001e54 <TIM_OC2_SetConfig+0xe8>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <TIM_OC2_SetConfig+0xec>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2220      	movs	r2, #32
 8001db6:	4393      	bics	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <TIM_OC2_SetConfig+0xf0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10d      	bne.n	8001dea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	4393      	bics	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <TIM_OC2_SetConfig+0xf0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00b      	beq.n	8001e0a <TIM_OC2_SetConfig+0x9e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <TIM_OC2_SetConfig+0xf4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <TIM_OC2_SetConfig+0x9e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <TIM_OC2_SetConfig+0xf8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <TIM_OC2_SetConfig+0x9e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <TIM_OC2_SetConfig+0xfc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d113      	bne.n	8001e32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <TIM_OC2_SetConfig+0x100>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <TIM_OC2_SetConfig+0x104>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	621a      	str	r2, [r3, #32]
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b006      	add	sp, #24
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	ffff8fff 	.word	0xffff8fff
 8001e58:	fffffcff 	.word	0xfffffcff
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40014400 	.word	0x40014400
 8001e68:	40014800 	.word	0x40014800
 8001e6c:	fffffbff 	.word	0xfffffbff
 8001e70:	fffff7ff 	.word	0xfffff7ff

08001e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <TIM_OC3_SetConfig+0xe4>)
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2270      	movs	r2, #112	; 0x70
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <TIM_OC3_SetConfig+0xe8>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <TIM_OC3_SetConfig+0xec>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10d      	bne.n	8001eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <TIM_OC3_SetConfig+0xf0>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <TIM_OC3_SetConfig+0xf4>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <TIM_OC3_SetConfig+0xec>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <TIM_OC3_SetConfig+0x9a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <TIM_OC3_SetConfig+0xf8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <TIM_OC3_SetConfig+0x9a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <TIM_OC3_SetConfig+0xfc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d003      	beq.n	8001f0e <TIM_OC3_SetConfig+0x9a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <TIM_OC3_SetConfig+0x100>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d113      	bne.n	8001f36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <TIM_OC3_SetConfig+0x104>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <TIM_OC3_SetConfig+0x108>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	621a      	str	r2, [r3, #32]
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b006      	add	sp, #24
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	fffffeff 	.word	0xfffffeff
 8001f5c:	fffffdff 	.word	0xfffffdff
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	fffff7ff 	.word	0xfffff7ff
 8001f68:	fffffbff 	.word	0xfffffbff
 8001f6c:	40014000 	.word	0x40014000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	ffffefff 	.word	0xffffefff
 8001f7c:	ffffdfff 	.word	0xffffdfff

08001f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <TIM_OC4_SetConfig+0xb0>)
 8001f90:	401a      	ands	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a22      	ldr	r2, [pc, #136]	; (8002034 <TIM_OC4_SetConfig+0xb4>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <TIM_OC4_SetConfig+0xb8>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	; (800203c <TIM_OC4_SetConfig+0xbc>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	031b      	lsls	r3, r3, #12
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <TIM_OC4_SetConfig+0xc0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_OC4_SetConfig+0x78>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <TIM_OC4_SetConfig+0xc4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_OC4_SetConfig+0x78>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <TIM_OC4_SetConfig+0xc8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_OC4_SetConfig+0x78>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <TIM_OC4_SetConfig+0xcc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d109      	bne.n	800200c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <TIM_OC4_SetConfig+0xd0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	621a      	str	r2, [r3, #32]
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b006      	add	sp, #24
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	ffffefff 	.word	0xffffefff
 8002034:	ffff8fff 	.word	0xffff8fff
 8002038:	fffffcff 	.word	0xfffffcff
 800203c:	ffffdfff 	.word	0xffffdfff
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40014000 	.word	0x40014000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	ffffbfff 	.word	0xffffbfff

08002054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2201      	movs	r2, #1
 800206c:	4393      	bics	r3, r2
 800206e:	001a      	movs	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	22f0      	movs	r2, #240	; 0xf0
 800207e:	4393      	bics	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	220a      	movs	r2, #10
 8002090:	4393      	bics	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	621a      	str	r2, [r3, #32]
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b006      	add	sp, #24
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	2210      	movs	r2, #16
 80020c2:	4393      	bics	r3, r2
 80020c4:	001a      	movs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <TIM_TI2_ConfigInputStage+0x60>)
 80020da:	4013      	ands	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	031b      	lsls	r3, r3, #12
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	22a0      	movs	r2, #160	; 0xa0
 80020ec:	4393      	bics	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	621a      	str	r2, [r3, #32]
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b006      	add	sp, #24
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	ffff0fff 	.word	0xffff0fff

08002114 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2270      	movs	r2, #112	; 0x70
 8002128:	4393      	bics	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	2207      	movs	r2, #7
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	609a      	str	r2, [r3, #8]
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <TIM_ETR_SetConfig+0x3c>)
 8002160:	4013      	ands	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	021a      	lsls	r2, r3, #8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	431a      	orrs	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	609a      	str	r2, [r3, #8]
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b006      	add	sp, #24
 8002182:	bd80      	pop	{r7, pc}
 8002184:	ffff00ff 	.word	0xffff00ff

08002188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	221f      	movs	r2, #31
 8002198:	4013      	ands	r3, r2
 800219a:	2201      	movs	r2, #1
 800219c:	409a      	lsls	r2, r3
 800219e:	0013      	movs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	43d2      	mvns	r2, r2
 80021aa:	401a      	ands	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	211f      	movs	r1, #31
 80021b8:	400b      	ands	r3, r1
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4099      	lsls	r1, r3
 80021be:	000b      	movs	r3, r1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b006      	add	sp, #24
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	223c      	movs	r2, #60	; 0x3c
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e047      	b.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	223c      	movs	r2, #60	; 0x3c
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	223d      	movs	r2, #61	; 0x3d
 80021f4:	2102      	movs	r1, #2
 80021f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2270      	movs	r2, #112	; 0x70
 800220c:	4393      	bics	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00f      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	05db      	lsls	r3, r3, #23
 8002234:	429a      	cmp	r2, r3
 8002236:	d009      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d10c      	bne.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	4393      	bics	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4313      	orrs	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	223d      	movs	r2, #61	; 0x3d
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	223c      	movs	r2, #60	; 0x3c
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400
 8002288:	40014000 	.word	0x40014000

0800228c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	223c      	movs	r2, #60	; 0x3c
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e03e      	b.n	8002326 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223c      	movs	r2, #60	; 0x3c
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	4393      	bics	r3, r2
 80022b6:	001a      	movs	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80022c4:	401a      	ands	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80022d2:	401a      	ands	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80022e0:	401a      	ands	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80022ee:	401a      	ands	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80022fc:	401a      	ands	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800230a:	401a      	ands	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223c      	movs	r2, #60	; 0x3c
 8002320:	2100      	movs	r1, #0
 8002322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b004      	add	sp, #16
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	fffffcff 	.word	0xfffffcff
 8002334:	fffffbff 	.word	0xfffffbff
 8002338:	fffff7ff 	.word	0xfffff7ff
 800233c:	ffffefff 	.word	0xffffefff
 8002340:	ffffdfff 	.word	0xffffdfff
 8002344:	ffffbfff 	.word	0xffffbfff

08002348 <memset>:
 8002348:	0003      	movs	r3, r0
 800234a:	1882      	adds	r2, r0, r2
 800234c:	4293      	cmp	r3, r2
 800234e:	d100      	bne.n	8002352 <memset+0xa>
 8002350:	4770      	bx	lr
 8002352:	7019      	strb	r1, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	e7f9      	b.n	800234c <memset+0x4>

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	2600      	movs	r6, #0
 800235c:	4c0c      	ldr	r4, [pc, #48]	; (8002390 <__libc_init_array+0x38>)
 800235e:	4d0d      	ldr	r5, [pc, #52]	; (8002394 <__libc_init_array+0x3c>)
 8002360:	1b64      	subs	r4, r4, r5
 8002362:	10a4      	asrs	r4, r4, #2
 8002364:	42a6      	cmp	r6, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	2600      	movs	r6, #0
 800236a:	f000 f819 	bl	80023a0 <_init>
 800236e:	4c0a      	ldr	r4, [pc, #40]	; (8002398 <__libc_init_array+0x40>)
 8002370:	4d0a      	ldr	r5, [pc, #40]	; (800239c <__libc_init_array+0x44>)
 8002372:	1b64      	subs	r4, r4, r5
 8002374:	10a4      	asrs	r4, r4, #2
 8002376:	42a6      	cmp	r6, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	00b3      	lsls	r3, r6, #2
 800237e:	58eb      	ldr	r3, [r5, r3]
 8002380:	4798      	blx	r3
 8002382:	3601      	adds	r6, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	00b3      	lsls	r3, r6, #2
 8002388:	58eb      	ldr	r3, [r5, r3]
 800238a:	4798      	blx	r3
 800238c:	3601      	adds	r6, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	080023e8 	.word	0x080023e8
 8002394:	080023e8 	.word	0x080023e8
 8002398:	080023ec 	.word	0x080023ec
 800239c:	080023e8 	.word	0x080023e8

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
