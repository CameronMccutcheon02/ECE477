-------------- WEEK 5 PROGRESS ------------- 
-------- UPDATES -------- 
- printed puck shoot to funnel the puck

-------- TO-DO -------- 
- Interface with 7-segment display using shift regs
    - Tues: Prototype with arduino and 74HC595, get 1 7-segment incrementing
        - Use CMOS transistors + 8 bit shift registers
    - Wed: Prototype with STM32 and Cube IDE
- Do we want the middle 7-seg to display time or mode?

-------- NOTES -------- 
- Interfacing with 7-segment: https://www.youtube.com/watch?v=_74fpCfT_tA
- Shift regs and 7-segment: https://www.youtube.com/watch?v=QI1IJLB42G8 
- Schematic: https://ece362-purdue.github.io/f2022-public-labs/lab-03/lab_03.html 

-------------- WEEK 4 PROGRESS ------------- 
-------- UPDATES -------- 
- Can write from STM and read from Python 
- Added code to auto-detect the COM port to be read from in Python
- DMA research: https://wiki.st.com/stm32mcu/wiki/Getting_started_with_DMA 
- Can write to STM from PC in serial_write.py
    - I then write back an ACK containing the data that was read, so writing to the PC the data that was sent from PC
- Added serial_read to confirm reading is working. Serial_write reads and writes
- Printed v1 of scoreboard extenders, tested and modified, printing v2 now
- Changed from UART5 to UART2

-------- TO-DO -------- 
- read rx in stm32cube instead of reading from PC, document for pr
- merge my code w cameron's cube environment

-------- NOTES -------- 
RealTerm settings:
-Display: Half duplex 
-Port: 115200, port 6, change
-Capture: +CR, +LR, (type data and send ascii)

Updated PSDRs: 
PSDR #1 (Hardware): An ability to use a microcontroller to control the XY directions of a gantry system using PWM and 2 motors. 
PSDR #2 (Hardware): An ability to interface with an IC to establish communication and send data between a microcontroller and a PC via UART.
PSDR #3 (Hardware): An ability to interface a seven-segment display scoreboard with shift registers. 
 
Stretch goals:
An ability to produce sound using speakers in the scoreboard system.
An ability to change the speed of the robot via a button. 

-------------- WEEK 3 PROGRESS ------------- 
-------------- SENDING DATA FROM PC ------------- 
- Code contained in serial_write.py 

Potential dependencies for serial communication 
- infi.devicemanager (https://pypi.org/project/infi.devicemanager/)
- pyusb
- libusb

-Potential CLI implementation of RealTerm or TeraTerm (https://realterm.sourceforge.io/#Command_Line_Parameters)
-------------- RECEIVING DATA ON STM -------------- 
- Created project in STM32Cube (https://www.youtube.com/watch?v=7kUo-ekxmCA)
Settings:
    - Cleared all pinouts
    - Set high speed clock under RCC to Crystal/Ceramic Resonator
    - Enabled aysnch USART 2 with enabled global interrupt and 9600 baud rate
    - Added circular DMA USART2_RX so mem doesn't fill up
    - Installed STSW-LINK007 to update ST-Link adapter FW

- I'm using TeraTerm to open the serial connection on COM3.
- Using built in HAL_UART_Receive function  
- Reading serial data(https://www.youtube.com/watch?v=7kUo-ekxmCA timestamp 8 min)
- DMA over receiving UART
- RealTerm app is used to send serial data to test reading on the STM behalf (serial capture program)

-------------- DIMENSIONS for CAD (mm) -------------- 
- score board extenders
54.31 outter diameter
49.05 inner diameter
54.47 gole diameter
43.40 length

- camera 
38.08 x 38.08 
16.75 mm to cable

-------------- TO-DO -------------- 
- Read serial data on STM
- Send data from PC
- 3D print score board extenders
- 3D print camera holder

*** send link to 3DWox in Teams

