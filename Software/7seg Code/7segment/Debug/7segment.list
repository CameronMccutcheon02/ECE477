
7segment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dac  08001dac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001dac  08001dac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dac  08001dac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dac  08001dac  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001db0  08001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000010  08001dc4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001dc4  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f04  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001679  00000000  00000000  00028f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000843  00000000  00000000  0002b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a262  00000000  00000000  0002b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000befa  00000000  00000000  00045b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1e40  00000000  00000000  00051a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002644  00000000  00000000  000f3870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f5eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001d64 	.word	0x08001d64

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08001d64 	.word	0x08001d64

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa4e 	bl	80006c0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f822 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8f2 	bl	8000410 <MX_GPIO_Init>
  MX_SPI2_Init();
 800022c:	f000 f85e 	bl	80002ec <MX_SPI2_Init>
  MX_TIM2_Init();
 8000230:	f000 f89a 	bl	8000368 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);	//start timer 2
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x40>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 faca 	bl	80017d0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, latchPin, GPIO_PIN_SET);	//set initial state of latch pin as high
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	015b      	lsls	r3, r3, #5
 8000240:	b29b      	uxth	r3, r3
 8000242:	4807      	ldr	r0, [pc, #28]	; (8000260 <main+0x44>)
 8000244:	2201      	movs	r2, #1
 8000246:	0019      	movs	r1, r3
 8000248:	f000 fcca 	bl	8000be0 <HAL_GPIO_WritePin>
  segmentSelect = 0x00;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <main+0x48>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
  displaySelect = 0x01;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <main+0x4c>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x3c>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000090 	.word	0x20000090
 8000260:	48000400 	.word	0x48000400
 8000264:	20000000 	.word	0x20000000
 8000268:	20000001 	.word	0x20000001

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b093      	sub	sp, #76	; 0x4c
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2414      	movs	r4, #20
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2334      	movs	r3, #52	; 0x34
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f001 fd45 	bl	8001d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	2310      	movs	r3, #16
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f001 fd3e 	bl	8001d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	0021      	movs	r1, r4
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2202      	movs	r2, #2
 8000296:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2201      	movs	r2, #1
 800029c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2210      	movs	r2, #16
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fcb5 	bl	8000c1c <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002b6:	f000 f903 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2207      	movs	r2, #7
 80002be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f826 	bl	8001328 <HAL_RCC_ClockConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002e0:	f000 f8ee 	bl	80004c0 <Error_Handler>
  }
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b013      	add	sp, #76	; 0x4c
 80002ea:	bd90      	pop	{r4, r7, pc}

080002ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_SPI2_Init+0x74>)
 80002f2:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <MX_SPI2_Init+0x78>)
 80002f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <MX_SPI2_Init+0x74>)
 80002f8:	2282      	movs	r2, #130	; 0x82
 80002fa:	0052      	lsls	r2, r2, #1
 80002fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_SPI2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_SPI2_Init+0x74>)
 8000306:	22e0      	movs	r2, #224	; 0xe0
 8000308:	00d2      	lsls	r2, r2, #3
 800030a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_SPI2_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MX_SPI2_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_SPI2_Init+0x74>)
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	0092      	lsls	r2, r2, #2
 800031e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_SPI2_Init+0x74>)
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_SPI2_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_SPI2_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <MX_SPI2_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_SPI2_Init+0x74>)
 800033a:	2207      	movs	r2, #7
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_SPI2_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_SPI2_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <MX_SPI2_Init+0x74>)
 800034c:	0018      	movs	r0, r3
 800034e:	f001 f937 	bl	80015c0 <HAL_SPI_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000356:	f000 f8b3 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000002c 	.word	0x2000002c
 8000364:	40003800 	.word	0x40003800

08000368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	2308      	movs	r3, #8
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	0018      	movs	r0, r3
 8000374:	2310      	movs	r3, #16
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f001 fcc7 	bl	8001d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	2308      	movs	r3, #8
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f001 fcc0 	bl	8001d0c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038c:	4b1f      	ldr	r3, [pc, #124]	; (800040c <MX_TIM2_Init+0xa4>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	05d2      	lsls	r2, r2, #23
 8000392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_TIM2_Init+0xa4>)
 8000396:	22fa      	movs	r2, #250	; 0xfa
 8000398:	0092      	lsls	r2, r2, #2
 800039a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_TIM2_Init+0xa4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_TIM2_Init+0xa4>)
 80003a4:	2296      	movs	r2, #150	; 0x96
 80003a6:	0152      	lsls	r2, r2, #5
 80003a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_TIM2_Init+0xa4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <MX_TIM2_Init+0xa4>)
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_TIM2_Init+0xa4>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f9b9 	bl	8001730 <HAL_TIM_Base_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80003c2:	f000 f87d 	bl	80004c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c6:	2108      	movs	r1, #8
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	0152      	lsls	r2, r2, #5
 80003ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003d0:	187a      	adds	r2, r7, r1
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_TIM2_Init+0xa4>)
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f001 fa4c 	bl	8001874 <HAL_TIM_ConfigClockSource>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80003e0:	f000 f86e 	bl	80004c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f0:	003a      	movs	r2, r7
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_TIM2_Init+0xa4>)
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f001 fc2a 	bl	8001c50 <HAL_TIMEx_MasterConfigSynchronization>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000400:	f000 f85e 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b006      	add	sp, #24
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000090 	.word	0x20000090

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b089      	sub	sp, #36	; 0x24
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	240c      	movs	r4, #12
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2314      	movs	r3, #20
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f001 fc73 	bl	8001d0c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	03c9      	lsls	r1, r1, #15
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	03db      	lsls	r3, r3, #15
 800043c:	4013      	ands	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0309      	lsls	r1, r1, #12
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	031b      	lsls	r3, r3, #12
 8000458:	4013      	ands	r3, r2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_GPIO_Init+0xa8>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	02c9      	lsls	r1, r1, #11
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_GPIO_Init+0xa8>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	02db      	lsls	r3, r3, #11
 8000474:	4013      	ands	r3, r2
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(latchPin_GPIO_Port, latchPin_Pin, GPIO_PIN_RESET);
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	015b      	lsls	r3, r3, #5
 800047e:	480f      	ldr	r0, [pc, #60]	; (80004bc <MX_GPIO_Init+0xac>)
 8000480:	2200      	movs	r2, #0
 8000482:	0019      	movs	r1, r3
 8000484:	f000 fbac 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : latchPin_Pin */
  GPIO_InitStruct.Pin = latchPin_Pin;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	0152      	lsls	r2, r2, #5
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(latchPin_GPIO_Port, &GPIO_InitStruct);
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <MX_GPIO_Init+0xac>)
 80004a6:	0019      	movs	r1, r3
 80004a8:	0010      	movs	r0, r2
 80004aa:	f000 fa21 	bl	80008f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b009      	add	sp, #36	; 0x24
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000400 	.word	0x48000400

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x44>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_MspInit+0x44>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	619a      	str	r2, [r3, #24]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x44>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_MspInit+0x44>)
 80004ec:	69da      	ldr	r2, [r3, #28]
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_MspInit+0x44>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0549      	lsls	r1, r1, #21
 80004f4:	430a      	orrs	r2, r1
 80004f6:	61da      	str	r2, [r3, #28]
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_MspInit+0x44>)
 80004fa:	69da      	ldr	r2, [r3, #28]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	055b      	lsls	r3, r3, #21
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08b      	sub	sp, #44	; 0x2c
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	2414      	movs	r4, #20
 800051e:	193b      	adds	r3, r7, r4
 8000520:	0018      	movs	r0, r3
 8000522:	2314      	movs	r3, #20
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f001 fbf0 	bl	8001d0c <memset>
  if(hspi->Instance==SPI2)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2e      	ldr	r2, [pc, #184]	; (80005ec <HAL_SPI_MspInit+0xd8>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d155      	bne.n	80005e2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000538:	69da      	ldr	r2, [r3, #28]
 800053a:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	01c9      	lsls	r1, r1, #7
 8000540:	430a      	orrs	r2, r1
 8000542:	61da      	str	r2, [r3, #28]
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000546:	69da      	ldr	r2, [r3, #28]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	01db      	lsls	r3, r3, #7
 800054c:	4013      	ands	r3, r2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0309      	lsls	r1, r1, #12
 800055c:	430a      	orrs	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	031b      	lsls	r3, r3, #12
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	02c9      	lsls	r1, r1, #11
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <HAL_SPI_MspInit+0xdc>)
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	02db      	lsls	r3, r3, #11
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2204      	movs	r2, #4
 800058e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2202      	movs	r2, #2
 8000594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2203      	movs	r2, #3
 80005a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2201      	movs	r2, #1
 80005a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <HAL_SPI_MspInit+0xe0>)
 80005ac:	0019      	movs	r1, r3
 80005ae:	0010      	movs	r0, r2
 80005b0:	f000 f99e 	bl	80008f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80005b4:	0021      	movs	r1, r4
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	22a0      	movs	r2, #160	; 0xa0
 80005ba:	0212      	lsls	r2, r2, #8
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2202      	movs	r2, #2
 80005c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2203      	movs	r2, #3
 80005ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_SPI_MspInit+0xe4>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f000 f987 	bl	80008f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b00b      	add	sp, #44	; 0x2c
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40003800 	.word	0x40003800
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000800 	.word	0x48000800
 80005f8:	48000400 	.word	0x48000400

080005fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	429a      	cmp	r2, r3
 800060e:	d10b      	bne.n	8000628 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <HAL_TIM_Base_MspInit+0x34>)
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_TIM_Base_MspInit+0x34>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	61da      	str	r2, [r3, #28]
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_TIM_Base_MspInit+0x34>)
 800061e:	69db      	ldr	r3, [r3, #28]
 8000620:	2201      	movs	r2, #1
 8000622:	4013      	ands	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler+0x4>

0800063a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <HardFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 f87a 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff fff7 	bl	8000662 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f001 fb3f 	bl	8001d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fdbd 	bl	800021c <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006b0:	08001db4 	.word	0x08001db4
  ldr r2, =_sbss
 80006b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006b8:	200000dc 	.word	0x200000dc

080006bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_COMP_IRQHandler>
	...

080006c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_Init+0x24>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_Init+0x24>)
 80006ca:	2110      	movs	r1, #16
 80006cc:	430a      	orrs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f809 	bl	80006e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d6:	f7ff fef9 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x5c>)
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_InitTick+0x60>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0019      	movs	r1, r3
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	0098      	lsls	r0, r3, #2
 80006fe:	f7ff fd01 	bl	8000104 <__udivsi3>
 8000702:	0003      	movs	r3, r0
 8000704:	0019      	movs	r1, r3
 8000706:	0020      	movs	r0, r4
 8000708:	f7ff fcfc 	bl	8000104 <__udivsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f8e1 	bl	80008d6 <HAL_SYSTICK_Config>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e00f      	b.n	800073c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d80b      	bhi.n	800073a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8be 	bl	80008ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_InitTick+0x64>)
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b003      	add	sp, #12
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000004 	.word	0x20000004
 8000748:	2000000c 	.word	0x2000000c
 800074c:	20000008 	.word	0x20000008

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	001a      	movs	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	18d2      	adds	r2, r2, r3
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	2000000c 	.word	0x2000000c
 8000770:	200000d8 	.word	0x200000d8

08000774 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	200000d8 	.word	0x200000d8

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b7f      	cmp	r3, #127	; 0x7f
 800079c:	d828      	bhi.n	80007f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079e:	4a2f      	ldr	r2, [pc, #188]	; (800085c <__NVIC_SetPriority+0xd4>)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	33c0      	adds	r3, #192	; 0xc0
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	589b      	ldr	r3, [r3, r2]
 80007ae:	1dfa      	adds	r2, r7, #7
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	0011      	movs	r1, r2
 80007b4:	2203      	movs	r2, #3
 80007b6:	400a      	ands	r2, r1
 80007b8:	00d2      	lsls	r2, r2, #3
 80007ba:	21ff      	movs	r1, #255	; 0xff
 80007bc:	4091      	lsls	r1, r2
 80007be:	000a      	movs	r2, r1
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	401a      	ands	r2, r3
 80007c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	019b      	lsls	r3, r3, #6
 80007ca:	22ff      	movs	r2, #255	; 0xff
 80007cc:	401a      	ands	r2, r3
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0018      	movs	r0, r3
 80007d4:	2303      	movs	r3, #3
 80007d6:	4003      	ands	r3, r0
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	481f      	ldr	r0, [pc, #124]	; (800085c <__NVIC_SetPriority+0xd4>)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	430a      	orrs	r2, r1
 80007e8:	33c0      	adds	r3, #192	; 0xc0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ee:	e031      	b.n	8000854 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <__NVIC_SetPriority+0xd8>)
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0019      	movs	r1, r3
 80007f8:	230f      	movs	r3, #15
 80007fa:	400b      	ands	r3, r1
 80007fc:	3b08      	subs	r3, #8
 80007fe:	089b      	lsrs	r3, r3, #2
 8000800:	3306      	adds	r3, #6
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	18d3      	adds	r3, r2, r3
 8000806:	3304      	adds	r3, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1dfa      	adds	r2, r7, #7
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	0011      	movs	r1, r2
 8000810:	2203      	movs	r2, #3
 8000812:	400a      	ands	r2, r1
 8000814:	00d2      	lsls	r2, r2, #3
 8000816:	21ff      	movs	r1, #255	; 0xff
 8000818:	4091      	lsls	r1, r2
 800081a:	000a      	movs	r2, r1
 800081c:	43d2      	mvns	r2, r2
 800081e:	401a      	ands	r2, r3
 8000820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	22ff      	movs	r2, #255	; 0xff
 8000828:	401a      	ands	r2, r3
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0018      	movs	r0, r3
 8000830:	2303      	movs	r3, #3
 8000832:	4003      	ands	r3, r0
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <__NVIC_SetPriority+0xd8>)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	001c      	movs	r4, r3
 8000840:	230f      	movs	r3, #15
 8000842:	4023      	ands	r3, r4
 8000844:	3b08      	subs	r3, #8
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	430a      	orrs	r2, r1
 800084a:	3306      	adds	r3, #6
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	18c3      	adds	r3, r0, r3
 8000850:	3304      	adds	r3, #4
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b003      	add	sp, #12
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	045b      	lsls	r3, r3, #17
 8000874:	429a      	cmp	r2, r3
 8000876:	d301      	bcc.n	800087c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000878:	2301      	movs	r3, #1
 800087a:	e010      	b.n	800089e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SysTick_Config+0x44>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	3a01      	subs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	2103      	movs	r1, #3
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff ff7c 	bl	8000788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x44>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x44>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	210f      	movs	r1, #15
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	1c02      	adds	r2, r0, #0
 80008bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ff5d 	bl	8000788 <__NVIC_SetPriority>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ffbf 	bl	8000864 <SysTick_Config>
 80008e6:	0003      	movs	r3, r0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fe:	e155      	b.n	8000bac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d100      	bne.n	8000918 <HAL_GPIO_Init+0x28>
 8000916:	e146      	b.n	8000ba6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2203      	movs	r2, #3
 800091e:	4013      	ands	r3, r2
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2203      	movs	r2, #3
 800092a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800092c:	2b02      	cmp	r3, #2
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	409a      	lsls	r2, r3
 800093e:	0013      	movs	r3, r2
 8000940:	43da      	mvns	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	43da      	mvns	r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	2201      	movs	r2, #1
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2203      	movs	r2, #3
 8000998:	4013      	ands	r3, r2
 800099a:	2b03      	cmp	r3, #3
 800099c:	d017      	beq.n	80009ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	43da      	mvns	r2, r3
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d123      	bne.n	8000a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	08da      	lsrs	r2, r3, #3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3208      	adds	r2, #8
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	58d3      	ldr	r3, [r2, r3]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	2207      	movs	r2, #7
 80009ec:	4013      	ands	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2107      	movs	r1, #7
 8000a06:	400b      	ands	r3, r1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	6939      	ldr	r1, [r7, #16]
 8000a20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	401a      	ands	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	23c0      	movs	r3, #192	; 0xc0
 8000a5c:	029b      	lsls	r3, r3, #10
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d100      	bne.n	8000a64 <HAL_GPIO_Init+0x174>
 8000a62:	e0a0      	b.n	8000ba6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <HAL_GPIO_Init+0x2d4>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <HAL_GPIO_Init+0x2d4>)
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	619a      	str	r2, [r3, #24]
 8000a70:	4b54      	ldr	r3, [pc, #336]	; (8000bc4 <HAL_GPIO_Init+0x2d4>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	2201      	movs	r2, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a7c:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <HAL_GPIO_Init+0x2d8>)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	589b      	ldr	r3, [r3, r2]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	409a      	lsls	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d019      	beq.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0x1ea>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a46      	ldr	r2, [pc, #280]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d00d      	beq.n	8000ad6 <HAL_GPIO_Init+0x1e6>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a45      	ldr	r2, [pc, #276]	; (8000bd4 <HAL_GPIO_Init+0x2e4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x1e2>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <HAL_GPIO_Init+0x2e8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_GPIO_Init+0x1de>
 8000aca:	2304      	movs	r3, #4
 8000acc:	e008      	b.n	8000ae0 <HAL_GPIO_Init+0x1f0>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x1f0>
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e004      	b.n	8000ae0 <HAL_GPIO_Init+0x1f0>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_Init+0x1f0>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <HAL_GPIO_Init+0x1f0>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	4093      	lsls	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af0:	4935      	ldr	r1, [pc, #212]	; (8000bc8 <HAL_GPIO_Init+0x2d8>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43da      	mvns	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	035b      	lsls	r3, r3, #13
 8000b16:	4013      	ands	r3, r2
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43da      	mvns	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	039b      	lsls	r3, r3, #14
 8000b40:	4013      	ands	r3, r2
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	029b      	lsls	r3, r3, #10
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43da      	mvns	r2, r3
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	025b      	lsls	r3, r3, #9
 8000b94:	4013      	ands	r3, r2
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	40da      	lsrs	r2, r3
 8000bb4:	1e13      	subs	r3, r2, #0
 8000bb6:	d000      	beq.n	8000bba <HAL_GPIO_Init+0x2ca>
 8000bb8:	e6a2      	b.n	8000900 <HAL_GPIO_Init+0x10>
  } 
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48000800 	.word	0x48000800
 8000bd4:	48000c00 	.word	0x48000c00
 8000bd8:	48001000 	.word	0x48001000
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	0008      	movs	r0, r1
 8000bea:	0011      	movs	r1, r2
 8000bec:	1cbb      	adds	r3, r7, #2
 8000bee:	1c02      	adds	r2, r0, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	1c7b      	adds	r3, r7, #1
 8000bf4:	1c0a      	adds	r2, r1, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf8:	1c7b      	adds	r3, r7, #1
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0a:	1cbb      	adds	r3, r7, #2
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f000 fb76 	bl	800131c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2201      	movs	r2, #1
 8000c36:	4013      	ands	r3, r2
 8000c38:	d100      	bne.n	8000c3c <HAL_RCC_OscConfig+0x20>
 8000c3a:	e08e      	b.n	8000d5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c3c:	4bc5      	ldr	r3, [pc, #788]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	220c      	movs	r2, #12
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d00e      	beq.n	8000c66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c48:	4bc2      	ldr	r3, [pc, #776]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	4013      	ands	r3, r2
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d117      	bne.n	8000c84 <HAL_RCC_OscConfig+0x68>
 8000c54:	4bbf      	ldr	r3, [pc, #764]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	23c0      	movs	r3, #192	; 0xc0
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	025b      	lsls	r3, r3, #9
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d10e      	bne.n	8000c84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c66:	4bbb      	ldr	r3, [pc, #748]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	029b      	lsls	r3, r3, #10
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d100      	bne.n	8000c74 <HAL_RCC_OscConfig+0x58>
 8000c72:	e071      	b.n	8000d58 <HAL_RCC_OscConfig+0x13c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d000      	beq.n	8000c7e <HAL_RCC_OscConfig+0x62>
 8000c7c:	e06c      	b.n	8000d58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f000 fb4c 	bl	800131c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d107      	bne.n	8000c9c <HAL_RCC_OscConfig+0x80>
 8000c8c:	4bb1      	ldr	r3, [pc, #708]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4bb0      	ldr	r3, [pc, #704]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	0249      	lsls	r1, r1, #9
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e02f      	b.n	8000cfc <HAL_RCC_OscConfig+0xe0>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10c      	bne.n	8000cbe <HAL_RCC_OscConfig+0xa2>
 8000ca4:	4bab      	ldr	r3, [pc, #684]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4baa      	ldr	r3, [pc, #680]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000caa:	49ab      	ldr	r1, [pc, #684]	; (8000f58 <HAL_RCC_OscConfig+0x33c>)
 8000cac:	400a      	ands	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	4ba8      	ldr	r3, [pc, #672]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4ba7      	ldr	r3, [pc, #668]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cb6:	49a9      	ldr	r1, [pc, #676]	; (8000f5c <HAL_RCC_OscConfig+0x340>)
 8000cb8:	400a      	ands	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e01e      	b.n	8000cfc <HAL_RCC_OscConfig+0xe0>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d10e      	bne.n	8000ce4 <HAL_RCC_OscConfig+0xc8>
 8000cc6:	4ba3      	ldr	r3, [pc, #652]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4ba2      	ldr	r3, [pc, #648]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	02c9      	lsls	r1, r1, #11
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	4b9f      	ldr	r3, [pc, #636]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b9e      	ldr	r3, [pc, #632]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cda:	2180      	movs	r1, #128	; 0x80
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e00b      	b.n	8000cfc <HAL_RCC_OscConfig+0xe0>
 8000ce4:	4b9b      	ldr	r3, [pc, #620]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b9a      	ldr	r3, [pc, #616]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cea:	499b      	ldr	r1, [pc, #620]	; (8000f58 <HAL_RCC_OscConfig+0x33c>)
 8000cec:	400a      	ands	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	4b98      	ldr	r3, [pc, #608]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b97      	ldr	r3, [pc, #604]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000cf6:	4999      	ldr	r1, [pc, #612]	; (8000f5c <HAL_RCC_OscConfig+0x340>)
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d014      	beq.n	8000d2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fd36 	bl	8000774 <HAL_GetTick>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0e:	f7ff fd31 	bl	8000774 <HAL_GetTick>
 8000d12:	0002      	movs	r2, r0
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b64      	cmp	r3, #100	; 0x64
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e2fd      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d20:	4b8c      	ldr	r3, [pc, #560]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d0f0      	beq.n	8000d0e <HAL_RCC_OscConfig+0xf2>
 8000d2c:	e015      	b.n	8000d5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fd21 	bl	8000774 <HAL_GetTick>
 8000d32:	0003      	movs	r3, r0
 8000d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fd1c 	bl	8000774 <HAL_GetTick>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e2e8      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	4b82      	ldr	r3, [pc, #520]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	029b      	lsls	r3, r3, #10
 8000d52:	4013      	ands	r3, r2
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x11c>
 8000d56:	e000      	b.n	8000d5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2202      	movs	r2, #2
 8000d60:	4013      	ands	r3, r2
 8000d62:	d100      	bne.n	8000d66 <HAL_RCC_OscConfig+0x14a>
 8000d64:	e06c      	b.n	8000e40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d00e      	beq.n	8000d8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d70:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	220c      	movs	r2, #12
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d11f      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1a0>
 8000d7c:	4b75      	ldr	r3, [pc, #468]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	025b      	lsls	r3, r3, #9
 8000d84:	401a      	ands	r2, r3
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d116      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	4b71      	ldr	r3, [pc, #452]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2202      	movs	r2, #2
 8000d94:	4013      	ands	r3, r2
 8000d96:	d005      	beq.n	8000da4 <HAL_RCC_OscConfig+0x188>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d001      	beq.n	8000da4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e2bb      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	22f8      	movs	r2, #248	; 0xf8
 8000daa:	4393      	bics	r3, r2
 8000dac:	0019      	movs	r1, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	00da      	lsls	r2, r3, #3
 8000db4:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000db6:	430a      	orrs	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dba:	e041      	b.n	8000e40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d024      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc4:	4b63      	ldr	r3, [pc, #396]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcd0 	bl	8000774 <HAL_GetTick>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fccb 	bl	8000774 <HAL_GetTick>
 8000dde:	0002      	movs	r2, r0
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e297      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4b59      	ldr	r3, [pc, #356]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2202      	movs	r2, #2
 8000df2:	4013      	ands	r3, r2
 8000df4:	d0f1      	beq.n	8000dda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df6:	4b57      	ldr	r3, [pc, #348]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	22f8      	movs	r2, #248	; 0xf8
 8000dfc:	4393      	bics	r3, r2
 8000dfe:	0019      	movs	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	00da      	lsls	r2, r3, #3
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e018      	b.n	8000e40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	438a      	bics	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fcab 	bl	8000774 <HAL_GetTick>
 8000e1e:	0003      	movs	r3, r0
 8000e20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fca6 	bl	8000774 <HAL_GetTick>
 8000e28:	0002      	movs	r2, r0
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e272      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d1f1      	bne.n	8000e24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2208      	movs	r2, #8
 8000e46:	4013      	ands	r3, r2
 8000e48:	d036      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d019      	beq.n	8000e86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e52:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e56:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fc89 	bl	8000774 <HAL_GetTick>
 8000e62:	0003      	movs	r3, r0
 8000e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc84 	bl	8000774 <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e250      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	d0f1      	beq.n	8000e68 <HAL_RCC_OscConfig+0x24c>
 8000e84:	e018      	b.n	8000eb8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	438a      	bics	r2, r1
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fc6f 	bl	8000774 <HAL_GetTick>
 8000e96:	0003      	movs	r3, r0
 8000e98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc6a 	bl	8000774 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e236      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eae:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d1f1      	bne.n	8000e9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x2a8>
 8000ec2:	e0b5      	b.n	8001030 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec4:	201f      	movs	r0, #31
 8000ec6:	183b      	adds	r3, r7, r0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ece:	69da      	ldr	r2, [r3, #28]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	055b      	lsls	r3, r3, #21
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d110      	bne.n	8000efa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000eda:	69da      	ldr	r2, [r3, #28]
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	0549      	lsls	r1, r1, #21
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	61da      	str	r2, [r3, #28]
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_RCC_OscConfig+0x344>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	d11a      	bne.n	8000f3c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_RCC_OscConfig+0x344>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_RCC_OscConfig+0x344>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0049      	lsls	r1, r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fc2e 	bl	8000774 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fc29 	bl	8000774 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e1f5      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_RCC_OscConfig+0x344>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10f      	bne.n	8000f64 <HAL_RCC_OscConfig+0x348>
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000f46:	6a1a      	ldr	r2, [r3, #32]
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	621a      	str	r2, [r3, #32]
 8000f50:	e036      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3a4>
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40021000 	.word	0x40021000
 8000f58:	fffeffff 	.word	0xfffeffff
 8000f5c:	fffbffff 	.word	0xfffbffff
 8000f60:	40007000 	.word	0x40007000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x36a>
 8000f6c:	4bca      	ldr	r3, [pc, #808]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f6e:	6a1a      	ldr	r2, [r3, #32]
 8000f70:	4bc9      	ldr	r3, [pc, #804]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f72:	2101      	movs	r1, #1
 8000f74:	438a      	bics	r2, r1
 8000f76:	621a      	str	r2, [r3, #32]
 8000f78:	4bc7      	ldr	r3, [pc, #796]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	4bc6      	ldr	r3, [pc, #792]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f7e:	2104      	movs	r1, #4
 8000f80:	438a      	bics	r2, r1
 8000f82:	621a      	str	r2, [r3, #32]
 8000f84:	e01c      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3a4>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b05      	cmp	r3, #5
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x38c>
 8000f8e:	4bc2      	ldr	r3, [pc, #776]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f90:	6a1a      	ldr	r2, [r3, #32]
 8000f92:	4bc1      	ldr	r3, [pc, #772]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f94:	2104      	movs	r1, #4
 8000f96:	430a      	orrs	r2, r1
 8000f98:	621a      	str	r2, [r3, #32]
 8000f9a:	4bbf      	ldr	r3, [pc, #764]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000f9c:	6a1a      	ldr	r2, [r3, #32]
 8000f9e:	4bbe      	ldr	r3, [pc, #760]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	621a      	str	r2, [r3, #32]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3a4>
 8000fa8:	4bbb      	ldr	r3, [pc, #748]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000faa:	6a1a      	ldr	r2, [r3, #32]
 8000fac:	4bba      	ldr	r3, [pc, #744]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	438a      	bics	r2, r1
 8000fb2:	621a      	str	r2, [r3, #32]
 8000fb4:	4bb8      	ldr	r3, [pc, #736]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000fb6:	6a1a      	ldr	r2, [r3, #32]
 8000fb8:	4bb7      	ldr	r3, [pc, #732]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000fba:	2104      	movs	r1, #4
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d014      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fbd4 	bl	8000774 <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	e009      	b.n	8000fe6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fbcf 	bl	8000774 <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4aaf      	ldr	r2, [pc, #700]	; (800129c <HAL_RCC_OscConfig+0x680>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e19a      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe6:	4bac      	ldr	r3, [pc, #688]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x3b6>
 8000ff0:	e013      	b.n	800101a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fbbf 	bl	8000774 <HAL_GetTick>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffa:	e009      	b.n	8001010 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fbba 	bl	8000774 <HAL_GetTick>
 8001000:	0002      	movs	r2, r0
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4aa5      	ldr	r2, [pc, #660]	; (800129c <HAL_RCC_OscConfig+0x680>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e185      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001010:	4ba1      	ldr	r3, [pc, #644]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800101a:	231f      	movs	r3, #31
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001024:	4b9c      	ldr	r3, [pc, #624]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	4b9b      	ldr	r3, [pc, #620]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800102a:	499d      	ldr	r1, [pc, #628]	; (80012a0 <HAL_RCC_OscConfig+0x684>)
 800102c:	400a      	ands	r2, r1
 800102e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2210      	movs	r2, #16
 8001036:	4013      	ands	r3, r2
 8001038:	d063      	beq.n	8001102 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12a      	bne.n	8001098 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001042:	4b95      	ldr	r3, [pc, #596]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001046:	4b94      	ldr	r3, [pc, #592]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001048:	2104      	movs	r1, #4
 800104a:	430a      	orrs	r2, r1
 800104c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800104e:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001052:	4b91      	ldr	r3, [pc, #580]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fb8b 	bl	8000774 <HAL_GetTick>
 800105e:	0003      	movs	r3, r0
 8001060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001064:	f7ff fb86 	bl	8000774 <HAL_GetTick>
 8001068:	0002      	movs	r2, r0
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e152      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001076:	4b88      	ldr	r3, [pc, #544]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d0f1      	beq.n	8001064 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001080:	4b85      	ldr	r3, [pc, #532]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001084:	22f8      	movs	r2, #248	; 0xf8
 8001086:	4393      	bics	r3, r2
 8001088:	0019      	movs	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	00da      	lsls	r2, r3, #3
 8001090:	4b81      	ldr	r3, [pc, #516]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001092:	430a      	orrs	r2, r1
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
 8001096:	e034      	b.n	8001102 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	3305      	adds	r3, #5
 800109e:	d111      	bne.n	80010c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010a0:	4b7d      	ldr	r3, [pc, #500]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010a6:	2104      	movs	r1, #4
 80010a8:	438a      	bics	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010ac:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b0:	22f8      	movs	r2, #248	; 0xf8
 80010b2:	4393      	bics	r3, r2
 80010b4:	0019      	movs	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	00da      	lsls	r2, r3, #3
 80010bc:	4b76      	ldr	r3, [pc, #472]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010be:	430a      	orrs	r2, r1
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
 80010c2:	e01e      	b.n	8001102 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c4:	4b74      	ldr	r3, [pc, #464]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010ca:	2104      	movs	r1, #4
 80010cc:	430a      	orrs	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010d0:	4b71      	ldr	r3, [pc, #452]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d4:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	438a      	bics	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fb4a 	bl	8000774 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e6:	f7ff fb45 	bl	8000774 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e111      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010f8:	4b67      	ldr	r3, [pc, #412]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d1f1      	bne.n	80010e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2220      	movs	r2, #32
 8001108:	4013      	ands	r3, r2
 800110a:	d05c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800110c:	4b62      	ldr	r3, [pc, #392]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	220c      	movs	r2, #12
 8001112:	4013      	ands	r3, r2
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d00e      	beq.n	8001136 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001118:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	220c      	movs	r2, #12
 800111e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001120:	2b08      	cmp	r3, #8
 8001122:	d114      	bne.n	800114e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	401a      	ands	r2, r3
 800112e:	23c0      	movs	r3, #192	; 0xc0
 8001130:	025b      	lsls	r3, r3, #9
 8001132:	429a      	cmp	r2, r3
 8001134:	d10b      	bne.n	800114e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001136:	4b58      	ldr	r3, [pc, #352]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d040      	beq.n	80011c4 <HAL_RCC_OscConfig+0x5a8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d03c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0e6      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01b      	beq.n	800118e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0249      	lsls	r1, r1, #9
 8001160:	430a      	orrs	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fb06 	bl	8000774 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800116e:	f7ff fb01 	bl	8000774 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0cd      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x552>
 800118c:	e01b      	b.n	80011c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001194:	4943      	ldr	r1, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x688>)
 8001196:	400a      	ands	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff faeb 	bl	8000774 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011a4:	f7ff fae6 	bl	8000774 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0b2      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x588>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d100      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5b4>
 80011ce:	e0a4      	b.n	800131a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	220c      	movs	r2, #12
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x5c2>
 80011dc:	e078      	b.n	80012d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d14c      	bne.n	8001280 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 80011ec:	492e      	ldr	r1, [pc, #184]	; (80012a8 <HAL_RCC_OscConfig+0x68c>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fabf 	bl	8000774 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff faba 	bl	8000774 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e086      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	049b      	lsls	r3, r3, #18
 8001216:	4013      	ands	r3, r2
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	220f      	movs	r2, #15
 8001220:	4393      	bics	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800122a:	430a      	orrs	r2, r1
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_RCC_OscConfig+0x690>)
 8001234:	4013      	ands	r3, r2
 8001236:	0019      	movs	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	431a      	orrs	r2, r3
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0449      	lsls	r1, r1, #17
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fa8d 	bl	8000774 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fa88 	bl	8000774 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e054      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	049b      	lsls	r3, r3, #18
 800127a:	4013      	ands	r3, r2
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x644>
 800127e:	e04c      	b.n	800131a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x68c>)
 8001288:	400a      	ands	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fa72 	bl	8000774 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x6a6>
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	40021000 	.word	0x40021000
 800129c:	00001388 	.word	0x00001388
 80012a0:	efffffff 	.word	0xefffffff
 80012a4:	fffeffff 	.word	0xfffeffff
 80012a8:	feffffff 	.word	0xfeffffff
 80012ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fa60 	bl	8000774 <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e02c      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_RCC_OscConfig+0x708>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	049b      	lsls	r3, r3, #18
 80012ca:	4013      	ands	r3, r2
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x694>
 80012ce:	e024      	b.n	800131a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e01f      	b.n	800131c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_RCC_OscConfig+0x708>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_RCC_OscConfig+0x708>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	23c0      	movs	r3, #192	; 0xc0
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	401a      	ands	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10e      	bne.n	8001316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	220f      	movs	r2, #15
 80012fc:	401a      	ands	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	429a      	cmp	r2, r3
 8001304:	d107      	bne.n	8001316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	23f0      	movs	r3, #240	; 0xf0
 800130a:	039b      	lsls	r3, r3, #14
 800130c:	401a      	ands	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b008      	add	sp, #32
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0bf      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b61      	ldr	r3, [pc, #388]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	4013      	ands	r3, r2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d911      	bls.n	800136e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b5e      	ldr	r3, [pc, #376]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	4393      	bics	r3, r2
 8001352:	0019      	movs	r1, r3
 8001354:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135c:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0a6      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d015      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2204      	movs	r2, #4
 800137e:	4013      	ands	r3, r2
 8001380:	d006      	beq.n	8001390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001388:	21e0      	movs	r1, #224	; 0xe0
 800138a:	00c9      	lsls	r1, r1, #3
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	22f0      	movs	r2, #240	; 0xf0
 8001396:	4393      	bics	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	d04c      	beq.n	8001448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d120      	bne.n	8001404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07a      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	049b      	lsls	r3, r3, #18
 80013d6:	4013      	ands	r3, r2
 80013d8:	d114      	bne.n	8001404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e06e      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d108      	bne.n	8001404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e062      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e05b      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff f9ac 	bl	8000774 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001420:	e009      	b.n	8001436 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001422:	f7ff f9a7 	bl	8000774 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_RCC_ClockConfig+0x1a4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e042      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	220c      	movs	r2, #12
 800143c:	401a      	ands	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d1ec      	bne.n	8001422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	4013      	ands	r3, r2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d211      	bcs.n	800147a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2201      	movs	r2, #1
 800145c:	4393      	bics	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_RCC_ClockConfig+0x19c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	4013      	ands	r3, r2
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e020      	b.n	80014bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2204      	movs	r2, #4
 8001480:	4013      	ands	r3, r2
 8001482:	d009      	beq.n	8001498 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_RCC_ClockConfig+0x1a8>)
 800148a:	4013      	ands	r3, r2
 800148c:	0019      	movs	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001498:	f000 f820 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 800149c:	0001      	movs	r1, r0
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_RCC_ClockConfig+0x1a0>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	220f      	movs	r2, #15
 80014a6:	4013      	ands	r3, r2
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_RCC_ClockConfig+0x1ac>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	000a      	movs	r2, r1
 80014ae:	40da      	lsrs	r2, r3
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_ClockConfig+0x1b0>)
 80014b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f7ff f917 	bl	80006e8 <HAL_InitTick>
  
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40022000 	.word	0x40022000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	00001388 	.word	0x00001388
 80014d0:	fffff8ff 	.word	0xfffff8ff
 80014d4:	08001d7c 	.word	0x08001d7c
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	220c      	movs	r2, #12
 8001500:	4013      	ands	r3, r2
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d046      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0xb8>
 8001506:	d848      	bhi.n	800159a <HAL_RCC_GetSysClockFreq+0xbe>
 8001508:	2b04      	cmp	r3, #4
 800150a:	d002      	beq.n	8001512 <HAL_RCC_GetSysClockFreq+0x36>
 800150c:	2b08      	cmp	r3, #8
 800150e:	d003      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x3c>
 8001510:	e043      	b.n	800159a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001514:	613b      	str	r3, [r7, #16]
      break;
 8001516:	e043      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	220f      	movs	r2, #15
 800151e:	4013      	ands	r3, r2
 8001520:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	220f      	movs	r2, #15
 800152c:	4013      	ands	r3, r2
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	401a      	ands	r2, r3
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	429a      	cmp	r2, r3
 8001542:	d109      	bne.n	8001558 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	481a      	ldr	r0, [pc, #104]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001548:	f7fe fddc 	bl	8000104 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	001a      	movs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4353      	muls	r3, r2
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e01a      	b.n	800158e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	23c0      	movs	r3, #192	; 0xc0
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	401a      	ands	r2, r3
 8001560:	23c0      	movs	r3, #192	; 0xc0
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	429a      	cmp	r2, r3
 8001566:	d109      	bne.n	800157c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <HAL_RCC_GetSysClockFreq+0xe0>)
 800156c:	f7fe fdca 	bl	8000104 <__udivsi3>
 8001570:	0003      	movs	r3, r0
 8001572:	001a      	movs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4353      	muls	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e008      	b.n	800158e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001580:	f7fe fdc0 	bl	8000104 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	001a      	movs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4353      	muls	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	613b      	str	r3, [r7, #16]
      break;
 8001592:	e005      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	e002      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800159c:	613b      	str	r3, [r7, #16]
      break;
 800159e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a0:	693b      	ldr	r3, [r7, #16]
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b006      	add	sp, #24
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40021000 	.word	0x40021000
 80015b0:	007a1200 	.word	0x007a1200
 80015b4:	08001d8c 	.word	0x08001d8c
 80015b8:	08001d9c 	.word	0x08001d9c
 80015bc:	02dc6c00 	.word	0x02dc6c00

080015c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0a8      	b.n	8001724 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	2382      	movs	r3, #130	; 0x82
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d009      	beq.n	80015fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
 80015ec:	e005      	b.n	80015fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	225d      	movs	r2, #93	; 0x5d
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d107      	bne.n	800161c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	225c      	movs	r2, #92	; 0x5c
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe ff7c 	bl	8000514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	225d      	movs	r2, #93	; 0x5d
 8001620:	2102      	movs	r1, #2
 8001622:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	23e0      	movs	r3, #224	; 0xe0
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	429a      	cmp	r2, r3
 800163e:	d902      	bls.n	8001646 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e002      	b.n	800164c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	015b      	lsls	r3, r3, #5
 800164a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	23f0      	movs	r3, #240	; 0xf0
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	429a      	cmp	r2, r3
 8001656:	d008      	beq.n	800166a <HAL_SPI_Init+0xaa>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	23e0      	movs	r3, #224	; 0xe0
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	429a      	cmp	r2, r3
 8001662:	d002      	beq.n	800166a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	2382      	movs	r3, #130	; 0x82
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	2384      	movs	r3, #132	; 0x84
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	400b      	ands	r3, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	2102      	movs	r1, #2
 8001686:	400b      	ands	r3, r1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2101      	movs	r1, #1
 8001690:	400b      	ands	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6999      	ldr	r1, [r3, #24]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	400b      	ands	r3, r1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2138      	movs	r1, #56	; 0x38
 80016a6:	400b      	ands	r3, r1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	400b      	ands	r3, r1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	0011      	movs	r1, r2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	2204      	movs	r2, #4
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	2110      	movs	r1, #16
 80016d8:	400b      	ands	r3, r1
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	2108      	movs	r1, #8
 80016e2:	400b      	ands	r3, r1
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68d9      	ldr	r1, [r3, #12]
 80016ea:	23f0      	movs	r3, #240	; 0xf0
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	0011      	movs	r1, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	015b      	lsls	r3, r3, #5
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4907      	ldr	r1, [pc, #28]	; (800172c <HAL_SPI_Init+0x16c>)
 8001710:	400a      	ands	r2, r1
 8001712:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	225d      	movs	r2, #93	; 0x5d
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}
 800172c:	fffff7ff 	.word	0xfffff7ff

08001730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e042      	b.n	80017c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	223d      	movs	r2, #61	; 0x3d
 8001746:	5c9b      	ldrb	r3, [r3, r2]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d107      	bne.n	800175e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	223c      	movs	r2, #60	; 0x3c
 8001752:	2100      	movs	r1, #0
 8001754:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f7fe ff4f 	bl	80005fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	223d      	movs	r2, #61	; 0x3d
 8001762:	2102      	movs	r1, #2
 8001764:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	0019      	movs	r1, r3
 8001770:	0010      	movs	r0, r2
 8001772:	f000 f953 	bl	8001a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2246      	movs	r2, #70	; 0x46
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	223e      	movs	r2, #62	; 0x3e
 8001782:	2101      	movs	r1, #1
 8001784:	5499      	strb	r1, [r3, r2]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	2101      	movs	r1, #1
 800178c:	5499      	strb	r1, [r3, r2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	2101      	movs	r1, #1
 8001794:	5499      	strb	r1, [r3, r2]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2241      	movs	r2, #65	; 0x41
 800179a:	2101      	movs	r1, #1
 800179c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2242      	movs	r2, #66	; 0x42
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2243      	movs	r2, #67	; 0x43
 80017aa:	2101      	movs	r1, #1
 80017ac:	5499      	strb	r1, [r3, r2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2244      	movs	r2, #68	; 0x44
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2245      	movs	r2, #69	; 0x45
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	223d      	movs	r2, #61	; 0x3d
 80017c2:	2101      	movs	r1, #1
 80017c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	223d      	movs	r2, #61	; 0x3d
 80017dc:	5c9b      	ldrb	r3, [r3, r2]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d001      	beq.n	80017e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e03b      	b.n	8001860 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	223d      	movs	r2, #61	; 0x3d
 80017ec:	2102      	movs	r1, #2
 80017ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a18      	ldr	r2, [pc, #96]	; (8001868 <HAL_TIM_Base_Start_IT+0x98>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00f      	beq.n	800182a <HAL_TIM_Base_Start_IT+0x5a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	429a      	cmp	r2, r3
 8001814:	d009      	beq.n	800182a <HAL_TIM_Base_Start_IT+0x5a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_TIM_Base_Start_IT+0x9c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_TIM_Base_Start_IT+0x5a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_TIM_Base_Start_IT+0xa0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d111      	bne.n	800184e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2207      	movs	r2, #7
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b06      	cmp	r3, #6
 800183a:	d010      	beq.n	800185e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184c:	e007      	b.n	800185e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b004      	add	sp, #16
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40000400 	.word	0x40000400
 8001870:	40014000 	.word	0x40014000

08001874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	230f      	movs	r3, #15
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223c      	movs	r2, #60	; 0x3c
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_TIM_ConfigClockSource+0x20>
 8001890:	2302      	movs	r3, #2
 8001892:	e0bc      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0x19a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	223c      	movs	r2, #60	; 0x3c
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	223d      	movs	r2, #61	; 0x3d
 80018a0:	2102      	movs	r1, #2
 80018a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2277      	movs	r2, #119	; 0x77
 80018b0:	4393      	bics	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_TIM_ConfigClockSource+0x1a4>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0192      	lsls	r2, r2, #6
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d040      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0xde>
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	0192      	lsls	r2, r2, #6
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d900      	bls.n	80018da <HAL_TIM_ConfigClockSource+0x66>
 80018d8:	e088      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	0152      	lsls	r2, r2, #5
 80018de:	4293      	cmp	r3, r2
 80018e0:	d100      	bne.n	80018e4 <HAL_TIM_ConfigClockSource+0x70>
 80018e2:	e088      	b.n	80019f6 <HAL_TIM_ConfigClockSource+0x182>
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	0152      	lsls	r2, r2, #5
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d900      	bls.n	80018ee <HAL_TIM_ConfigClockSource+0x7a>
 80018ec:	e07e      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 80018ee:	2b70      	cmp	r3, #112	; 0x70
 80018f0:	d018      	beq.n	8001924 <HAL_TIM_ConfigClockSource+0xb0>
 80018f2:	d900      	bls.n	80018f6 <HAL_TIM_ConfigClockSource+0x82>
 80018f4:	e07a      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 80018f6:	2b60      	cmp	r3, #96	; 0x60
 80018f8:	d04f      	beq.n	800199a <HAL_TIM_ConfigClockSource+0x126>
 80018fa:	d900      	bls.n	80018fe <HAL_TIM_ConfigClockSource+0x8a>
 80018fc:	e076      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 80018fe:	2b50      	cmp	r3, #80	; 0x50
 8001900:	d03b      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x106>
 8001902:	d900      	bls.n	8001906 <HAL_TIM_ConfigClockSource+0x92>
 8001904:	e072      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d057      	beq.n	80019ba <HAL_TIM_ConfigClockSource+0x146>
 800190a:	d900      	bls.n	800190e <HAL_TIM_ConfigClockSource+0x9a>
 800190c:	e06e      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 800190e:	2b30      	cmp	r3, #48	; 0x30
 8001910:	d063      	beq.n	80019da <HAL_TIM_ConfigClockSource+0x166>
 8001912:	d86b      	bhi.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 8001914:	2b20      	cmp	r3, #32
 8001916:	d060      	beq.n	80019da <HAL_TIM_ConfigClockSource+0x166>
 8001918:	d868      	bhi.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d05d      	beq.n	80019da <HAL_TIM_ConfigClockSource+0x166>
 800191e:	2b10      	cmp	r3, #16
 8001920:	d05b      	beq.n	80019da <HAL_TIM_ConfigClockSource+0x166>
 8001922:	e063      	b.n	80019ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001934:	f000 f96c 	bl	8001c10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2277      	movs	r2, #119	; 0x77
 8001944:	4313      	orrs	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	609a      	str	r2, [r3, #8]
      break;
 8001950:	e052      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001962:	f000 f955 	bl	8001c10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	01c9      	lsls	r1, r1, #7
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
      break;
 8001978:	e03e      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001986:	001a      	movs	r2, r3
 8001988:	f000 f8c8 	bl	8001b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2150      	movs	r1, #80	; 0x50
 8001992:	0018      	movs	r0, r3
 8001994:	f000 f922 	bl	8001bdc <TIM_ITRx_SetConfig>
      break;
 8001998:	e02e      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019a6:	001a      	movs	r2, r3
 80019a8:	f000 f8e6 	bl	8001b78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2160      	movs	r1, #96	; 0x60
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 f912 	bl	8001bdc <TIM_ITRx_SetConfig>
      break;
 80019b8:	e01e      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019c6:	001a      	movs	r2, r3
 80019c8:	f000 f8a8 	bl	8001b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f902 	bl	8001bdc <TIM_ITRx_SetConfig>
      break;
 80019d8:	e00e      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0019      	movs	r1, r3
 80019e4:	0010      	movs	r0, r2
 80019e6:	f000 f8f9 	bl	8001bdc <TIM_ITRx_SetConfig>
      break;
 80019ea:	e005      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
      break;
 80019f4:	e000      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80019f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	223d      	movs	r2, #61	; 0x3d
 80019fc:	2101      	movs	r1, #1
 80019fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	223c      	movs	r2, #60	; 0x3c
 8001a04:	2100      	movs	r1, #0
 8001a06:	5499      	strb	r1, [r3, r2]

  return status;
 8001a08:	230f      	movs	r3, #15
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	781b      	ldrb	r3, [r3, #0]
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	ffff00ff 	.word	0xffff00ff

08001a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <TIM_Base_SetConfig+0xe4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d008      	beq.n	8001a46 <TIM_Base_SetConfig+0x2a>
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d003      	beq.n	8001a46 <TIM_Base_SetConfig+0x2a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <TIM_Base_SetConfig+0xe8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d108      	bne.n	8001a58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2270      	movs	r2, #112	; 0x70
 8001a4a:	4393      	bics	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <TIM_Base_SetConfig+0xe4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d018      	beq.n	8001a92 <TIM_Base_SetConfig+0x76>
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d013      	beq.n	8001a92 <TIM_Base_SetConfig+0x76>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <TIM_Base_SetConfig+0xe8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00f      	beq.n	8001a92 <TIM_Base_SetConfig+0x76>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <TIM_Base_SetConfig+0xec>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <TIM_Base_SetConfig+0x76>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <TIM_Base_SetConfig+0xf0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <TIM_Base_SetConfig+0x76>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <TIM_Base_SetConfig+0xf4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <TIM_Base_SetConfig+0x76>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <TIM_Base_SetConfig+0xf8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d108      	bne.n	8001aa4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <TIM_Base_SetConfig+0xfc>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	001a      	movs	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <TIM_Base_SetConfig+0xe4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00b      	beq.n	8001aea <TIM_Base_SetConfig+0xce>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <TIM_Base_SetConfig+0xf0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <TIM_Base_SetConfig+0xce>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <TIM_Base_SetConfig+0xf4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d003      	beq.n	8001aea <TIM_Base_SetConfig+0xce>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <TIM_Base_SetConfig+0xf8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d103      	bne.n	8001af2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	615a      	str	r2, [r3, #20]
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40002000 	.word	0x40002000
 8001b0c:	40014000 	.word	0x40014000
 8001b10:	40014400 	.word	0x40014400
 8001b14:	40014800 	.word	0x40014800
 8001b18:	fffffcff 	.word	0xfffffcff

08001b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4393      	bics	r3, r2
 8001b36:	001a      	movs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	22f0      	movs	r2, #240	; 0xf0
 8001b46:	4393      	bics	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	220a      	movs	r2, #10
 8001b58:	4393      	bics	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	621a      	str	r2, [r3, #32]
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b006      	add	sp, #24
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	2210      	movs	r2, #16
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <TIM_TI2_ConfigInputStage+0x60>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	031b      	lsls	r3, r3, #12
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	22a0      	movs	r2, #160	; 0xa0
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	621a      	str	r2, [r3, #32]
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	ffff0fff 	.word	0xffff0fff

08001bdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2270      	movs	r2, #112	; 0x70
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	609a      	str	r2, [r3, #8]
}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b004      	add	sp, #16
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <TIM_ETR_SetConfig+0x3c>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	021a      	lsls	r2, r3, #8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	609a      	str	r2, [r3, #8]
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	ffff00ff 	.word	0xffff00ff

08001c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	223c      	movs	r2, #60	; 0x3c
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e047      	b.n	8001cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	223c      	movs	r2, #60	; 0x3c
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	223d      	movs	r2, #61	; 0x3d
 8001c74:	2102      	movs	r1, #2
 8001c76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2270      	movs	r2, #112	; 0x70
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00f      	beq.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	05db      	lsls	r3, r3, #23
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10c      	bne.n	8001ce6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223c      	movs	r2, #60	; 0x3c
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b004      	add	sp, #16
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40014000 	.word	0x40014000

08001d0c <memset>:
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	1882      	adds	r2, r0, r2
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d100      	bne.n	8001d16 <memset+0xa>
 8001d14:	4770      	bx	lr
 8001d16:	7019      	strb	r1, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	e7f9      	b.n	8001d10 <memset+0x4>

08001d1c <__libc_init_array>:
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	2600      	movs	r6, #0
 8001d20:	4c0c      	ldr	r4, [pc, #48]	; (8001d54 <__libc_init_array+0x38>)
 8001d22:	4d0d      	ldr	r5, [pc, #52]	; (8001d58 <__libc_init_array+0x3c>)
 8001d24:	1b64      	subs	r4, r4, r5
 8001d26:	10a4      	asrs	r4, r4, #2
 8001d28:	42a6      	cmp	r6, r4
 8001d2a:	d109      	bne.n	8001d40 <__libc_init_array+0x24>
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	f000 f819 	bl	8001d64 <_init>
 8001d32:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <__libc_init_array+0x40>)
 8001d34:	4d0a      	ldr	r5, [pc, #40]	; (8001d60 <__libc_init_array+0x44>)
 8001d36:	1b64      	subs	r4, r4, r5
 8001d38:	10a4      	asrs	r4, r4, #2
 8001d3a:	42a6      	cmp	r6, r4
 8001d3c:	d105      	bne.n	8001d4a <__libc_init_array+0x2e>
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
 8001d40:	00b3      	lsls	r3, r6, #2
 8001d42:	58eb      	ldr	r3, [r5, r3]
 8001d44:	4798      	blx	r3
 8001d46:	3601      	adds	r6, #1
 8001d48:	e7ee      	b.n	8001d28 <__libc_init_array+0xc>
 8001d4a:	00b3      	lsls	r3, r6, #2
 8001d4c:	58eb      	ldr	r3, [r5, r3]
 8001d4e:	4798      	blx	r3
 8001d50:	3601      	adds	r6, #1
 8001d52:	e7f2      	b.n	8001d3a <__libc_init_array+0x1e>
 8001d54:	08001dac 	.word	0x08001dac
 8001d58:	08001dac 	.word	0x08001dac
 8001d5c:	08001db0 	.word	0x08001db0
 8001d60:	08001dac 	.word	0x08001dac

08001d64 <_init>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr

08001d70 <_fini>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d76:	bc08      	pop	{r3}
 8001d78:	469e      	mov	lr, r3
 8001d7a:	4770      	bx	lr
