
7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d2c  08004d2c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d2c  08004d2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000005c  08004d90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004d90  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8b2  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002209  00000000  00000000  0002f979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00031b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6a  00000000  00000000  00032a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3e9  00000000  00000000  0003356a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a9f  00000000  00000000  0004e953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a91c3  00000000  00000000  000603f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003910  00000000  00000000  001095b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004c9c 	.word	0x08004c9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004c9c 	.word	0x08004c9c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  HAL_Init();
 8000234:	f000 fba4 	bl	8000980 <HAL_Init>
  SystemClock_Config();
 8000238:	f000 f824 	bl	8000284 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f938 	bl	80004b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f906 	bl	8000450 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000244:	f000 f8b0 	bl	80003a8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000248:	f000 f870 	bl	800032c <MX_SPI1_Init>

  HAL_TIM_Base_Start_IT(&htim2);	//start timer 2
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x44>)
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fc4e 	bl	8002af0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, latchPin, GPIO_PIN_SET);	//set initial state of latch pin as high
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	015b      	lsls	r3, r3, #5
 8000258:	b29b      	uxth	r3, r3
 800025a:	4807      	ldr	r0, [pc, #28]	; (8000278 <main+0x48>)
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f000 fec6 	bl	8000ff0 <HAL_GPIO_WritePin>
  segmentSelect = 0x00;
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
  displaySelect = 0x01;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <main+0x50>)
 800026c:	2201      	movs	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
  while (1)
 8000270:	e7fe      	b.n	8000270 <main+0x40>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	200000dc 	.word	0x200000dc
 8000278:	48000400 	.word	0x48000400
 800027c:	200001ac 	.word	0x200001ac
 8000280:	200001ad 	.word	0x200001ad

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b099      	sub	sp, #100	; 0x64
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	242c      	movs	r4, #44	; 0x2c
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2334      	movs	r3, #52	; 0x34
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f004 f87b 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	231c      	movs	r3, #28
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f004 f873 	bl	8004390 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	231c      	movs	r3, #28
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f004 f86c 	bl	8004390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2220      	movs	r2, #32
 80002bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2201      	movs	r2, #1
 80002c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fead 	bl	800102c <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002d6:	f000 f9a9 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	211c      	movs	r1, #28
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2203      	movs	r2, #3
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2101      	movs	r1, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fa1d 	bl	8001738 <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000302:	f000 f993 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000306:	003b      	movs	r3, r7
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fb7b 	bl	8001a10 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800031e:	f000 f985 	bl	800062c <Error_Handler>
  }
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b019      	add	sp, #100	; 0x64
 8000328:	bd90      	pop	{r4, r7, pc}
	...

0800032c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_SPI1_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000338:	2282      	movs	r2, #130	; 0x82
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000346:	22e0      	movs	r2, #224	; 0xe0
 8000348:	00d2      	lsls	r2, r2, #3
 800034a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_SPI1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_SPI1_Init+0x74>)
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000362:	2220      	movs	r2, #32
 8000364:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_SPI1_Init+0x74>)
 800037a:	2207      	movs	r2, #7
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_SPI1_Init+0x74>)
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fc3f 	bl	8001c10 <HAL_SPI_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000396:	f000 f949 	bl	800062c <Error_Handler>
  }

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000078 	.word	0x20000078
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	2308      	movs	r3, #8
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	0018      	movs	r0, r3
 80003b4:	2310      	movs	r3, #16
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f003 ffe9 	bl	8004390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003be:	003b      	movs	r3, r7
 80003c0:	0018      	movs	r0, r3
 80003c2:	2308      	movs	r3, #8
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f003 ffe2 	bl	8004390 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003cc:	4b1f      	ldr	r3, [pc, #124]	; (800044c <MX_TIM2_Init+0xa4>)
 80003ce:	2280      	movs	r2, #128	; 0x80
 80003d0:	05d2      	lsls	r2, r2, #23
 80003d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80003d4:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_TIM2_Init+0xa4>)
 80003d6:	22fa      	movs	r2, #250	; 0xfa
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_TIM2_Init+0xa4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_TIM2_Init+0xa4>)
 80003e4:	2296      	movs	r2, #150	; 0x96
 80003e6:	0152      	lsls	r2, r2, #5
 80003e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_TIM2_Init+0xa4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f0:	4b16      	ldr	r3, [pc, #88]	; (800044c <MX_TIM2_Init+0xa4>)
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_TIM2_Init+0xa4>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 fb29 	bl	8002a50 <HAL_TIM_Base_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000402:	f000 f913 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000406:	2108      	movs	r1, #8
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	0152      	lsls	r2, r2, #5
 800040e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000410:	187a      	adds	r2, r7, r1
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_TIM2_Init+0xa4>)
 8000414:	0011      	movs	r1, r2
 8000416:	0018      	movs	r0, r3
 8000418:	f002 fcd2 	bl	8002dc0 <HAL_TIM_ConfigClockSource>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000420:	f000 f904 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000430:	003a      	movs	r2, r7
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_TIM2_Init+0xa4>)
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fed0 	bl	80031dc <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000440:	f000 f8f4 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b006      	add	sp, #24
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000dc 	.word	0x200000dc

08000450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <MX_USART2_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800045c:	22e1      	movs	r2, #225	; 0xe1
 800045e:	0252      	lsls	r2, r2, #9
 8000460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000494:	0018      	movs	r0, r3
 8000496:	f002 ff0f 	bl	80032b8 <HAL_UART_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f8c5 	bl	800062c <Error_Handler>
  }
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000124 	.word	0x20000124
 80004ac:	40004400 	.word	0x40004400

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	240c      	movs	r4, #12
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f003 ff65 	bl	8004390 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	03c9      	lsls	r1, r1, #15
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	03db      	lsls	r3, r3, #15
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0289      	lsls	r1, r1, #10
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	029b      	lsls	r3, r3, #10
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_GPIO_Init+0xa4>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_GPIO_Init+0xa4>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	02c9      	lsls	r1, r1, #11
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_GPIO_Init+0xa4>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	02db      	lsls	r3, r3, #11
 8000514:	4013      	ands	r3, r2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_GPIO_Init+0xa8>)
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fd65 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2240      	movs	r2, #64	; 0x40
 800052c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2201      	movs	r2, #1
 8000532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	187b      	adds	r3, r7, r1
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <MX_GPIO_Init+0xa8>)
 8000544:	0019      	movs	r1, r3
 8000546:	0010      	movs	r0, r2
 8000548:	f000 fbda 	bl	8000d00 <HAL_GPIO_Init>

}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b009      	add	sp, #36	; 0x24
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	48000400 	.word	0x48000400

0800055c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	  // Say something
	  uart_buf_len = sprintf(uart_buf, "SPI Test\r\n");
 8000564:	4a28      	ldr	r2, [pc, #160]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f003 fef0 	bl	8004350 <siprintf>
 8000570:	0002      	movs	r2, r0
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000574:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	b29a      	uxth	r2, r3
 800057c:	4923      	ldr	r1, [pc, #140]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800057e:	4825      	ldr	r0, [pc, #148]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	f002 feed 	bl	8003360 <HAL_UART_Transmit>

	  // write segment select
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000588:	2200      	movs	r2, #0
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fd2f 	bl	8000ff0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&segmentSelect, 1, 100);
 8000592:	4922      	ldr	r1, [pc, #136]	; (800061c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000594:	4822      	ldr	r0, [pc, #136]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	2201      	movs	r2, #1
 800059a:	f001 fbf1 	bl	8001d80 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 800059e:	4921      	ldr	r1, [pc, #132]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	2201      	movs	r2, #1
 80005a6:	f001 fd4b 	bl	8002040 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fd1d 	bl	8000ff0 <HAL_GPIO_WritePin>
	  // write display select
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fd17 	bl	8000ff0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&displaySelect, 1, 100);
 80005c2:	4919      	ldr	r1, [pc, #100]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005c4:	4816      	ldr	r0, [pc, #88]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	f001 fbd9 	bl	8001d80 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80005ce:	4915      	ldr	r1, [pc, #84]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	f001 fd33 	bl	8002040 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fd05 	bl	8000ff0 <HAL_GPIO_WritePin>

	  displaySelect = displaySelect << 1;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	18db      	adds	r3, r3, r3
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005f0:	701a      	strb	r2, [r3, #0]
	  if(displaySelect == 0x00)
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <HAL_TIM_PeriodElapsedCallback+0xa4>
	  {
		  displaySelect = 0x01;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
	  }
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08004cb4 	.word	0x08004cb4
 800060c:	200001c4 	.word	0x200001c4
 8000610:	200001f8 	.word	0x200001f8
 8000614:	20000124 	.word	0x20000124
 8000618:	48000400 	.word	0x48000400
 800061c:	200001ac 	.word	0x200001ac
 8000620:	20000078 	.word	0x20000078
 8000624:	200001b0 	.word	0x200001b0
 8000628:	200001ad 	.word	0x200001ad

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0549      	lsls	r1, r1, #21
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_MspInit+0x44>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	4013      	ands	r3, r2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08b      	sub	sp, #44	; 0x2c
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2414      	movs	r4, #20
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f003 fe7c 	bl	8004390 <memset>
  if(hspi->Instance==SPI1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <HAL_SPI_MspInit+0xd8>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d155      	bne.n	800074e <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006a4:	699a      	ldr	r2, [r3, #24]
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0149      	lsls	r1, r1, #5
 80006ac:	430a      	orrs	r2, r1
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006b2:	699a      	ldr	r2, [r3, #24]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	015b      	lsls	r3, r3, #5
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0289      	lsls	r1, r1, #10
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	02c9      	lsls	r1, r1, #11
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	02db      	lsls	r3, r3, #11
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2240      	movs	r2, #64	; 0x40
 80006fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2202      	movs	r2, #2
 8000700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2203      	movs	r2, #3
 800070c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	193a      	adds	r2, r7, r4
 8000716:	2390      	movs	r3, #144	; 0x90
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 faef 	bl	8000d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2228      	movs	r2, #40	; 0x28
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2203      	movs	r2, #3
 800073a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	187b      	adds	r3, r7, r1
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_SPI_MspInit+0xe0>)
 8000746:	0019      	movs	r1, r3
 8000748:	0010      	movs	r0, r2
 800074a:	f000 fad9 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b00b      	add	sp, #44	; 0x2c
 8000754:	bd90      	pop	{r4, r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40013000 	.word	0x40013000
 800075c:	40021000 	.word	0x40021000
 8000760:	48000400 	.word	0x48000400

08000764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	429a      	cmp	r2, r3
 8000776:	d113      	bne.n	80007a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 800077e:	2101      	movs	r1, #1
 8000780:	430a      	orrs	r2, r1
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	2201      	movs	r2, #1
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	200f      	movs	r0, #15
 8000796:	f000 fa03 	bl	8000ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 fa15 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b08b      	sub	sp, #44	; 0x2c
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	2414      	movs	r4, #20
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f003 fde6 	bl	8004390 <memset>
  if(huart->Instance==USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d13a      	bne.n	8000844 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007d0:	69da      	ldr	r2, [r3, #28]
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	61da      	str	r2, [r3, #28]
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0289      	lsls	r1, r1, #10
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	029b      	lsls	r3, r3, #10
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2202      	movs	r2, #2
 8000812:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2203      	movs	r2, #3
 800081e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	187a      	adds	r2, r7, r1
 8000828:	2390      	movs	r3, #144	; 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fa66 	bl	8000d00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	201c      	movs	r0, #28
 800083a:	f000 f9b1 	bl	8000ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800083e:	201c      	movs	r0, #28
 8000840:	f000 f9c3 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b00b      	add	sp, #44	; 0x2c
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	40004400 	.word	0x40004400
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 f8ca 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <TIM2_IRQHandler+0x14>)
 800088a:	0018      	movs	r0, r3
 800088c:	f002 f982 	bl	8002b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	200000dc 	.word	0x200000dc

0800089c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <USART2_IRQHandler+0x14>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 fdfc 	bl	80034a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000124 	.word	0x20000124

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	18d3      	adds	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f003 fd5c 	bl	80043a0 <__errno>
 80008e8:	0003      	movs	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	425b      	negs	r3, r3
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	18d2      	adds	r2, r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	b006      	add	sp, #24
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20008000 	.word	0x20008000
 8000914:	00000400 	.word	0x00000400
 8000918:	200001fc 	.word	0x200001fc
 800091c:	20000350 	.word	0x20000350

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000930:	f7ff fff6 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095a:	f003 fd27 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fc67 	bl	8000230 <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000970:	08004d34 	.word	0x08004d34
  ldr r2, =_sbss
 8000974:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000978:	2000034c 	.word	0x2000034c

0800097c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_COMP_IRQHandler>
	...

08000980 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_Init+0x24>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_Init+0x24>)
 800098a:	2110      	movs	r1, #16
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f809 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f7ff fe4f 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x5c>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x60>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	0019      	movs	r1, r3
 80009ba:	23fa      	movs	r3, #250	; 0xfa
 80009bc:	0098      	lsls	r0, r3, #2
 80009be:	f7ff fbab 	bl	8000118 <__udivsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	0019      	movs	r1, r3
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff fba6 	bl	8000118 <__udivsi3>
 80009cc:	0003      	movs	r3, r0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f90b 	bl	8000bea <HAL_SYSTICK_Config>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e00f      	b.n	80009fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d80b      	bhi.n	80009fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2301      	movs	r3, #1
 80009e6:	425b      	negs	r3, r3
 80009e8:	2200      	movs	r2, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f8d8 	bl	8000ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_InitTick+0x64>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	18d2      	adds	r2, r2, r3
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000200 	.word	0x20000200

08000a34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000200 	.word	0x20000200

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	0002      	movs	r2, r0
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5a:	d809      	bhi.n	8000a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	231f      	movs	r3, #31
 8000a64:	401a      	ands	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_EnableIRQ+0x30>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	; 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	; 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	045b      	lsls	r3, r3, #17
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d301      	bcc.n	8000b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SysTick_Config+0x44>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7c 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SysTick_Config+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SysTick_Config+0x44>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff33 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ffaf 	bl	8000b58 <SysTick_Config>
 8000bfa:	0003      	movs	r3, r0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2221      	movs	r2, #33	; 0x21
 8000c10:	5c9b      	ldrb	r3, [r3, r2]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d008      	beq.n	8000c2a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2220      	movs	r2, #32
 8000c22:	2100      	movs	r1, #0
 8000c24:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e020      	b.n	8000c6c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	210e      	movs	r1, #14
 8000c36:	438a      	bics	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	438a      	bics	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c52:	2101      	movs	r1, #1
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2221      	movs	r2, #33	; 0x21
 8000c5e:	2101      	movs	r1, #1
 8000c60:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2220      	movs	r2, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2221      	movs	r2, #33	; 0x21
 8000c88:	5c9b      	ldrb	r3, [r3, r2]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d006      	beq.n	8000c9e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2204      	movs	r2, #4
 8000c94:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e028      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	210e      	movs	r1, #14
 8000caa:	438a      	bics	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	438a      	bics	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2221      	movs	r2, #33	; 0x21
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2220      	movs	r2, #32
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	0010      	movs	r0, r2
 8000cee:	4798      	blx	r3
    }
  }
  return status;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e155      	b.n	8000fbc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d100      	bne.n	8000d28 <HAL_GPIO_Init+0x28>
 8000d26:	e146      	b.n	8000fb6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d005      	beq.n	8000d40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d017      	beq.n	8000dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d123      	bne.n	8000e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	58d3      	ldr	r3, [r2, r3]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2107      	movs	r1, #7
 8000e16:	400b      	ands	r3, r1
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	6939      	ldr	r1, [r7, #16]
 8000e30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2203      	movs	r2, #3
 8000e50:	401a      	ands	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	23c0      	movs	r3, #192	; 0xc0
 8000e6c:	029b      	lsls	r3, r3, #10
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d100      	bne.n	8000e74 <HAL_GPIO_Init+0x174>
 8000e72:	e0a0      	b.n	8000fb6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <HAL_GPIO_Init+0x2d4>)
 8000e76:	699a      	ldr	r2, [r3, #24]
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x2d4>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	619a      	str	r2, [r3, #24]
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <HAL_GPIO_Init+0x2d4>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e8c:	4a52      	ldr	r2, [pc, #328]	; (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	589b      	ldr	r3, [r3, r2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	2390      	movs	r3, #144	; 0x90
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1ea>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <HAL_GPIO_Init+0x2e0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1e6>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <HAL_GPIO_Init+0x2e4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1e2>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1de>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x1f0>
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x1f0>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x1f0>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x1f0>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x1f0>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f00:	4935      	ldr	r1, [pc, #212]	; (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	035b      	lsls	r3, r3, #13
 8000f26:	4013      	ands	r3, r2
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	039b      	lsls	r3, r3, #14
 8000f50:	4013      	ands	r3, r2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	029b      	lsls	r3, r3, #10
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	1e13      	subs	r3, r2, #0
 8000fc6:	d000      	beq.n	8000fca <HAL_GPIO_Init+0x2ca>
 8000fc8:	e6a2      	b.n	8000d10 <HAL_GPIO_Init+0x10>
  } 
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b006      	add	sp, #24
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	48000c00 	.word	0x48000c00
 8000fe8:	48001000 	.word	0x48001000
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	0008      	movs	r0, r1
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	1cbb      	adds	r3, r7, #2
 8000ffe:	1c02      	adds	r2, r0, #0
 8001000:	801a      	strh	r2, [r3, #0]
 8001002:	1c7b      	adds	r3, r7, #1
 8001004:	1c0a      	adds	r2, r1, #0
 8001006:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001008:	1c7b      	adds	r3, r7, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001010:	1cbb      	adds	r3, r7, #2
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101a:	1cbb      	adds	r3, r7, #2
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	f000 fb76 	bl	800172c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	d100      	bne.n	800104c <HAL_RCC_OscConfig+0x20>
 800104a:	e08e      	b.n	800116a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800104c:	4bc5      	ldr	r3, [pc, #788]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	220c      	movs	r2, #12
 8001052:	4013      	ands	r3, r2
 8001054:	2b04      	cmp	r3, #4
 8001056:	d00e      	beq.n	8001076 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001058:	4bc2      	ldr	r3, [pc, #776]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	220c      	movs	r2, #12
 800105e:	4013      	ands	r3, r2
 8001060:	2b08      	cmp	r3, #8
 8001062:	d117      	bne.n	8001094 <HAL_RCC_OscConfig+0x68>
 8001064:	4bbf      	ldr	r3, [pc, #764]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	23c0      	movs	r3, #192	; 0xc0
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	401a      	ands	r2, r3
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	429a      	cmp	r2, r3
 8001074:	d10e      	bne.n	8001094 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001076:	4bbb      	ldr	r3, [pc, #748]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d100      	bne.n	8001084 <HAL_RCC_OscConfig+0x58>
 8001082:	e071      	b.n	8001168 <HAL_RCC_OscConfig+0x13c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d000      	beq.n	800108e <HAL_RCC_OscConfig+0x62>
 800108c:	e06c      	b.n	8001168 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f000 fb4c 	bl	800172c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x80>
 800109c:	4bb1      	ldr	r3, [pc, #708]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4bb0      	ldr	r3, [pc, #704]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0249      	lsls	r1, r1, #9
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e02f      	b.n	800110c <HAL_RCC_OscConfig+0xe0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10c      	bne.n	80010ce <HAL_RCC_OscConfig+0xa2>
 80010b4:	4bab      	ldr	r3, [pc, #684]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4baa      	ldr	r3, [pc, #680]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010ba:	49ab      	ldr	r1, [pc, #684]	; (8001368 <HAL_RCC_OscConfig+0x33c>)
 80010bc:	400a      	ands	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	4ba8      	ldr	r3, [pc, #672]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4ba7      	ldr	r3, [pc, #668]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010c6:	49a9      	ldr	r1, [pc, #676]	; (800136c <HAL_RCC_OscConfig+0x340>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e01e      	b.n	800110c <HAL_RCC_OscConfig+0xe0>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d10e      	bne.n	80010f4 <HAL_RCC_OscConfig+0xc8>
 80010d6:	4ba3      	ldr	r3, [pc, #652]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4ba2      	ldr	r3, [pc, #648]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	4b9f      	ldr	r3, [pc, #636]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b9e      	ldr	r3, [pc, #632]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	0249      	lsls	r1, r1, #9
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xe0>
 80010f4:	4b9b      	ldr	r3, [pc, #620]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b9a      	ldr	r3, [pc, #616]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010fa:	499b      	ldr	r1, [pc, #620]	; (8001368 <HAL_RCC_OscConfig+0x33c>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	4b98      	ldr	r3, [pc, #608]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b97      	ldr	r3, [pc, #604]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001106:	4999      	ldr	r1, [pc, #612]	; (800136c <HAL_RCC_OscConfig+0x340>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d014      	beq.n	800113e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fc8e 	bl	8000a34 <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fc89 	bl	8000a34 <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e2fd      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001130:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0xf2>
 800113c:	e015      	b.n	800116a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc79 	bl	8000a34 <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fc74 	bl	8000a34 <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e2e8      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b82      	ldr	r3, [pc, #520]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	029b      	lsls	r3, r3, #10
 8001162:	4013      	ands	r3, r2
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x11c>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2202      	movs	r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d100      	bne.n	8001176 <HAL_RCC_OscConfig+0x14a>
 8001174:	e06c      	b.n	8001250 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001176:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	220c      	movs	r2, #12
 800117c:	4013      	ands	r3, r2
 800117e:	d00e      	beq.n	800119e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001180:	4b78      	ldr	r3, [pc, #480]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	220c      	movs	r2, #12
 8001186:	4013      	ands	r3, r2
 8001188:	2b08      	cmp	r3, #8
 800118a:	d11f      	bne.n	80011cc <HAL_RCC_OscConfig+0x1a0>
 800118c:	4b75      	ldr	r3, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	401a      	ands	r2, r3
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	429a      	cmp	r2, r3
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	4b71      	ldr	r3, [pc, #452]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x188>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e2bb      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	22f8      	movs	r2, #248	; 0xf8
 80011ba:	4393      	bics	r3, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00da      	lsls	r2, r3, #3
 80011c4:	4b67      	ldr	r3, [pc, #412]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e041      	b.n	8001250 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d024      	beq.n	800121e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d4:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80011da:	2101      	movs	r1, #1
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc28 	bl	8000a34 <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fc23 	bl	8000a34 <HAL_GetTick>
 80011ee:	0002      	movs	r2, r0
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e297      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b59      	ldr	r3, [pc, #356]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2202      	movs	r2, #2
 8001202:	4013      	ands	r3, r2
 8001204:	d0f1      	beq.n	80011ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b57      	ldr	r3, [pc, #348]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	22f8      	movs	r2, #248	; 0xf8
 800120c:	4393      	bics	r3, r2
 800120e:	0019      	movs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	00da      	lsls	r2, r3, #3
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e018      	b.n	8001250 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b50      	ldr	r3, [pc, #320]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fc03 	bl	8000a34 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fbfe 	bl	8000a34 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e272      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d1f1      	bne.n	8001234 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2208      	movs	r2, #8
 8001256:	4013      	ands	r3, r2
 8001258:	d036      	beq.n	80012c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d019      	beq.n	8001296 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001268:	2101      	movs	r1, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbe1 	bl	8000a34 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fbdc 	bl	8000a34 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e250      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d0f1      	beq.n	8001278 <HAL_RCC_OscConfig+0x24c>
 8001294:	e018      	b.n	80012c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800129c:	2101      	movs	r1, #1
 800129e:	438a      	bics	r2, r1
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fbc7 	bl	8000a34 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fbc2 	bl	8000a34 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e236      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d1f1      	bne.n	80012ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2204      	movs	r2, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d100      	bne.n	80012d4 <HAL_RCC_OscConfig+0x2a8>
 80012d2:	e0b5      	b.n	8001440 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d4:	201f      	movs	r0, #31
 80012d6:	183b      	adds	r3, r7, r0
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	055b      	lsls	r3, r3, #21
 80012e4:	4013      	ands	r3, r2
 80012e6:	d110      	bne.n	800130a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	0549      	lsls	r1, r1, #21
 80012f2:	430a      	orrs	r2, r1
 80012f4:	61da      	str	r2, [r3, #28]
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	055b      	lsls	r3, r3, #21
 80012fe:	4013      	ands	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001304:	183b      	adds	r3, r7, r0
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_OscConfig+0x344>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4013      	ands	r3, r2
 8001314:	d11a      	bne.n	800134c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_RCC_OscConfig+0x344>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_RCC_OscConfig+0x344>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	0049      	lsls	r1, r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001324:	f7ff fb86 	bl	8000a34 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fb81 	bl	8000a34 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1f5      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x344>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4013      	ands	r3, r2
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10f      	bne.n	8001374 <HAL_RCC_OscConfig+0x348>
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 8001356:	6a1a      	ldr	r2, [r3, #32]
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	621a      	str	r2, [r3, #32]
 8001360:	e036      	b.n	80013d0 <HAL_RCC_OscConfig+0x3a4>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	40021000 	.word	0x40021000
 8001368:	fffeffff 	.word	0xfffeffff
 800136c:	fffbffff 	.word	0xfffbffff
 8001370:	40007000 	.word	0x40007000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10c      	bne.n	8001396 <HAL_RCC_OscConfig+0x36a>
 800137c:	4bca      	ldr	r3, [pc, #808]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	4bc9      	ldr	r3, [pc, #804]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001382:	2101      	movs	r1, #1
 8001384:	438a      	bics	r2, r1
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	4bc7      	ldr	r3, [pc, #796]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4bc6      	ldr	r3, [pc, #792]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800138e:	2104      	movs	r1, #4
 8001390:	438a      	bics	r2, r1
 8001392:	621a      	str	r2, [r3, #32]
 8001394:	e01c      	b.n	80013d0 <HAL_RCC_OscConfig+0x3a4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b05      	cmp	r3, #5
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x38c>
 800139e:	4bc2      	ldr	r3, [pc, #776]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	4bc1      	ldr	r3, [pc, #772]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013a4:	2104      	movs	r1, #4
 80013a6:	430a      	orrs	r2, r1
 80013a8:	621a      	str	r2, [r3, #32]
 80013aa:	4bbf      	ldr	r3, [pc, #764]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	4bbe      	ldr	r3, [pc, #760]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0x3a4>
 80013b8:	4bbb      	ldr	r3, [pc, #748]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	4bba      	ldr	r3, [pc, #744]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	621a      	str	r2, [r3, #32]
 80013c4:	4bb8      	ldr	r3, [pc, #736]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	4bb7      	ldr	r3, [pc, #732]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	2104      	movs	r1, #4
 80013cc:	438a      	bics	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d014      	beq.n	8001402 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fb2c 	bl	8000a34 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff fb27 	bl	8000a34 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4aaf      	ldr	r2, [pc, #700]	; (80016ac <HAL_RCC_OscConfig+0x680>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e19a      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	4bac      	ldr	r3, [pc, #688]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x3b6>
 8001400:	e013      	b.n	800142a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb17 	bl	8000a34 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140a:	e009      	b.n	8001420 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fb12 	bl	8000a34 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4aa5      	ldr	r2, [pc, #660]	; (80016ac <HAL_RCC_OscConfig+0x680>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e185      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	4ba1      	ldr	r3, [pc, #644]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800142a:	231f      	movs	r3, #31
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	4b9b      	ldr	r3, [pc, #620]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800143a:	499d      	ldr	r1, [pc, #628]	; (80016b0 <HAL_RCC_OscConfig+0x684>)
 800143c:	400a      	ands	r2, r1
 800143e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2210      	movs	r2, #16
 8001446:	4013      	ands	r3, r2
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d12a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001452:	4b95      	ldr	r3, [pc, #596]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001456:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001458:	2104      	movs	r1, #4
 800145a:	430a      	orrs	r2, r1
 800145c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800145e:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001462:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001464:	2101      	movs	r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fae3 	bl	8000a34 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001474:	f7ff fade 	bl	8000a34 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e152      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d0f1      	beq.n	8001474 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001490:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	22f8      	movs	r2, #248	; 0xf8
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	00da      	lsls	r2, r3, #3
 80014a0:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e034      	b.n	8001512 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	3305      	adds	r3, #5
 80014ae:	d111      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014b0:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b4:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	438a      	bics	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014bc:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	22f8      	movs	r2, #248	; 0xf8
 80014c2:	4393      	bics	r3, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	00da      	lsls	r2, r3, #3
 80014cc:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
 80014d2:	e01e      	b.n	8001512 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014d4:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d8:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014da:	2104      	movs	r1, #4
 80014dc:	430a      	orrs	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014e0:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e4:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff faa2 	bl	8000a34 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014f6:	f7ff fa9d 	bl	8000a34 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e111      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001508:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d1f1      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2220      	movs	r2, #32
 8001518:	4013      	ands	r3, r2
 800151a:	d05c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800151c:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	220c      	movs	r2, #12
 8001522:	4013      	ands	r3, r2
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d00e      	beq.n	8001546 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001528:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001530:	2b08      	cmp	r3, #8
 8001532:	d114      	bne.n	800155e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001534:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	23c0      	movs	r3, #192	; 0xc0
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	401a      	ands	r2, r3
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	025b      	lsls	r3, r3, #9
 8001542:	429a      	cmp	r2, r3
 8001544:	d10b      	bne.n	800155e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d040      	beq.n	80015d4 <HAL_RCC_OscConfig+0x5a8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d03c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0e6      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01b      	beq.n	800159e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156a:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0249      	lsls	r1, r1, #9
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fa5e 	bl	8000a34 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800157e:	f7ff fa59 	bl	8000a34 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0cd      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001590:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x552>
 800159c:	e01b      	b.n	80015d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800159e:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80015a4:	4943      	ldr	r1, [pc, #268]	; (80016b4 <HAL_RCC_OscConfig+0x688>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa43 	bl	8000a34 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b4:	f7ff fa3e 	bl	8000a34 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0b2      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x588>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d100      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5b4>
 80015de:	e0a4      	b.n	800172a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	220c      	movs	r2, #12
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d100      	bne.n	80015ee <HAL_RCC_OscConfig+0x5c2>
 80015ec:	e078      	b.n	80016e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d14c      	bne.n	8001690 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	492e      	ldr	r1, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x68c>)
 80015fe:	400a      	ands	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa17 	bl	8000a34 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fa12 	bl	8000a34 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e086      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	049b      	lsls	r3, r3, #18
 8001626:	4013      	ands	r3, r2
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	220f      	movs	r2, #15
 8001630:	4393      	bics	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800163a:	430a      	orrs	r2, r1
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_RCC_OscConfig+0x690>)
 8001644:	4013      	ands	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	431a      	orrs	r2, r3
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001654:	430a      	orrs	r2, r1
 8001656:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	0449      	lsls	r1, r1, #17
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff f9e5 	bl	8000a34 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff f9e0 	bl	8000a34 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	4013      	ands	r3, r2
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x644>
 800168e:	e04c      	b.n	800172a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_RCC_OscConfig+0x67c>)
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <HAL_RCC_OscConfig+0x68c>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f9ca 	bl	8000a34 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x6a6>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40021000 	.word	0x40021000
 80016ac:	00001388 	.word	0x00001388
 80016b0:	efffffff 	.word	0xefffffff
 80016b4:	fffeffff 	.word	0xfffeffff
 80016b8:	feffffff 	.word	0xfeffffff
 80016bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f9b8 	bl	8000a34 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e02c      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_RCC_OscConfig+0x708>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	049b      	lsls	r3, r3, #18
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x694>
 80016de:	e024      	b.n	800172a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e01f      	b.n	800172c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_RCC_OscConfig+0x708>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_RCC_OscConfig+0x708>)
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	401a      	ands	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	429a      	cmp	r2, r3
 8001706:	d10e      	bne.n	8001726 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	220f      	movs	r2, #15
 800170c:	401a      	ands	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	23f0      	movs	r3, #240	; 0xf0
 800171a:	039b      	lsls	r3, r3, #14
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b008      	add	sp, #32
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0bf      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d911      	bls.n	800177e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4393      	bics	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0a6      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d015      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2204      	movs	r2, #4
 800178e:	4013      	ands	r3, r2
 8001790:	d006      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001792:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001798:	21e0      	movs	r1, #224	; 0xe0
 800179a:	00c9      	lsls	r1, r1, #3
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	22f0      	movs	r2, #240	; 0xf0
 80017a6:	4393      	bics	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	d04c      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	029b      	lsls	r3, r3, #10
 80017ce:	4013      	ands	r3, r2
 80017d0:	d120      	bne.n	8001814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07a      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	049b      	lsls	r3, r3, #18
 80017e6:	4013      	ands	r3, r2
 80017e8:	d114      	bne.n	8001814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06e      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80017f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	029b      	lsls	r3, r3, #10
 80017fe:	4013      	ands	r3, r2
 8001800:	d108      	bne.n	8001814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e062      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2202      	movs	r2, #2
 800180c:	4013      	ands	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e05b      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2203      	movs	r2, #3
 800181a:	4393      	bics	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff f904 	bl	8000a34 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001830:	e009      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001832:	f7ff f8ff 	bl	8000a34 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_RCC_ClockConfig+0x1a4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e042      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	220c      	movs	r2, #12
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1ec      	bne.n	8001832 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d211      	bcs.n	800188a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x19c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d001      	beq.n	800188a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e020      	b.n	80018cc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2204      	movs	r2, #4
 8001890:	4013      	ands	r3, r2
 8001892:	d009      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_RCC_ClockConfig+0x1a8>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018a8:	f000 f820 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018ac:	0001      	movs	r1, r0
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1a0>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	220f      	movs	r2, #15
 80018b6:	4013      	ands	r3, r2
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1ac>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	000a      	movs	r2, r1
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1b0>)
 80018c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f7ff f86f 	bl	80009a8 <HAL_InitTick>
  
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	00001388 	.word	0x00001388
 80018e0:	fffff8ff 	.word	0xfffff8ff
 80018e4:	08004cc0 	.word	0x08004cc0
 80018e8:	20000000 	.word	0x20000000

080018ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	220c      	movs	r2, #12
 8001910:	4013      	ands	r3, r2
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d046      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001916:	d848      	bhi.n	80019aa <HAL_RCC_GetSysClockFreq+0xbe>
 8001918:	2b04      	cmp	r3, #4
 800191a:	d002      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x36>
 800191c:	2b08      	cmp	r3, #8
 800191e:	d003      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x3c>
 8001920:	e043      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001924:	613b      	str	r3, [r7, #16]
      break;
 8001926:	e043      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	0c9b      	lsrs	r3, r3, #18
 800192c:	220f      	movs	r2, #15
 800192e:	4013      	ands	r3, r2
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	220f      	movs	r2, #15
 800193c:	4013      	ands	r3, r2
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	401a      	ands	r2, r3
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	429a      	cmp	r2, r3
 8001952:	d109      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001958:	f7fe fbde 	bl	8000118 <__udivsi3>
 800195c:	0003      	movs	r3, r0
 800195e:	001a      	movs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4353      	muls	r3, r2
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e01a      	b.n	800199e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	401a      	ands	r2, r3
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	429a      	cmp	r2, r3
 8001976:	d109      	bne.n	800198c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <HAL_RCC_GetSysClockFreq+0xe0>)
 800197c:	f7fe fbcc 	bl	8000118 <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	001a      	movs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4353      	muls	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e008      	b.n	800199e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001990:	f7fe fbc2 	bl	8000118 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	001a      	movs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4353      	muls	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	613b      	str	r3, [r7, #16]
      break;
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_GetSysClockFreq+0xe0>)
 80019a6:	613b      	str	r3, [r7, #16]
      break;
 80019a8:	e002      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019ac:	613b      	str	r3, [r7, #16]
      break;
 80019ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019b0:	693b      	ldr	r3, [r7, #16]
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b006      	add	sp, #24
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	007a1200 	.word	0x007a1200
 80019c4:	08004cd8 	.word	0x08004cd8
 80019c8:	08004ce8 	.word	0x08004ce8
 80019cc:	02dc6c00 	.word	0x02dc6c00

080019d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019e8:	f7ff fff2 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019ec:	0001      	movs	r1, r0
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	2207      	movs	r2, #7
 80019f6:	4013      	ands	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	40d9      	lsrs	r1, r3
 80019fe:	000b      	movs	r3, r1
}    
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08004cd0 	.word	0x08004cd0

08001a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a2c:	e08e      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2017      	movs	r0, #23
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	055b      	lsls	r3, r3, #21
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d110      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0549      	lsls	r1, r1, #21
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	61da      	str	r2, [r3, #28]
 8001a50:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	055b      	lsls	r3, r3, #21
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d11a      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a70:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b5f      	ldr	r3, [pc, #380]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	0049      	lsls	r1, r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7fe ffd9 	bl	8000a34 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	e008      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a88:	f7fe ffd4 	bl	8000a34 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0a6      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d034      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	23c0      	movs	r3, #192	; 0xc0
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d02c      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac8:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad4:	6a1a      	ldr	r2, [r3, #32]
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	0249      	lsls	r1, r1, #9
 8001adc:	430a      	orrs	r2, r1
 8001ade:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	6a1a      	ldr	r2, [r3, #32]
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae6:	4945      	ldr	r1, [pc, #276]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe ff9b 	bl	8000a34 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	e009      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7fe ff96 	bl	8000a34 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	4a3c      	ldr	r2, [pc, #240]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e067      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b36:	2317      	movs	r3, #23
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b46:	492f      	ldr	r1, [pc, #188]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d009      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	02db      	lsls	r3, r3, #11
 8001b90:	4013      	ands	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2220      	movs	r2, #32
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	2240      	movs	r2, #64	; 0x40
 8001bd8:	4393      	bics	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b006      	add	sp, #24
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	fffffcff 	.word	0xfffffcff
 8001bfc:	fffeffff 	.word	0xfffeffff
 8001c00:	00001388 	.word	0x00001388
 8001c04:	efffffff 	.word	0xefffffff
 8001c08:	fffcffff 	.word	0xfffcffff
 8001c0c:	fff3ffff 	.word	0xfff3ffff

08001c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0a8      	b.n	8001d74 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	2382      	movs	r3, #130	; 0x82
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d009      	beq.n	8001c4a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
 8001c3c:	e005      	b.n	8001c4a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	225d      	movs	r2, #93	; 0x5d
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	225c      	movs	r2, #92	; 0x5c
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fd0a 	bl	8000680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	225d      	movs	r2, #93	; 0x5d
 8001c70:	2102      	movs	r1, #2
 8001c72:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	438a      	bics	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	23e0      	movs	r3, #224	; 0xe0
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d902      	bls.n	8001c96 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e002      	b.n	8001c9c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	23f0      	movs	r3, #240	; 0xf0
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d008      	beq.n	8001cba <HAL_SPI_Init+0xaa>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	23e0      	movs	r3, #224	; 0xe0
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d002      	beq.n	8001cba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	2382      	movs	r3, #130	; 0x82
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	2384      	movs	r3, #132	; 0x84
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	400b      	ands	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6999      	ldr	r1, [r3, #24]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	400b      	ands	r3, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2138      	movs	r1, #56	; 0x38
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	400b      	ands	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	0011      	movs	r1, r2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	401a      	ands	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	2204      	movs	r2, #4
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2110      	movs	r1, #16
 8001d28:	400b      	ands	r3, r1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	2108      	movs	r1, #8
 8001d32:	400b      	ands	r3, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	23f0      	movs	r3, #240	; 0xf0
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	400b      	ands	r3, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	0011      	movs	r1, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	015b      	lsls	r3, r3, #5
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4907      	ldr	r1, [pc, #28]	; (8001d7c <HAL_SPI_Init+0x16c>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	225d      	movs	r2, #93	; 0x5d
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b004      	add	sp, #16
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	fffff7ff 	.word	0xfffff7ff

08001d80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	1dbb      	adds	r3, r7, #6
 8001d8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	225c      	movs	r2, #92	; 0x5c
 8001d9c:	5c9b      	ldrb	r3, [r3, r2]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_SPI_Transmit+0x26>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e147      	b.n	8002036 <HAL_SPI_Transmit+0x2b6>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	225c      	movs	r2, #92	; 0x5c
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dae:	f7fe fe41 	bl	8000a34 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001db6:	2316      	movs	r3, #22
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	1dba      	adds	r2, r7, #6
 8001dbc:	8812      	ldrh	r2, [r2, #0]
 8001dbe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	225d      	movs	r2, #93	; 0x5d
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d004      	beq.n	8001dd6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dd4:	e128      	b.n	8002028 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_SPI_Transmit+0x64>
 8001ddc:	1dbb      	adds	r3, r7, #6
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d104      	bne.n	8001dee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001de4:	231f      	movs	r3, #31
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dec:	e11c      	b.n	8002028 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	225d      	movs	r2, #93	; 0x5d
 8001df2:	2103      	movs	r1, #3
 8001df4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1dba      	adds	r2, r7, #6
 8001e06:	8812      	ldrh	r2, [r2, #0]
 8001e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1dba      	adds	r2, r7, #6
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2244      	movs	r2, #68	; 0x44
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2246      	movs	r2, #70	; 0x46
 8001e24:	2100      	movs	r1, #0
 8001e26:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d110      	bne.n	8001e62 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2140      	movs	r1, #64	; 0x40
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	01c9      	lsls	r1, r1, #7
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d007      	beq.n	8001e80 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	23e0      	movs	r3, #224	; 0xe0
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d952      	bls.n	8001f32 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_SPI_Transmit+0x11e>
 8001e94:	2316      	movs	r3, #22
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d143      	bne.n	8001f26 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	1c9a      	adds	r2, r3, #2
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ec2:	e030      	b.n	8001f26 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d112      	bne.n	8001ef8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	1c9a      	adds	r2, r3, #2
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ef6:	e016      	b.n	8001f26 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef8:	f7fe fd9c 	bl	8000a34 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d802      	bhi.n	8001f0e <HAL_SPI_Transmit+0x18e>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <HAL_SPI_Transmit+0x194>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d108      	bne.n	8001f26 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001f14:	231f      	movs	r3, #31
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2203      	movs	r2, #3
 8001f1a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	225d      	movs	r2, #93	; 0x5d
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f24:	e080      	b.n	8002028 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1c9      	bne.n	8001ec4 <HAL_SPI_Transmit+0x144>
 8001f30:	e053      	b.n	8001fda <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_SPI_Transmit+0x1c4>
 8001f3a:	2316      	movs	r3, #22
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d145      	bne.n	8001fd0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001f6a:	e031      	b.n	8001fd0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d113      	bne.n	8001fa2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fa0:	e016      	b.n	8001fd0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fa2:	f7fe fd47 	bl	8000a34 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d802      	bhi.n	8001fb8 <HAL_SPI_Transmit+0x238>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_SPI_Transmit+0x23e>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d108      	bne.n	8001fd0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	225d      	movs	r2, #93	; 0x5d
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
          goto error;
 8001fce:	e02b      	b.n	8002028 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1c8      	bne.n	8001f6c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	6839      	ldr	r1, [r7, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 fcef 	bl	80029c4 <SPI_EndRxTxTransaction>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002016:	231f      	movs	r3, #31
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e003      	b.n	8002028 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	225d      	movs	r2, #93	; 0x5d
 8002024:	2101      	movs	r1, #1
 8002026:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	225c      	movs	r2, #92	; 0x5c
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002030:	231f      	movs	r3, #31
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b008      	add	sp, #32
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	1dbb      	adds	r3, r7, #6
 800204e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002050:	2117      	movs	r1, #23
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	225d      	movs	r2, #93	; 0x5d
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d003      	beq.n	800206c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002064:	187b      	adds	r3, r7, r1
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
    goto error;
 800206a:	e12b      	b.n	80022c4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2382      	movs	r3, #130	; 0x82
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	429a      	cmp	r2, r3
 8002076:	d113      	bne.n	80020a0 <HAL_SPI_Receive+0x60>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10f      	bne.n	80020a0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	225d      	movs	r2, #93	; 0x5d
 8002084:	2104      	movs	r1, #4
 8002086:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002088:	1dbb      	adds	r3, r7, #6
 800208a:	881c      	ldrh	r4, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	0023      	movs	r3, r4
 8002098:	f000 f924 	bl	80022e4 <HAL_SPI_TransmitReceive>
 800209c:	0003      	movs	r3, r0
 800209e:	e118      	b.n	80022d2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	225c      	movs	r2, #92	; 0x5c
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Receive+0x6e>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e111      	b.n	80022d2 <HAL_SPI_Receive+0x292>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	225c      	movs	r2, #92	; 0x5c
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b6:	f7fe fcbd 	bl	8000a34 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_SPI_Receive+0x8c>
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80020cc:	2317      	movs	r3, #23
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80020d4:	e0f6      	b.n	80022c4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	225d      	movs	r2, #93	; 0x5d
 80020da:	2104      	movs	r1, #4
 80020dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1dba      	adds	r2, r7, #6
 80020ee:	2144      	movs	r1, #68	; 0x44
 80020f0:	8812      	ldrh	r2, [r2, #0]
 80020f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1dba      	adds	r2, r7, #6
 80020f8:	2146      	movs	r1, #70	; 0x46
 80020fa:	8812      	ldrh	r2, [r2, #0]
 80020fc:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	23e0      	movs	r3, #224	; 0xe0
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	429a      	cmp	r2, r3
 8002126:	d908      	bls.n	800213a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	496a      	ldr	r1, [pc, #424]	; (80022dc <HAL_SPI_Receive+0x29c>)
 8002134:	400a      	ands	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	e008      	b.n	800214c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0149      	lsls	r1, r1, #5
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	429a      	cmp	r2, r3
 8002156:	d10f      	bne.n	8002178 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	438a      	bics	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	495b      	ldr	r1, [pc, #364]	; (80022e0 <HAL_SPI_Receive+0x2a0>)
 8002174:	400a      	ands	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	4013      	ands	r3, r2
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d007      	beq.n	8002196 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2140      	movs	r1, #64	; 0x40
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	23e0      	movs	r3, #224	; 0xe0
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	429a      	cmp	r2, r3
 80021a0:	d900      	bls.n	80021a4 <HAL_SPI_Receive+0x164>
 80021a2:	e071      	b.n	8002288 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021a4:	e035      	b.n	8002212 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d117      	bne.n	80021e4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	330c      	adds	r3, #12
 80021ba:	001a      	movs	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2246      	movs	r2, #70	; 0x46
 80021d4:	5a9b      	ldrh	r3, [r3, r2]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b299      	uxth	r1, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2246      	movs	r2, #70	; 0x46
 80021e0:	5299      	strh	r1, [r3, r2]
 80021e2:	e016      	b.n	8002212 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e4:	f7fe fc26 	bl	8000a34 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d802      	bhi.n	80021fa <HAL_SPI_Receive+0x1ba>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_SPI_Receive+0x1c0>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d108      	bne.n	8002212 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002200:	2317      	movs	r3, #23
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2203      	movs	r2, #3
 8002206:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	225d      	movs	r2, #93	; 0x5d
 800220c:	2101      	movs	r1, #1
 800220e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002210:	e058      	b.n	80022c4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2246      	movs	r2, #70	; 0x46
 8002216:	5a9b      	ldrh	r3, [r3, r2]
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1c3      	bne.n	80021a6 <HAL_SPI_Receive+0x166>
 800221e:	e039      	b.n	8002294 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	2b01      	cmp	r3, #1
 800222c:	d115      	bne.n	800225a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	b292      	uxth	r2, r2
 800223a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	1c9a      	adds	r2, r3, #2
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2246      	movs	r2, #70	; 0x46
 800224a:	5a9b      	ldrh	r3, [r3, r2]
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b299      	uxth	r1, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2246      	movs	r2, #70	; 0x46
 8002256:	5299      	strh	r1, [r3, r2]
 8002258:	e016      	b.n	8002288 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225a:	f7fe fbeb 	bl	8000a34 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d802      	bhi.n	8002270 <HAL_SPI_Receive+0x230>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_SPI_Receive+0x236>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002276:	2317      	movs	r3, #23
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2203      	movs	r2, #3
 800227c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	225d      	movs	r2, #93	; 0x5d
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
          goto error;
 8002286:	e01d      	b.n	80022c4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2246      	movs	r2, #70	; 0x46
 800228c:	5a9b      	ldrh	r3, [r3, r2]
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1c5      	bne.n	8002220 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fb34 	bl	8002908 <SPI_EndRxTransaction>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80022b2:	2317      	movs	r3, #23
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e003      	b.n	80022c4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	225d      	movs	r2, #93	; 0x5d
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	225c      	movs	r2, #92	; 0x5c
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022cc:	2317      	movs	r3, #23
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b007      	add	sp, #28
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	ffffefff 	.word	0xffffefff
 80022e0:	ffffbfff 	.word	0xffffbfff

080022e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	001a      	movs	r2, r3
 80022f2:	1cbb      	adds	r3, r7, #2
 80022f4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022f6:	2301      	movs	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022fa:	2323      	movs	r3, #35	; 0x23
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	225c      	movs	r2, #92	; 0x5c
 8002306:	5c9b      	ldrb	r3, [r3, r2]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_SPI_TransmitReceive+0x2c>
 800230c:	2302      	movs	r3, #2
 800230e:	e1c4      	b.n	800269a <HAL_SPI_TransmitReceive+0x3b6>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	225c      	movs	r2, #92	; 0x5c
 8002314:	2101      	movs	r1, #1
 8002316:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002318:	f7fe fb8c 	bl	8000a34 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002320:	201b      	movs	r0, #27
 8002322:	183b      	adds	r3, r7, r0
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	215d      	movs	r1, #93	; 0x5d
 8002328:	5c52      	ldrb	r2, [r2, r1]
 800232a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002332:	2312      	movs	r3, #18
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	1cba      	adds	r2, r7, #2
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800233c:	183b      	adds	r3, r7, r0
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d011      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x84>
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	2382      	movs	r3, #130	; 0x82
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	429a      	cmp	r2, r3
 800234c:	d107      	bne.n	800235e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <HAL_SPI_TransmitReceive+0x7a>
 8002356:	183b      	adds	r3, r7, r0
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b04      	cmp	r3, #4
 800235c:	d004      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800235e:	2323      	movs	r3, #35	; 0x23
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
    goto error;
 8002366:	e191      	b.n	800268c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_SPI_TransmitReceive+0x98>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_SPI_TransmitReceive+0x98>
 8002374:	1cbb      	adds	r3, r7, #2
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800237c:	2323      	movs	r3, #35	; 0x23
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
    goto error;
 8002384:	e182      	b.n	800268c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225d      	movs	r2, #93	; 0x5d
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b04      	cmp	r3, #4
 8002390:	d003      	beq.n	800239a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	225d      	movs	r2, #93	; 0x5d
 8002396:	2105      	movs	r1, #5
 8002398:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1cba      	adds	r2, r7, #2
 80023aa:	2146      	movs	r1, #70	; 0x46
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1cba      	adds	r2, r7, #2
 80023b4:	2144      	movs	r1, #68	; 0x44
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1cba      	adds	r2, r7, #2
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1cba      	adds	r2, r7, #2
 80023cc:	8812      	ldrh	r2, [r2, #0]
 80023ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	23e0      	movs	r3, #224	; 0xe0
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d908      	bls.n	80023fa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	49ac      	ldr	r1, [pc, #688]	; (80026a4 <HAL_SPI_TransmitReceive+0x3c0>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	e008      	b.n	800240c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	0149      	lsls	r1, r1, #5
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	4013      	ands	r3, r2
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d007      	beq.n	800242a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2140      	movs	r1, #64	; 0x40
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	23e0      	movs	r3, #224	; 0xe0
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	429a      	cmp	r2, r3
 8002434:	d800      	bhi.n	8002438 <HAL_SPI_TransmitReceive+0x154>
 8002436:	e083      	b.n	8002540 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_SPI_TransmitReceive+0x168>
 8002440:	2312      	movs	r3, #18
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d000      	beq.n	800244c <HAL_SPI_TransmitReceive+0x168>
 800244a:	e06d      	b.n	8002528 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	881a      	ldrh	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	1c9a      	adds	r2, r3, #2
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002470:	e05a      	b.n	8002528 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	2b02      	cmp	r3, #2
 800247e:	d11b      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x1d4>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x1d4>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2b01      	cmp	r3, #1
 800248e:	d113      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	1c9a      	adds	r2, r3, #2
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d11c      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x21c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2246      	movs	r2, #70	; 0x46
 80024ca:	5a9b      	ldrh	r3, [r3, r2]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	b292      	uxth	r2, r2
 80024de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	1c9a      	adds	r2, r3, #2
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2246      	movs	r2, #70	; 0x46
 80024ee:	5a9b      	ldrh	r3, [r3, r2]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b299      	uxth	r1, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2246      	movs	r2, #70	; 0x46
 80024fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002500:	f7fe fa98 	bl	8000a34 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250c:	429a      	cmp	r2, r3
 800250e:	d80b      	bhi.n	8002528 <HAL_SPI_TransmitReceive+0x244>
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	3301      	adds	r3, #1
 8002514:	d008      	beq.n	8002528 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002516:	2323      	movs	r3, #35	; 0x23
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2203      	movs	r2, #3
 800251c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	225d      	movs	r2, #93	; 0x5d
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
        goto error;
 8002526:	e0b1      	b.n	800268c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d19f      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x18e>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2246      	movs	r2, #70	; 0x46
 8002536:	5a9b      	ldrh	r3, [r3, r2]
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d199      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x18e>
 800253e:	e089      	b.n	8002654 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_SPI_TransmitReceive+0x270>
 8002548:	2312      	movs	r3, #18
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d000      	beq.n	8002554 <HAL_SPI_TransmitReceive+0x270>
 8002552:	e074      	b.n	800263e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257a:	e060      	b.n	800263e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d11c      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2e0>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d017      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x2e0>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	2b01      	cmp	r3, #1
 8002598:	d114      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	7812      	ldrb	r2, [r2, #0]
 80025a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d11e      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x32c>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2246      	movs	r2, #70	; 0x46
 80025d6:	5a9b      	ldrh	r3, [r3, r2]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	001a      	movs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2246      	movs	r2, #70	; 0x46
 80025fe:	5a9b      	ldrh	r3, [r3, r2]
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b299      	uxth	r1, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2246      	movs	r2, #70	; 0x46
 800260a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800260c:	2301      	movs	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002610:	f7fe fa10 	bl	8000a34 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261c:	429a      	cmp	r2, r3
 800261e:	d802      	bhi.n	8002626 <HAL_SPI_TransmitReceive+0x342>
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	3301      	adds	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_SPI_TransmitReceive+0x348>
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800262c:	2323      	movs	r3, #35	; 0x23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2203      	movs	r2, #3
 8002632:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	225d      	movs	r2, #93	; 0x5d
 8002638:	2101      	movs	r1, #1
 800263a:	5499      	strb	r1, [r3, r2]
        goto error;
 800263c:	e026      	b.n	800268c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d199      	bne.n	800257c <HAL_SPI_TransmitReceive+0x298>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2246      	movs	r2, #70	; 0x46
 800264c:	5a9b      	ldrh	r3, [r3, r2]
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d193      	bne.n	800257c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f9b2 	bl	80029c4 <SPI_EndRxTxTransaction>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d006      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002664:	2323      	movs	r3, #35	; 0x23
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800267a:	2323      	movs	r3, #35	; 0x23
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e003      	b.n	800268c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	225d      	movs	r2, #93	; 0x5d
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	225c      	movs	r2, #92	; 0x5c
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002694:	2323      	movs	r3, #35	; 0x23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	781b      	ldrb	r3, [r3, #0]
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b00a      	add	sp, #40	; 0x28
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	ffffefff 	.word	0xffffefff

080026a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026b8:	f7fe f9bc 	bl	8000a34 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026c8:	f7fe f9b4 	bl	8000a34 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026d0:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	0d1b      	lsrs	r3, r3, #20
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	4353      	muls	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026de:	e058      	b.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	d055      	beq.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026e6:	f7fe f9a5 	bl	8000a34 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d902      	bls.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d142      	bne.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	21e0      	movs	r1, #224	; 0xe0
 8002708:	438a      	bics	r2, r1
 800270a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	2382      	movs	r3, #130	; 0x82
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	429a      	cmp	r2, r3
 8002716:	d113      	bne.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	429a      	cmp	r2, r3
 8002722:	d005      	beq.n	8002730 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	438a      	bics	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	019b      	lsls	r3, r3, #6
 8002748:	429a      	cmp	r2, r3
 800274a:	d110      	bne.n	800276e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	491a      	ldr	r1, [pc, #104]	; (80027c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	0189      	lsls	r1, r1, #6
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	225d      	movs	r2, #93	; 0x5d
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	225c      	movs	r2, #92	; 0x5c
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e017      	b.n	80027b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3b01      	subs	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	425a      	negs	r2, r3
 80027a2:	4153      	adcs	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	001a      	movs	r2, r3
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d197      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b008      	add	sp, #32
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	20000000 	.word	0x20000000
 80027c0:	ffffdfff 	.word	0xffffdfff

080027c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80027d2:	2317      	movs	r3, #23
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027da:	f7fe f92b 	bl	8000a34 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	18d3      	adds	r3, r2, r3
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80027ea:	f7fe f923 	bl	8000a34 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	330c      	adds	r3, #12
 80027f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	0013      	movs	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	189b      	adds	r3, r3, r2
 8002804:	00da      	lsls	r2, r3, #3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	0d1b      	lsrs	r3, r3, #20
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	4353      	muls	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002810:	e068      	b.n	80028e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	23c0      	movs	r3, #192	; 0xc0
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	429a      	cmp	r2, r3
 800281a:	d10a      	bne.n	8002832 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	2117      	movs	r1, #23
 800282a:	187b      	adds	r3, r7, r1
 800282c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800282e:	187b      	adds	r3, r7, r1
 8002830:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	d055      	beq.n	80028e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002838:	f7fe f8fc 	bl	8000a34 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d142      	bne.n	80028d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	21e0      	movs	r1, #224	; 0xe0
 800285a:	438a      	bics	r2, r1
 800285c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	2382      	movs	r3, #130	; 0x82
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	429a      	cmp	r2, r3
 8002868:	d113      	bne.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xce>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	429a      	cmp	r2, r3
 8002874:	d005      	beq.n	8002882 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	429a      	cmp	r2, r3
 8002880:	d107      	bne.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2140      	movs	r1, #64	; 0x40
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	429a      	cmp	r2, r3
 800289c:	d110      	bne.n	80028c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0189      	lsls	r1, r1, #6
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	225d      	movs	r2, #93	; 0x5d
 80028c4:	2101      	movs	r1, #1
 80028c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	225c      	movs	r2, #92	; 0x5c
 80028cc:	2100      	movs	r1, #0
 80028ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e010      	b.n	80028f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d18e      	bne.n	8002812 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b00a      	add	sp, #40	; 0x28
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000000 	.word	0x20000000
 8002904:	ffffdfff 	.word	0xffffdfff

08002908 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	2382      	movs	r3, #130	; 0x82
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	429a      	cmp	r2, r3
 800291e:	d113      	bne.n	8002948 <SPI_EndRxTransaction+0x40>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	429a      	cmp	r2, r3
 800292a:	d005      	beq.n	8002938 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2140      	movs	r1, #64	; 0x40
 8002944:	438a      	bics	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	0013      	movs	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	f7ff fea7 	bl	80026a8 <SPI_WaitFlagStateUntilTimeout>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d007      	beq.n	800296e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	2220      	movs	r2, #32
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e026      	b.n	80029bc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	2382      	movs	r3, #130	; 0x82
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	429a      	cmp	r2, r3
 8002978:	d11f      	bne.n	80029ba <SPI_EndRxTransaction+0xb2>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	429a      	cmp	r2, r3
 8002984:	d005      	beq.n	8002992 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	429a      	cmp	r2, r3
 8002990:	d113      	bne.n	80029ba <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	23c0      	movs	r3, #192	; 0xc0
 8002996:	00d9      	lsls	r1, r3, #3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	0013      	movs	r3, r2
 80029a0:	2200      	movs	r2, #0
 80029a2:	f7ff ff0f 	bl	80027c4 <SPI_WaitFifoStateUntilTimeout>
 80029a6:	1e03      	subs	r3, r0, #0
 80029a8:	d007      	beq.n	80029ba <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	2220      	movs	r2, #32
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e000      	b.n	80029bc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	23c0      	movs	r3, #192	; 0xc0
 80029d4:	0159      	lsls	r1, r3, #5
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	0013      	movs	r3, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	f7ff fef0 	bl	80027c4 <SPI_WaitFifoStateUntilTimeout>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d007      	beq.n	80029f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	2220      	movs	r2, #32
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e027      	b.n	8002a48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	0013      	movs	r3, r2
 8002a02:	2200      	movs	r2, #0
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	f7ff fe4f 	bl	80026a8 <SPI_WaitFlagStateUntilTimeout>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d007      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	2220      	movs	r2, #32
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e014      	b.n	8002a48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	23c0      	movs	r3, #192	; 0xc0
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f7ff fec9 	bl	80027c4 <SPI_WaitFifoStateUntilTimeout>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d007      	beq.n	8002a46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e000      	b.n	8002a48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e042      	b.n	8002ae8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223d      	movs	r2, #61	; 0x3d
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223c      	movs	r2, #60	; 0x3c
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fd fe73 	bl	8000764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223d      	movs	r2, #61	; 0x3d
 8002a82:	2102      	movs	r1, #2
 8002a84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f000 fa89 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2246      	movs	r2, #70	; 0x46
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223e      	movs	r2, #62	; 0x3e
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223f      	movs	r2, #63	; 0x3f
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2241      	movs	r2, #65	; 0x41
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2242      	movs	r2, #66	; 0x42
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2243      	movs	r2, #67	; 0x43
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2244      	movs	r2, #68	; 0x44
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2245      	movs	r2, #69	; 0x45
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223d      	movs	r2, #61	; 0x3d
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	223d      	movs	r2, #61	; 0x3d
 8002afc:	5c9b      	ldrb	r3, [r3, r2]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d001      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e03b      	b.n	8002b80 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	223d      	movs	r2, #61	; 0x3d
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_TIM_Base_Start_IT+0x98>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00f      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x5a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	05db      	lsls	r3, r3, #23
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d009      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x5a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x5a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d111      	bne.n	8002b6e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2207      	movs	r2, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d010      	beq.n	8002b7e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2101      	movs	r1, #1
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	e007      	b.n	8002b7e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40014000 	.word	0x40014000

08002b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d124      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d11d      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f9ce 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e007      	b.n	8002bee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f9c1 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f9cd 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d125      	bne.n	8002c4e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d11e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2205      	movs	r2, #5
 8002c16:	4252      	negs	r2, r2
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	23c0      	movs	r3, #192	; 0xc0
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 f9a1 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 f994 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 f9a0 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2208      	movs	r2, #8
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d124      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2208      	movs	r2, #8
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11d      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2209      	movs	r2, #9
 8002c70:	4252      	negs	r2, r2
 8002c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2204      	movs	r2, #4
 8002c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f975 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002c8e:	e007      	b.n	8002ca0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 f968 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f974 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2210      	movs	r2, #16
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d125      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2210      	movs	r2, #16
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d11e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2211      	movs	r2, #17
 8002cc8:	4252      	negs	r2, r2
 8002cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2208      	movs	r2, #8
 8002cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f948 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e007      	b.n	8002cfa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 f93b 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f947 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10f      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d108      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2202      	movs	r2, #2
 8002d22:	4252      	negs	r2, r2
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fd fc17 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d10f      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d108      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2281      	movs	r2, #129	; 0x81
 8002d50:	4252      	negs	r2, r2
 8002d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 faa6 	bl	80032a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d10f      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d108      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2241      	movs	r2, #65	; 0x41
 8002d7e:	4252      	negs	r2, r2
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f907 	bl	8002f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2220      	movs	r2, #32
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d10f      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d108      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2221      	movs	r2, #33	; 0x21
 8002dac:	4252      	negs	r2, r2
 8002dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fa70 	bl	8003298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	230f      	movs	r3, #15
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223c      	movs	r2, #60	; 0x3c
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIM_ConfigClockSource+0x20>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e0bc      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x19a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223c      	movs	r2, #60	; 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	223d      	movs	r2, #61	; 0x3d
 8002dec:	2102      	movs	r1, #2
 8002dee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2277      	movs	r2, #119	; 0x77
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	0192      	lsls	r2, r2, #6
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xde>
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	0192      	lsls	r2, r2, #6
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d900      	bls.n	8002e26 <HAL_TIM_ConfigClockSource+0x66>
 8002e24:	e088      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	0152      	lsls	r2, r2, #5
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d100      	bne.n	8002e30 <HAL_TIM_ConfigClockSource+0x70>
 8002e2e:	e088      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x182>
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	0152      	lsls	r2, r2, #5
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d900      	bls.n	8002e3a <HAL_TIM_ConfigClockSource+0x7a>
 8002e38:	e07e      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e3a:	2b70      	cmp	r3, #112	; 0x70
 8002e3c:	d018      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xb0>
 8002e3e:	d900      	bls.n	8002e42 <HAL_TIM_ConfigClockSource+0x82>
 8002e40:	e07a      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e42:	2b60      	cmp	r3, #96	; 0x60
 8002e44:	d04f      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x126>
 8002e46:	d900      	bls.n	8002e4a <HAL_TIM_ConfigClockSource+0x8a>
 8002e48:	e076      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e4a:	2b50      	cmp	r3, #80	; 0x50
 8002e4c:	d03b      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x106>
 8002e4e:	d900      	bls.n	8002e52 <HAL_TIM_ConfigClockSource+0x92>
 8002e50:	e072      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d057      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x146>
 8002e56:	d900      	bls.n	8002e5a <HAL_TIM_ConfigClockSource+0x9a>
 8002e58:	e06e      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e5a:	2b30      	cmp	r3, #48	; 0x30
 8002e5c:	d063      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x166>
 8002e5e:	d86b      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d060      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x166>
 8002e64:	d868      	bhi.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d05d      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x166>
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d05b      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x166>
 8002e6e:	e063      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	f000 f98c 	bl	800319c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2277      	movs	r2, #119	; 0x77
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]
      break;
 8002e9c:	e052      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	f000 f975 	bl	800319c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	01c9      	lsls	r1, r1, #7
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
      break;
 8002ec4:	e03e      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	f000 f8e8 	bl	80030a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2150      	movs	r1, #80	; 0x50
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f942 	bl	8003168 <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e02e      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	f000 f906 	bl	8003104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2160      	movs	r1, #96	; 0x60
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f932 	bl	8003168 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e01e      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	001a      	movs	r2, r3
 8002f14:	f000 f8c8 	bl	80030a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f922 	bl	8003168 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e00e      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0019      	movs	r1, r3
 8002f30:	0010      	movs	r0, r2
 8002f32:	f000 f919 	bl	8003168 <TIM_ITRx_SetConfig>
      break;
 8002f36:	e005      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
      break;
 8002f40:	e000      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	223d      	movs	r2, #61	; 0x3d
 8002f48:	2101      	movs	r1, #1
 8002f4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	223c      	movs	r2, #60	; 0x3c
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

  return status;
 8002f54:	230f      	movs	r3, #15
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	ffff00ff 	.word	0xffff00ff

08002f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <TIM_Base_SetConfig+0xe4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d008      	beq.n	8002fd2 <TIM_Base_SetConfig+0x2a>
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0x2a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a30      	ldr	r2, [pc, #192]	; (8003090 <TIM_Base_SetConfig+0xe8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2270      	movs	r2, #112	; 0x70
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a29      	ldr	r2, [pc, #164]	; (800308c <TIM_Base_SetConfig+0xe4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <TIM_Base_SetConfig+0x76>
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	05db      	lsls	r3, r3, #23
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d013      	beq.n	800301e <TIM_Base_SetConfig+0x76>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <TIM_Base_SetConfig+0xe8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_Base_SetConfig+0x76>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <TIM_Base_SetConfig+0xec>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0x76>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <TIM_Base_SetConfig+0xf0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0x76>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a22      	ldr	r2, [pc, #136]	; (800309c <TIM_Base_SetConfig+0xf4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0x76>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <TIM_Base_SetConfig+0xf8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <TIM_Base_SetConfig+0xfc>)
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	4393      	bics	r3, r2
 8003036:	001a      	movs	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a0c      	ldr	r2, [pc, #48]	; (800308c <TIM_Base_SetConfig+0xe4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00b      	beq.n	8003076 <TIM_Base_SetConfig+0xce>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <TIM_Base_SetConfig+0xf0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0xce>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <TIM_Base_SetConfig+0xf4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0xce>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <TIM_Base_SetConfig+0xf8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d103      	bne.n	800307e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	615a      	str	r2, [r3, #20]
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400
 8003094:	40002000 	.word	0x40002000
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800
 80030a4:	fffffcff 	.word	0xfffffcff

080030a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	2201      	movs	r2, #1
 80030c0:	4393      	bics	r3, r2
 80030c2:	001a      	movs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	22f0      	movs	r2, #240	; 0xf0
 80030d2:	4393      	bics	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	220a      	movs	r2, #10
 80030e4:	4393      	bics	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b006      	add	sp, #24
 8003102:	bd80      	pop	{r7, pc}

08003104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	2210      	movs	r2, #16
 8003116:	4393      	bics	r3, r2
 8003118:	001a      	movs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <TIM_TI2_ConfigInputStage+0x60>)
 800312e:	4013      	ands	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	031b      	lsls	r3, r3, #12
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	22a0      	movs	r2, #160	; 0xa0
 8003140:	4393      	bics	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	b006      	add	sp, #24
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	ffff0fff 	.word	0xffff0fff

08003168 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2270      	movs	r2, #112	; 0x70
 800317c:	4393      	bics	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	2207      	movs	r2, #7
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	609a      	str	r2, [r3, #8]
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <TIM_ETR_SetConfig+0x3c>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	021a      	lsls	r2, r3, #8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	431a      	orrs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b006      	add	sp, #24
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	ffff00ff 	.word	0xffff00ff

080031dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	223c      	movs	r2, #60	; 0x3c
 80031ea:	5c9b      	ldrb	r3, [r3, r2]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e047      	b.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	223c      	movs	r2, #60	; 0x3c
 80031f8:	2101      	movs	r1, #1
 80031fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	223d      	movs	r2, #61	; 0x3d
 8003200:	2102      	movs	r1, #2
 8003202:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2270      	movs	r2, #112	; 0x70
 8003218:	4393      	bics	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00f      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	05db      	lsls	r3, r3, #23
 8003240:	429a      	cmp	r2, r3
 8003242:	d009      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10c      	bne.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	4393      	bics	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223d      	movs	r2, #61	; 0x3d
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	223c      	movs	r2, #60	; 0x3c
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40000400 	.word	0x40000400
 8003294:	40014000 	.word	0x40014000

08003298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e044      	b.n	8003354 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2278      	movs	r2, #120	; 0x78
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd fa65 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2224      	movs	r2, #36	; 0x24
 80032e6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	438a      	bics	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 fbcc 	bl	8003a98 <UART_SetConfig>
 8003300:	0003      	movs	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e024      	b.n	8003354 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 fda7 	bl	8003e68 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	490d      	ldr	r1, [pc, #52]	; (800335c <HAL_UART_Init+0xa4>)
 8003326:	400a      	ands	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	212a      	movs	r1, #42	; 0x2a
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 fe3f 	bl	8003fd0 <UART_CheckIdleState>
 8003352:	0003      	movs	r3, r0
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	ffffb7ff 	.word	0xffffb7ff

08003360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	1dbb      	adds	r3, r7, #6
 800336e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003374:	2b20      	cmp	r3, #32
 8003376:	d000      	beq.n	800337a <HAL_UART_Transmit+0x1a>
 8003378:	e08d      	b.n	8003496 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_UART_Transmit+0x28>
 8003380:	1dbb      	adds	r3, r7, #6
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e085      	b.n	8003498 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	429a      	cmp	r2, r3
 8003396:	d109      	bne.n	80033ac <HAL_UART_Transmit+0x4c>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	d001      	beq.n	80033ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e075      	b.n	8003498 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2284      	movs	r2, #132	; 0x84
 80033b0:	2100      	movs	r1, #0
 80033b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2221      	movs	r2, #33	; 0x21
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ba:	f7fd fb3b 	bl	8000a34 <HAL_GetTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1dba      	adds	r2, r7, #6
 80033c6:	2150      	movs	r1, #80	; 0x50
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1dba      	adds	r2, r7, #6
 80033d0:	2152      	movs	r1, #82	; 0x52
 80033d2:	8812      	ldrh	r2, [r2, #0]
 80033d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	015b      	lsls	r3, r3, #5
 80033de:	429a      	cmp	r2, r3
 80033e0:	d108      	bne.n	80033f4 <HAL_UART_Transmit+0x94>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e003      	b.n	80033fc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033fc:	e030      	b.n	8003460 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	0013      	movs	r3, r2
 8003408:	2200      	movs	r2, #0
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	f000 fe88 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d004      	beq.n	800341e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e03c      	b.n	8003498 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	05d2      	lsls	r2, r2, #23
 800342e:	0dd2      	lsrs	r2, r2, #23
 8003430:	b292      	uxth	r2, r2
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	3302      	adds	r3, #2
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e008      	b.n	800344e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b292      	uxth	r2, r2
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3301      	adds	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2252      	movs	r2, #82	; 0x52
 8003452:	5a9b      	ldrh	r3, [r3, r2]
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b299      	uxth	r1, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2252      	movs	r2, #82	; 0x52
 800345e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2252      	movs	r2, #82	; 0x52
 8003464:	5a9b      	ldrh	r3, [r3, r2]
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1c8      	bne.n	80033fe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	0013      	movs	r3, r2
 8003476:	2200      	movs	r2, #0
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	f000 fe51 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d004      	beq.n	800348c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e005      	b.n	8003498 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b008      	add	sp, #32
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b0ab      	sub	sp, #172	; 0xac
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	22a4      	movs	r2, #164	; 0xa4
 80034b0:	18b9      	adds	r1, r7, r2
 80034b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	20a0      	movs	r0, #160	; 0xa0
 80034bc:	1839      	adds	r1, r7, r0
 80034be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	219c      	movs	r1, #156	; 0x9c
 80034c8:	1879      	adds	r1, r7, r1
 80034ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034cc:	0011      	movs	r1, r2
 80034ce:	18bb      	adds	r3, r7, r2
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a99      	ldr	r2, [pc, #612]	; (8003738 <HAL_UART_IRQHandler+0x298>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	2298      	movs	r2, #152	; 0x98
 80034d8:	18bc      	adds	r4, r7, r2
 80034da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80034dc:	18bb      	adds	r3, r7, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d114      	bne.n	800350e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	4013      	ands	r3, r2
 80034ec:	d00f      	beq.n	800350e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ee:	183b      	adds	r3, r7, r0
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2220      	movs	r2, #32
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00a      	beq.n	800350e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d100      	bne.n	8003502 <HAL_UART_IRQHandler+0x62>
 8003500:	e29e      	b.n	8003a40 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	0010      	movs	r0, r2
 800350a:	4798      	blx	r3
      }
      return;
 800350c:	e298      	b.n	8003a40 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800350e:	2398      	movs	r3, #152	; 0x98
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d100      	bne.n	800351a <HAL_UART_IRQHandler+0x7a>
 8003518:	e114      	b.n	8003744 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800351a:	239c      	movs	r3, #156	; 0x9c
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d106      	bne.n	8003534 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003526:	23a0      	movs	r3, #160	; 0xa0
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_UART_IRQHandler+0x29c>)
 800352e:	4013      	ands	r3, r2
 8003530:	d100      	bne.n	8003534 <HAL_UART_IRQHandler+0x94>
 8003532:	e107      	b.n	8003744 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003534:	23a4      	movs	r3, #164	; 0xa4
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	4013      	ands	r3, r2
 800353e:	d012      	beq.n	8003566 <HAL_UART_IRQHandler+0xc6>
 8003540:	23a0      	movs	r3, #160	; 0xa0
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4013      	ands	r3, r2
 800354c:	d00b      	beq.n	8003566 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2284      	movs	r2, #132	; 0x84
 800355a:	589b      	ldr	r3, [r3, r2]
 800355c:	2201      	movs	r2, #1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2184      	movs	r1, #132	; 0x84
 8003564:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003566:	23a4      	movs	r3, #164	; 0xa4
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d011      	beq.n	8003596 <HAL_UART_IRQHandler+0xf6>
 8003572:	239c      	movs	r3, #156	; 0x9c
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d00b      	beq.n	8003596 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2202      	movs	r2, #2
 8003584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2284      	movs	r2, #132	; 0x84
 800358a:	589b      	ldr	r3, [r3, r2]
 800358c:	2204      	movs	r2, #4
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2184      	movs	r1, #132	; 0x84
 8003594:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003596:	23a4      	movs	r3, #164	; 0xa4
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2204      	movs	r2, #4
 800359e:	4013      	ands	r3, r2
 80035a0:	d011      	beq.n	80035c6 <HAL_UART_IRQHandler+0x126>
 80035a2:	239c      	movs	r3, #156	; 0x9c
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2204      	movs	r2, #4
 80035b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2284      	movs	r2, #132	; 0x84
 80035ba:	589b      	ldr	r3, [r3, r2]
 80035bc:	2202      	movs	r2, #2
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2184      	movs	r1, #132	; 0x84
 80035c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035c6:	23a4      	movs	r3, #164	; 0xa4
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2208      	movs	r2, #8
 80035ce:	4013      	ands	r3, r2
 80035d0:	d017      	beq.n	8003602 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035d2:	23a0      	movs	r3, #160	; 0xa0
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2220      	movs	r2, #32
 80035da:	4013      	ands	r3, r2
 80035dc:	d105      	bne.n	80035ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035de:	239c      	movs	r3, #156	; 0x9c
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035e8:	d00b      	beq.n	8003602 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2208      	movs	r2, #8
 80035f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2284      	movs	r2, #132	; 0x84
 80035f6:	589b      	ldr	r3, [r3, r2]
 80035f8:	2208      	movs	r2, #8
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2184      	movs	r1, #132	; 0x84
 8003600:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003602:	23a4      	movs	r3, #164	; 0xa4
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	4013      	ands	r3, r2
 800360e:	d013      	beq.n	8003638 <HAL_UART_IRQHandler+0x198>
 8003610:	23a0      	movs	r3, #160	; 0xa0
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	04db      	lsls	r3, r3, #19
 800361a:	4013      	ands	r3, r2
 800361c:	d00c      	beq.n	8003638 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2284      	movs	r2, #132	; 0x84
 800362c:	589b      	ldr	r3, [r3, r2]
 800362e:	2220      	movs	r2, #32
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2184      	movs	r1, #132	; 0x84
 8003636:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2284      	movs	r2, #132	; 0x84
 800363c:	589b      	ldr	r3, [r3, r2]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d100      	bne.n	8003644 <HAL_UART_IRQHandler+0x1a4>
 8003642:	e1ff      	b.n	8003a44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003644:	23a4      	movs	r3, #164	; 0xa4
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2220      	movs	r2, #32
 800364c:	4013      	ands	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003650:	23a0      	movs	r3, #160	; 0xa0
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2220      	movs	r2, #32
 8003658:	4013      	ands	r3, r2
 800365a:	d008      	beq.n	800366e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	0010      	movs	r0, r2
 800366c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2284      	movs	r2, #132	; 0x84
 8003672:	589b      	ldr	r3, [r3, r2]
 8003674:	2194      	movs	r1, #148	; 0x94
 8003676:	187a      	adds	r2, r7, r1
 8003678:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2240      	movs	r2, #64	; 0x40
 8003682:	4013      	ands	r3, r2
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d004      	beq.n	8003692 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003688:	187b      	adds	r3, r7, r1
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2228      	movs	r2, #40	; 0x28
 800368e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003690:	d047      	beq.n	8003722 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f000 fdad 	bl	80041f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d137      	bne.n	8003718 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80036ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b0:	2090      	movs	r0, #144	; 0x90
 80036b2:	183a      	adds	r2, r7, r0
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2140      	movs	r1, #64	; 0x40
 80036ce:	438a      	bics	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	183b      	adds	r3, r7, r0
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d012      	beq.n	800370e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_UART_IRQHandler+0x2a0>)
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd fabd 	bl	8000c74 <HAL_DMA_Abort_IT>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d01a      	beq.n	8003734 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	0018      	movs	r0, r3
 800370a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	e012      	b.n	8003734 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0018      	movs	r0, r3
 8003712:	f000 f9ad 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003716:	e00d      	b.n	8003734 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f000 f9a8 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e008      	b.n	8003734 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f9a3 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2284      	movs	r2, #132	; 0x84
 800372e:	2100      	movs	r1, #0
 8003730:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003732:	e187      	b.n	8003a44 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	46c0      	nop			; (mov r8, r8)
    return;
 8003736:	e185      	b.n	8003a44 <HAL_UART_IRQHandler+0x5a4>
 8003738:	0000080f 	.word	0x0000080f
 800373c:	04000120 	.word	0x04000120
 8003740:	080042bd 	.word	0x080042bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	2b01      	cmp	r3, #1
 800374a:	d000      	beq.n	800374e <HAL_UART_IRQHandler+0x2ae>
 800374c:	e139      	b.n	80039c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800374e:	23a4      	movs	r3, #164	; 0xa4
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2210      	movs	r2, #16
 8003756:	4013      	ands	r3, r2
 8003758:	d100      	bne.n	800375c <HAL_UART_IRQHandler+0x2bc>
 800375a:	e132      	b.n	80039c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800375c:	23a0      	movs	r3, #160	; 0xa0
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2210      	movs	r2, #16
 8003764:	4013      	ands	r3, r2
 8003766:	d100      	bne.n	800376a <HAL_UART_IRQHandler+0x2ca>
 8003768:	e12b      	b.n	80039c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2210      	movs	r2, #16
 8003770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	4013      	ands	r3, r2
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d000      	beq.n	8003782 <HAL_UART_IRQHandler+0x2e2>
 8003780:	e09f      	b.n	80038c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	217e      	movs	r1, #126	; 0x7e
 800378c:	187b      	adds	r3, r7, r1
 800378e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003790:	187b      	adds	r3, r7, r1
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d100      	bne.n	800379a <HAL_UART_IRQHandler+0x2fa>
 8003798:	e156      	b.n	8003a48 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2258      	movs	r2, #88	; 0x58
 800379e:	5a9b      	ldrh	r3, [r3, r2]
 80037a0:	187a      	adds	r2, r7, r1
 80037a2:	8812      	ldrh	r2, [r2, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d300      	bcc.n	80037aa <HAL_UART_IRQHandler+0x30a>
 80037a8:	e14e      	b.n	8003a48 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	187a      	adds	r2, r7, r1
 80037ae:	215a      	movs	r1, #90	; 0x5a
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d06f      	beq.n	800389e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037be:	f3ef 8310 	mrs	r3, PRIMASK
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80037c8:	2301      	movs	r3, #1
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	499e      	ldr	r1, [pc, #632]	; (8003a58 <HAL_UART_IRQHandler+0x5b8>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80037f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	677b      	str	r3, [r7, #116]	; 0x74
 80037fa:	2301      	movs	r3, #1
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	438a      	bics	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003822:	f3ef 8310 	mrs	r3, PRIMASK
 8003826:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003828:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	673b      	str	r3, [r7, #112]	; 0x70
 800382c:	2301      	movs	r3, #1
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	438a      	bics	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800384a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	f383 8810 	msr	PRIMASK, r3
}
 8003852:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	2120      	movs	r1, #32
 800385a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003862:	f3ef 8310 	mrs	r3, PRIMASK
 8003866:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003868:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800386c:	2301      	movs	r3, #1
 800386e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2110      	movs	r1, #16
 8003884:	438a      	bics	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	0018      	movs	r0, r3
 800389a:	f7fd f9b3 	bl	8000c04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2258      	movs	r2, #88	; 0x58
 80038a8:	5a9a      	ldrh	r2, [r3, r2]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	215a      	movs	r1, #90	; 0x5a
 80038ae:	5a5b      	ldrh	r3, [r3, r1]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0011      	movs	r1, r2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 f8e0 	bl	8003a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038c0:	e0c2      	b.n	8003a48 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2258      	movs	r2, #88	; 0x58
 80038c6:	5a99      	ldrh	r1, [r3, r2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	225a      	movs	r2, #90	; 0x5a
 80038cc:	5a9b      	ldrh	r3, [r3, r2]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	208e      	movs	r0, #142	; 0x8e
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	1a8a      	subs	r2, r1, r2
 80038d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	225a      	movs	r2, #90	; 0x5a
 80038dc:	5a9b      	ldrh	r3, [r3, r2]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d100      	bne.n	80038e6 <HAL_UART_IRQHandler+0x446>
 80038e4:	e0b2      	b.n	8003a4c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80038e6:	183b      	adds	r3, r7, r0
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d100      	bne.n	80038f0 <HAL_UART_IRQHandler+0x450>
 80038ee:	e0ad      	b.n	8003a4c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80038f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f8:	2488      	movs	r4, #136	; 0x88
 80038fa:	193a      	adds	r2, r7, r4
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	2301      	movs	r3, #1
 8003900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4951      	ldr	r1, [pc, #324]	; (8003a5c <HAL_UART_IRQHandler+0x5bc>)
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	193b      	adds	r3, r7, r4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003928:	f3ef 8310 	mrs	r3, PRIMASK
 800392c:	61bb      	str	r3, [r7, #24]
  return(result);
 800392e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	2484      	movs	r4, #132	; 0x84
 8003932:	193a      	adds	r2, r7, r4
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	2301      	movs	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f383 8810 	msr	PRIMASK, r3
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	438a      	bics	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	193b      	adds	r3, r7, r4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	2120      	movs	r1, #32
 8003966:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	2480      	movs	r4, #128	; 0x80
 800397e:	193a      	adds	r2, r7, r4
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2110      	movs	r1, #16
 800399a:	438a      	bics	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039b2:	183b      	adds	r3, r7, r0
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0011      	movs	r1, r2
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 f860 	bl	8003a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039c0:	e044      	b.n	8003a4c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039c2:	23a4      	movs	r3, #164	; 0xa4
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	035b      	lsls	r3, r3, #13
 80039cc:	4013      	ands	r3, r2
 80039ce:	d010      	beq.n	80039f2 <HAL_UART_IRQHandler+0x552>
 80039d0:	239c      	movs	r3, #156	; 0x9c
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	03db      	lsls	r3, r3, #15
 80039da:	4013      	ands	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	0352      	lsls	r2, r2, #13
 80039e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fca8 	bl	8004340 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039f0:	e02f      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039f2:	23a4      	movs	r3, #164	; 0xa4
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	4013      	ands	r3, r2
 80039fc:	d00f      	beq.n	8003a1e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039fe:	23a0      	movs	r3, #160	; 0xa0
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	4013      	ands	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01e      	beq.n	8003a50 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	0010      	movs	r0, r2
 8003a1a:	4798      	blx	r3
    }
    return;
 8003a1c:	e018      	b.n	8003a50 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a1e:	23a4      	movs	r3, #164	; 0xa4
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	4013      	ands	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
 8003a2a:	23a0      	movs	r3, #160	; 0xa0
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2240      	movs	r2, #64	; 0x40
 8003a32:	4013      	ands	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 fc56 	bl	80042ea <UART_EndTransmit_IT>
    return;
 8003a3e:	e008      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	e006      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	e004      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	e002      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	e000      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003a50:	46c0      	nop			; (mov r8, r8)
  }

}
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b02b      	add	sp, #172	; 0xac
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	fffffeff 	.word	0xfffffeff
 8003a5c:	fffffedf 	.word	0xfffffedf

08003a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	000a      	movs	r2, r1
 8003a8a:	1cbb      	adds	r3, r7, #2
 8003a8c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aa0:	231e      	movs	r3, #30
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4abe      	ldr	r2, [pc, #760]	; (8003dc0 <UART_SetConfig+0x328>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4ab9      	ldr	r2, [pc, #740]	; (8003dc4 <UART_SetConfig+0x32c>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4ab0      	ldr	r2, [pc, #704]	; (8003dc8 <UART_SetConfig+0x330>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	0019      	movs	r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4aac      	ldr	r2, [pc, #688]	; (8003dcc <UART_SetConfig+0x334>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d127      	bne.n	8003b6e <UART_SetConfig+0xd6>
 8003b1e:	4bac      	ldr	r3, [pc, #688]	; (8003dd0 <UART_SetConfig+0x338>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d00d      	beq.n	8003b46 <UART_SetConfig+0xae>
 8003b2a:	d81b      	bhi.n	8003b64 <UART_SetConfig+0xcc>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d014      	beq.n	8003b5a <UART_SetConfig+0xc2>
 8003b30:	d818      	bhi.n	8003b64 <UART_SetConfig+0xcc>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <UART_SetConfig+0xa4>
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d00a      	beq.n	8003b50 <UART_SetConfig+0xb8>
 8003b3a:	e013      	b.n	8003b64 <UART_SetConfig+0xcc>
 8003b3c:	231f      	movs	r3, #31
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e0bd      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003b46:	231f      	movs	r3, #31
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e0b8      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003b50:	231f      	movs	r3, #31
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2204      	movs	r2, #4
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e0b3      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003b5a:	231f      	movs	r3, #31
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2208      	movs	r2, #8
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e0ae      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003b64:	231f      	movs	r3, #31
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2210      	movs	r2, #16
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e0a9      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a98      	ldr	r2, [pc, #608]	; (8003dd4 <UART_SetConfig+0x33c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d134      	bne.n	8003be2 <UART_SetConfig+0x14a>
 8003b78:	4b95      	ldr	r3, [pc, #596]	; (8003dd0 <UART_SetConfig+0x338>)
 8003b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7c:	23c0      	movs	r3, #192	; 0xc0
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	4013      	ands	r3, r2
 8003b82:	22c0      	movs	r2, #192	; 0xc0
 8003b84:	0292      	lsls	r2, r2, #10
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d017      	beq.n	8003bba <UART_SetConfig+0x122>
 8003b8a:	22c0      	movs	r2, #192	; 0xc0
 8003b8c:	0292      	lsls	r2, r2, #10
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d822      	bhi.n	8003bd8 <UART_SetConfig+0x140>
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	0292      	lsls	r2, r2, #10
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d019      	beq.n	8003bce <UART_SetConfig+0x136>
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	0292      	lsls	r2, r2, #10
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d81a      	bhi.n	8003bd8 <UART_SetConfig+0x140>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <UART_SetConfig+0x118>
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	0252      	lsls	r2, r2, #9
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00a      	beq.n	8003bc4 <UART_SetConfig+0x12c>
 8003bae:	e013      	b.n	8003bd8 <UART_SetConfig+0x140>
 8003bb0:	231f      	movs	r3, #31
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	e083      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003bba:	231f      	movs	r3, #31
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e07e      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003bc4:	231f      	movs	r3, #31
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2204      	movs	r2, #4
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e079      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003bce:	231f      	movs	r3, #31
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e074      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003bd8:	231f      	movs	r3, #31
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2210      	movs	r2, #16
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e06f      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <UART_SetConfig+0x340>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d134      	bne.n	8003c56 <UART_SetConfig+0x1be>
 8003bec:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <UART_SetConfig+0x338>)
 8003bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf0:	23c0      	movs	r3, #192	; 0xc0
 8003bf2:	031b      	lsls	r3, r3, #12
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	22c0      	movs	r2, #192	; 0xc0
 8003bf8:	0312      	lsls	r2, r2, #12
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d017      	beq.n	8003c2e <UART_SetConfig+0x196>
 8003bfe:	22c0      	movs	r2, #192	; 0xc0
 8003c00:	0312      	lsls	r2, r2, #12
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d822      	bhi.n	8003c4c <UART_SetConfig+0x1b4>
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	0312      	lsls	r2, r2, #12
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d019      	beq.n	8003c42 <UART_SetConfig+0x1aa>
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	0312      	lsls	r2, r2, #12
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d81a      	bhi.n	8003c4c <UART_SetConfig+0x1b4>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <UART_SetConfig+0x18c>
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	02d2      	lsls	r2, r2, #11
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00a      	beq.n	8003c38 <UART_SetConfig+0x1a0>
 8003c22:	e013      	b.n	8003c4c <UART_SetConfig+0x1b4>
 8003c24:	231f      	movs	r3, #31
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e049      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c2e:	231f      	movs	r3, #31
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	2202      	movs	r2, #2
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e044      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c38:	231f      	movs	r3, #31
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e03f      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c42:	231f      	movs	r3, #31
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	2208      	movs	r2, #8
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e03a      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c4c:	231f      	movs	r3, #31
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2210      	movs	r2, #16
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e035      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a60      	ldr	r2, [pc, #384]	; (8003ddc <UART_SetConfig+0x344>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d104      	bne.n	8003c6a <UART_SetConfig+0x1d2>
 8003c60:	231f      	movs	r3, #31
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e02b      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5c      	ldr	r2, [pc, #368]	; (8003de0 <UART_SetConfig+0x348>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d104      	bne.n	8003c7e <UART_SetConfig+0x1e6>
 8003c74:	231f      	movs	r3, #31
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e021      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <UART_SetConfig+0x34c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d104      	bne.n	8003c92 <UART_SetConfig+0x1fa>
 8003c88:	231f      	movs	r3, #31
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e017      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <UART_SetConfig+0x350>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d104      	bne.n	8003ca6 <UART_SetConfig+0x20e>
 8003c9c:	231f      	movs	r3, #31
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e00d      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a50      	ldr	r2, [pc, #320]	; (8003dec <UART_SetConfig+0x354>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d104      	bne.n	8003cba <UART_SetConfig+0x222>
 8003cb0:	231f      	movs	r3, #31
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e003      	b.n	8003cc2 <UART_SetConfig+0x22a>
 8003cba:	231f      	movs	r3, #31
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d15c      	bne.n	8003d88 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003cce:	231f      	movs	r3, #31
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d015      	beq.n	8003d04 <UART_SetConfig+0x26c>
 8003cd8:	dc18      	bgt.n	8003d0c <UART_SetConfig+0x274>
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00d      	beq.n	8003cfa <UART_SetConfig+0x262>
 8003cde:	dc15      	bgt.n	8003d0c <UART_SetConfig+0x274>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <UART_SetConfig+0x252>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d005      	beq.n	8003cf4 <UART_SetConfig+0x25c>
 8003ce8:	e010      	b.n	8003d0c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cea:	f7fd fe7b 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	61bb      	str	r3, [r7, #24]
        break;
 8003cf2:	e012      	b.n	8003d1a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <UART_SetConfig+0x358>)
 8003cf6:	61bb      	str	r3, [r7, #24]
        break;
 8003cf8:	e00f      	b.n	8003d1a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fd fdf7 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	61bb      	str	r3, [r7, #24]
        break;
 8003d02:	e00a      	b.n	8003d1a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	61bb      	str	r3, [r7, #24]
        break;
 8003d0a:	e006      	b.n	8003d1a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d10:	231e      	movs	r3, #30
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
        break;
 8003d18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d100      	bne.n	8003d22 <UART_SetConfig+0x28a>
 8003d20:	e095      	b.n	8003e4e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	005a      	lsls	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	18d2      	adds	r2, r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	0019      	movs	r1, r3
 8003d34:	0010      	movs	r0, r2
 8003d36:	f7fc f9ef 	bl	8000118 <__udivsi3>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b0f      	cmp	r3, #15
 8003d42:	d91c      	bls.n	8003d7e <UART_SetConfig+0x2e6>
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d217      	bcs.n	8003d7e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	200e      	movs	r0, #14
 8003d54:	183b      	adds	r3, r7, r0
 8003d56:	210f      	movs	r1, #15
 8003d58:	438a      	bics	r2, r1
 8003d5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2207      	movs	r2, #7
 8003d64:	4013      	ands	r3, r2
 8003d66:	b299      	uxth	r1, r3
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	183a      	adds	r2, r7, r0
 8003d6c:	8812      	ldrh	r2, [r2, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	183a      	adds	r2, r7, r0
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e067      	b.n	8003e4e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7e:	231e      	movs	r3, #30
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e062      	b.n	8003e4e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d88:	231f      	movs	r3, #31
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d030      	beq.n	8003df4 <UART_SetConfig+0x35c>
 8003d92:	dc33      	bgt.n	8003dfc <UART_SetConfig+0x364>
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d00d      	beq.n	8003db4 <UART_SetConfig+0x31c>
 8003d98:	dc30      	bgt.n	8003dfc <UART_SetConfig+0x364>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <UART_SetConfig+0x30c>
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d005      	beq.n	8003dae <UART_SetConfig+0x316>
 8003da2:	e02b      	b.n	8003dfc <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fd fe1e 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003da8:	0003      	movs	r3, r0
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e02d      	b.n	8003e0a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <UART_SetConfig+0x358>)
 8003db0:	61bb      	str	r3, [r7, #24]
        break;
 8003db2:	e02a      	b.n	8003e0a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db4:	f7fd fd9a 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8003db8:	0003      	movs	r3, r0
 8003dba:	61bb      	str	r3, [r7, #24]
        break;
 8003dbc:	e025      	b.n	8003e0a <UART_SetConfig+0x372>
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	efff69f3 	.word	0xefff69f3
 8003dc4:	ffffcfff 	.word	0xffffcfff
 8003dc8:	fffff4ff 	.word	0xfffff4ff
 8003dcc:	40013800 	.word	0x40013800
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40004400 	.word	0x40004400
 8003dd8:	40004800 	.word	0x40004800
 8003ddc:	40004c00 	.word	0x40004c00
 8003de0:	40005000 	.word	0x40005000
 8003de4:	40011400 	.word	0x40011400
 8003de8:	40011800 	.word	0x40011800
 8003dec:	40011c00 	.word	0x40011c00
 8003df0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	61bb      	str	r3, [r7, #24]
        break;
 8003dfa:	e006      	b.n	8003e0a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e00:	231e      	movs	r3, #30
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
        break;
 8003e08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01e      	beq.n	8003e4e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	085a      	lsrs	r2, r3, #1
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	18d2      	adds	r2, r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0019      	movs	r1, r3
 8003e20:	0010      	movs	r0, r2
 8003e22:	f7fc f979 	bl	8000118 <__udivsi3>
 8003e26:	0003      	movs	r3, r0
 8003e28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d90a      	bls.n	8003e46 <UART_SetConfig+0x3ae>
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d205      	bcs.n	8003e46 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	e003      	b.n	8003e4e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e46:	231e      	movs	r3, #30
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e5a:	231e      	movs	r3, #30
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b008      	add	sp, #32
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2201      	movs	r2, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a4a      	ldr	r2, [pc, #296]	; (8003fac <UART_AdvFeatureConfig+0x144>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <UART_AdvFeatureConfig+0x148>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2204      	movs	r2, #4
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <UART_AdvFeatureConfig+0x14c>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2208      	movs	r2, #8
 8003edc:	4013      	ands	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4a34      	ldr	r2, [pc, #208]	; (8003fb8 <UART_AdvFeatureConfig+0x150>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	0019      	movs	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2210      	movs	r2, #16
 8003efe:	4013      	ands	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <UART_AdvFeatureConfig+0x154>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2220      	movs	r2, #32
 8003f20:	4013      	ands	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <UART_AdvFeatureConfig+0x158>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	4013      	ands	r3, r2
 8003f44:	d01d      	beq.n	8003f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <UART_AdvFeatureConfig+0x15c>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	0019      	movs	r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	035b      	lsls	r3, r3, #13
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10b      	bne.n	8003f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <UART_AdvFeatureConfig+0x160>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <UART_AdvFeatureConfig+0x164>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	fffdffff 	.word	0xfffdffff
 8003fb0:	fffeffff 	.word	0xfffeffff
 8003fb4:	fffbffff 	.word	0xfffbffff
 8003fb8:	ffff7fff 	.word	0xffff7fff
 8003fbc:	ffffefff 	.word	0xffffefff
 8003fc0:	ffffdfff 	.word	0xffffdfff
 8003fc4:	ffefffff 	.word	0xffefffff
 8003fc8:	ff9fffff 	.word	0xff9fffff
 8003fcc:	fff7ffff 	.word	0xfff7ffff

08003fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b092      	sub	sp, #72	; 0x48
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2284      	movs	r2, #132	; 0x84
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fe0:	f7fc fd28 	bl	8000a34 <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2208      	movs	r2, #8
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d12c      	bne.n	8004050 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	0391      	lsls	r1, r2, #14
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4a46      	ldr	r2, [pc, #280]	; (8004118 <UART_CheckIdleState+0x148>)
 8004000:	9200      	str	r2, [sp, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	f000 f88c 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004008:	1e03      	subs	r3, r0, #0
 800400a:	d021      	beq.n	8004050 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400c:	f3ef 8310 	mrs	r3, PRIMASK
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38
 8004016:	2301      	movs	r3, #1
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	438a      	bics	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2278      	movs	r2, #120	; 0x78
 8004048:	2100      	movs	r1, #0
 800404a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e05f      	b.n	8004110 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2204      	movs	r2, #4
 8004058:	4013      	ands	r3, r2
 800405a:	2b04      	cmp	r3, #4
 800405c:	d146      	bne.n	80040ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	03d1      	lsls	r1, r2, #15
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <UART_CheckIdleState+0x148>)
 8004068:	9200      	str	r2, [sp, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	f000 f858 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d03b      	beq.n	80040ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004074:	f3ef 8310 	mrs	r3, PRIMASK
 8004078:	60fb      	str	r3, [r7, #12]
  return(result);
 800407a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	2301      	movs	r3, #1
 8004080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4921      	ldr	r1, [pc, #132]	; (800411c <UART_CheckIdleState+0x14c>)
 8004096:	400a      	ands	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f383 8810 	msr	PRIMASK, r3
}
 80040a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a6:	f3ef 8310 	mrs	r3, PRIMASK
 80040aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80040ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
 80040b0:	2301      	movs	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f383 8810 	msr	PRIMASK, r3
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2101      	movs	r1, #1
 80040c8:	438a      	bics	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	2120      	movs	r1, #32
 80040de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2278      	movs	r2, #120	; 0x78
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e011      	b.n	8004110 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	2120      	movs	r1, #32
 80040f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2278      	movs	r2, #120	; 0x78
 800410a:	2100      	movs	r1, #0
 800410c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b010      	add	sp, #64	; 0x40
 8004116:	bd80      	pop	{r7, pc}
 8004118:	01ffffff 	.word	0x01ffffff
 800411c:	fffffedf 	.word	0xfffffedf

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e04b      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3301      	adds	r3, #1
 8004136:	d048      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fc fc7c 	bl	8000a34 <HAL_GetTick>
 800413c:	0002      	movs	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04b      	b.n	80041ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2204      	movs	r2, #4
 800415a:	4013      	ands	r3, r2
 800415c:	d035      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	2208      	movs	r2, #8
 8004166:	4013      	ands	r3, r2
 8004168:	2b08      	cmp	r3, #8
 800416a:	d111      	bne.n	8004190 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2208      	movs	r2, #8
 8004172:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	0018      	movs	r0, r3
 8004178:	f000 f83c 	bl	80041f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2284      	movs	r2, #132	; 0x84
 8004180:	2108      	movs	r1, #8
 8004182:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2278      	movs	r2, #120	; 0x78
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e02c      	b.n	80041ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	401a      	ands	r2, r3
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d112      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	0112      	lsls	r2, r2, #4
 80041ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 f81f 	bl	80041f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2284      	movs	r2, #132	; 0x84
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2278      	movs	r2, #120	; 0x78
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e00f      	b.n	80041ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	425a      	negs	r2, r3
 80041da:	4153      	adcs	r3, r2
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	001a      	movs	r2, r3
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d0a4      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b004      	add	sp, #16
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004200:	617b      	str	r3, [r7, #20]
  return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
 8004206:	2301      	movs	r3, #1
 8004208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4926      	ldr	r1, [pc, #152]	; (80042b8 <UART_EndRxTransfer+0xc4>)
 800421e:	400a      	ands	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f383 8810 	msr	PRIMASK, r3
}
 800422c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422e:	f3ef 8310 	mrs	r3, PRIMASK
 8004232:	623b      	str	r3, [r7, #32]
  return(result);
 8004234:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
 8004238:	2301      	movs	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	f383 8810 	msr	PRIMASK, r3
}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2101      	movs	r1, #1
 8004250:	438a      	bics	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	f383 8810 	msr	PRIMASK, r3
}
 800425e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004264:	2b01      	cmp	r3, #1
 8004266:	d118      	bne.n	800429a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004268:	f3ef 8310 	mrs	r3, PRIMASK
 800426c:	60bb      	str	r3, [r7, #8]
  return(result);
 800426e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004272:	2301      	movs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f383 8810 	msr	PRIMASK, r3
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2110      	movs	r1, #16
 800428a:	438a      	bics	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f383 8810 	msr	PRIMASK, r3
}
 8004298:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	2120      	movs	r1, #32
 80042a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b00e      	add	sp, #56	; 0x38
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	fffffedf 	.word	0xfffffedf

080042bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	225a      	movs	r2, #90	; 0x5a
 80042ce:	2100      	movs	r1, #0
 80042d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2252      	movs	r2, #82	; 0x52
 80042d6:	2100      	movs	r1, #0
 80042d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff fbc7 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	2301      	movs	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2140      	movs	r1, #64	; 0x40
 8004314:	438a      	bics	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fb94 	bl	8003a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b006      	add	sp, #24
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <siprintf>:
 8004350:	b40e      	push	{r1, r2, r3}
 8004352:	b500      	push	{lr}
 8004354:	490b      	ldr	r1, [pc, #44]	; (8004384 <siprintf+0x34>)
 8004356:	b09c      	sub	sp, #112	; 0x70
 8004358:	ab1d      	add	r3, sp, #116	; 0x74
 800435a:	9002      	str	r0, [sp, #8]
 800435c:	9006      	str	r0, [sp, #24]
 800435e:	9107      	str	r1, [sp, #28]
 8004360:	9104      	str	r1, [sp, #16]
 8004362:	4809      	ldr	r0, [pc, #36]	; (8004388 <siprintf+0x38>)
 8004364:	4909      	ldr	r1, [pc, #36]	; (800438c <siprintf+0x3c>)
 8004366:	cb04      	ldmia	r3!, {r2}
 8004368:	9105      	str	r1, [sp, #20]
 800436a:	6800      	ldr	r0, [r0, #0]
 800436c:	a902      	add	r1, sp, #8
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	f000 f9a2 	bl	80046b8 <_svfiprintf_r>
 8004374:	2200      	movs	r2, #0
 8004376:	9b02      	ldr	r3, [sp, #8]
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	b01c      	add	sp, #112	; 0x70
 800437c:	bc08      	pop	{r3}
 800437e:	b003      	add	sp, #12
 8004380:	4718      	bx	r3
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	7fffffff 	.word	0x7fffffff
 8004388:	20000058 	.word	0x20000058
 800438c:	ffff0208 	.word	0xffff0208

08004390 <memset>:
 8004390:	0003      	movs	r3, r0
 8004392:	1882      	adds	r2, r0, r2
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	7019      	strb	r1, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	20000058 	.word	0x20000058

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2600      	movs	r6, #0
 80043b0:	4c0c      	ldr	r4, [pc, #48]	; (80043e4 <__libc_init_array+0x38>)
 80043b2:	4d0d      	ldr	r5, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	2600      	movs	r6, #0
 80043be:	f000 fc6d 	bl	8004c9c <_init>
 80043c2:	4c0a      	ldr	r4, [pc, #40]	; (80043ec <__libc_init_array+0x40>)
 80043c4:	4d0a      	ldr	r5, [pc, #40]	; (80043f0 <__libc_init_array+0x44>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	00b3      	lsls	r3, r6, #2
 80043d2:	58eb      	ldr	r3, [r5, r3]
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	00b3      	lsls	r3, r6, #2
 80043dc:	58eb      	ldr	r3, [r5, r3]
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08004d2c 	.word	0x08004d2c
 80043e8:	08004d2c 	.word	0x08004d2c
 80043ec:	08004d30 	.word	0x08004d30
 80043f0:	08004d2c 	.word	0x08004d2c

080043f4 <__retarget_lock_acquire_recursive>:
 80043f4:	4770      	bx	lr

080043f6 <__retarget_lock_release_recursive>:
 80043f6:	4770      	bx	lr

080043f8 <_free_r>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	0005      	movs	r5, r0
 80043fc:	2900      	cmp	r1, #0
 80043fe:	d010      	beq.n	8004422 <_free_r+0x2a>
 8004400:	1f0c      	subs	r4, r1, #4
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	da00      	bge.n	800440a <_free_r+0x12>
 8004408:	18e4      	adds	r4, r4, r3
 800440a:	0028      	movs	r0, r5
 800440c:	f000 f8e2 	bl	80045d4 <__malloc_lock>
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <_free_r+0x90>)
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <_free_r+0x2c>
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	6014      	str	r4, [r2, #0]
 800441c:	0028      	movs	r0, r5
 800441e:	f000 f8e1 	bl	80045e4 <__malloc_unlock>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	42a3      	cmp	r3, r4
 8004426:	d908      	bls.n	800443a <_free_r+0x42>
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	1821      	adds	r1, r4, r0
 800442c:	428b      	cmp	r3, r1
 800442e:	d1f3      	bne.n	8004418 <_free_r+0x20>
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	1809      	adds	r1, r1, r0
 8004436:	6021      	str	r1, [r4, #0]
 8004438:	e7ee      	b.n	8004418 <_free_r+0x20>
 800443a:	001a      	movs	r2, r3
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <_free_r+0x4e>
 8004442:	42a3      	cmp	r3, r4
 8004444:	d9f9      	bls.n	800443a <_free_r+0x42>
 8004446:	6811      	ldr	r1, [r2, #0]
 8004448:	1850      	adds	r0, r2, r1
 800444a:	42a0      	cmp	r0, r4
 800444c:	d10b      	bne.n	8004466 <_free_r+0x6e>
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	1809      	adds	r1, r1, r0
 8004452:	1850      	adds	r0, r2, r1
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	4283      	cmp	r3, r0
 8004458:	d1e0      	bne.n	800441c <_free_r+0x24>
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	1841      	adds	r1, r0, r1
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	6053      	str	r3, [r2, #4]
 8004464:	e7da      	b.n	800441c <_free_r+0x24>
 8004466:	42a0      	cmp	r0, r4
 8004468:	d902      	bls.n	8004470 <_free_r+0x78>
 800446a:	230c      	movs	r3, #12
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	e7d5      	b.n	800441c <_free_r+0x24>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	1821      	adds	r1, r4, r0
 8004474:	428b      	cmp	r3, r1
 8004476:	d103      	bne.n	8004480 <_free_r+0x88>
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	1809      	adds	r1, r1, r0
 800447e:	6021      	str	r1, [r4, #0]
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	6054      	str	r4, [r2, #4]
 8004484:	e7ca      	b.n	800441c <_free_r+0x24>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000344 	.word	0x20000344

0800448c <sbrk_aligned>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4e0f      	ldr	r6, [pc, #60]	; (80044cc <sbrk_aligned+0x40>)
 8004490:	000d      	movs	r5, r1
 8004492:	6831      	ldr	r1, [r6, #0]
 8004494:	0004      	movs	r4, r0
 8004496:	2900      	cmp	r1, #0
 8004498:	d102      	bne.n	80044a0 <sbrk_aligned+0x14>
 800449a:	f000 fba1 	bl	8004be0 <_sbrk_r>
 800449e:	6030      	str	r0, [r6, #0]
 80044a0:	0029      	movs	r1, r5
 80044a2:	0020      	movs	r0, r4
 80044a4:	f000 fb9c 	bl	8004be0 <_sbrk_r>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d00a      	beq.n	80044c2 <sbrk_aligned+0x36>
 80044ac:	2303      	movs	r3, #3
 80044ae:	1cc5      	adds	r5, r0, #3
 80044b0:	439d      	bics	r5, r3
 80044b2:	42a8      	cmp	r0, r5
 80044b4:	d007      	beq.n	80044c6 <sbrk_aligned+0x3a>
 80044b6:	1a29      	subs	r1, r5, r0
 80044b8:	0020      	movs	r0, r4
 80044ba:	f000 fb91 	bl	8004be0 <_sbrk_r>
 80044be:	3001      	adds	r0, #1
 80044c0:	d101      	bne.n	80044c6 <sbrk_aligned+0x3a>
 80044c2:	2501      	movs	r5, #1
 80044c4:	426d      	negs	r5, r5
 80044c6:	0028      	movs	r0, r5
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000348 	.word	0x20000348

080044d0 <_malloc_r>:
 80044d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044d2:	2203      	movs	r2, #3
 80044d4:	1ccb      	adds	r3, r1, #3
 80044d6:	4393      	bics	r3, r2
 80044d8:	3308      	adds	r3, #8
 80044da:	0006      	movs	r6, r0
 80044dc:	001f      	movs	r7, r3
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d238      	bcs.n	8004554 <_malloc_r+0x84>
 80044e2:	270c      	movs	r7, #12
 80044e4:	42b9      	cmp	r1, r7
 80044e6:	d837      	bhi.n	8004558 <_malloc_r+0x88>
 80044e8:	0030      	movs	r0, r6
 80044ea:	f000 f873 	bl	80045d4 <__malloc_lock>
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <_malloc_r+0x100>)
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	001c      	movs	r4, r3
 80044f6:	2c00      	cmp	r4, #0
 80044f8:	d133      	bne.n	8004562 <_malloc_r+0x92>
 80044fa:	0039      	movs	r1, r7
 80044fc:	0030      	movs	r0, r6
 80044fe:	f7ff ffc5 	bl	800448c <sbrk_aligned>
 8004502:	0004      	movs	r4, r0
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d15e      	bne.n	80045c6 <_malloc_r+0xf6>
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	681c      	ldr	r4, [r3, #0]
 800450c:	0025      	movs	r5, r4
 800450e:	2d00      	cmp	r5, #0
 8004510:	d14e      	bne.n	80045b0 <_malloc_r+0xe0>
 8004512:	2c00      	cmp	r4, #0
 8004514:	d051      	beq.n	80045ba <_malloc_r+0xea>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	0029      	movs	r1, r5
 800451a:	18e3      	adds	r3, r4, r3
 800451c:	0030      	movs	r0, r6
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	f000 fb5e 	bl	8004be0 <_sbrk_r>
 8004524:	9b01      	ldr	r3, [sp, #4]
 8004526:	4283      	cmp	r3, r0
 8004528:	d147      	bne.n	80045ba <_malloc_r+0xea>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0030      	movs	r0, r6
 800452e:	1aff      	subs	r7, r7, r3
 8004530:	0039      	movs	r1, r7
 8004532:	f7ff ffab 	bl	800448c <sbrk_aligned>
 8004536:	3001      	adds	r0, #1
 8004538:	d03f      	beq.n	80045ba <_malloc_r+0xea>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	19db      	adds	r3, r3, r7
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	9b00      	ldr	r3, [sp, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d040      	beq.n	80045ca <_malloc_r+0xfa>
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	42a2      	cmp	r2, r4
 800454c:	d133      	bne.n	80045b6 <_malloc_r+0xe6>
 800454e:	2200      	movs	r2, #0
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e014      	b.n	800457e <_malloc_r+0xae>
 8004554:	2b00      	cmp	r3, #0
 8004556:	dac5      	bge.n	80044e4 <_malloc_r+0x14>
 8004558:	230c      	movs	r3, #12
 800455a:	2500      	movs	r5, #0
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	0028      	movs	r0, r5
 8004560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004562:	6821      	ldr	r1, [r4, #0]
 8004564:	1bc9      	subs	r1, r1, r7
 8004566:	d420      	bmi.n	80045aa <_malloc_r+0xda>
 8004568:	290b      	cmp	r1, #11
 800456a:	d918      	bls.n	800459e <_malloc_r+0xce>
 800456c:	19e2      	adds	r2, r4, r7
 800456e:	6027      	str	r7, [r4, #0]
 8004570:	42a3      	cmp	r3, r4
 8004572:	d112      	bne.n	800459a <_malloc_r+0xca>
 8004574:	9b00      	ldr	r3, [sp, #0]
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	6011      	str	r1, [r2, #0]
 800457c:	6053      	str	r3, [r2, #4]
 800457e:	0030      	movs	r0, r6
 8004580:	0025      	movs	r5, r4
 8004582:	f000 f82f 	bl	80045e4 <__malloc_unlock>
 8004586:	2207      	movs	r2, #7
 8004588:	350b      	adds	r5, #11
 800458a:	1d23      	adds	r3, r4, #4
 800458c:	4395      	bics	r5, r2
 800458e:	1aea      	subs	r2, r5, r3
 8004590:	429d      	cmp	r5, r3
 8004592:	d0e4      	beq.n	800455e <_malloc_r+0x8e>
 8004594:	1b5b      	subs	r3, r3, r5
 8004596:	50a3      	str	r3, [r4, r2]
 8004598:	e7e1      	b.n	800455e <_malloc_r+0x8e>
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	e7ec      	b.n	8004578 <_malloc_r+0xa8>
 800459e:	6862      	ldr	r2, [r4, #4]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d1d5      	bne.n	8004550 <_malloc_r+0x80>
 80045a4:	9b00      	ldr	r3, [sp, #0]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e7e9      	b.n	800457e <_malloc_r+0xae>
 80045aa:	0023      	movs	r3, r4
 80045ac:	6864      	ldr	r4, [r4, #4]
 80045ae:	e7a2      	b.n	80044f6 <_malloc_r+0x26>
 80045b0:	002c      	movs	r4, r5
 80045b2:	686d      	ldr	r5, [r5, #4]
 80045b4:	e7ab      	b.n	800450e <_malloc_r+0x3e>
 80045b6:	0013      	movs	r3, r2
 80045b8:	e7c4      	b.n	8004544 <_malloc_r+0x74>
 80045ba:	230c      	movs	r3, #12
 80045bc:	0030      	movs	r0, r6
 80045be:	6033      	str	r3, [r6, #0]
 80045c0:	f000 f810 	bl	80045e4 <__malloc_unlock>
 80045c4:	e7cb      	b.n	800455e <_malloc_r+0x8e>
 80045c6:	6027      	str	r7, [r4, #0]
 80045c8:	e7d9      	b.n	800457e <_malloc_r+0xae>
 80045ca:	605b      	str	r3, [r3, #4]
 80045cc:	deff      	udf	#255	; 0xff
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000344 	.word	0x20000344

080045d4 <__malloc_lock>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4802      	ldr	r0, [pc, #8]	; (80045e0 <__malloc_lock+0xc>)
 80045d8:	f7ff ff0c 	bl	80043f4 <__retarget_lock_acquire_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20000340 	.word	0x20000340

080045e4 <__malloc_unlock>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4802      	ldr	r0, [pc, #8]	; (80045f0 <__malloc_unlock+0xc>)
 80045e8:	f7ff ff05 	bl	80043f6 <__retarget_lock_release_recursive>
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20000340 	.word	0x20000340

080045f4 <__ssputs_r>:
 80045f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f6:	b085      	sub	sp, #20
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	9203      	str	r2, [sp, #12]
 80045fc:	688e      	ldr	r6, [r1, #8]
 80045fe:	9a01      	ldr	r2, [sp, #4]
 8004600:	0007      	movs	r7, r0
 8004602:	000c      	movs	r4, r1
 8004604:	680b      	ldr	r3, [r1, #0]
 8004606:	4296      	cmp	r6, r2
 8004608:	d831      	bhi.n	800466e <__ssputs_r+0x7a>
 800460a:	898a      	ldrh	r2, [r1, #12]
 800460c:	2190      	movs	r1, #144	; 0x90
 800460e:	00c9      	lsls	r1, r1, #3
 8004610:	420a      	tst	r2, r1
 8004612:	d029      	beq.n	8004668 <__ssputs_r+0x74>
 8004614:	2003      	movs	r0, #3
 8004616:	6921      	ldr	r1, [r4, #16]
 8004618:	1a5b      	subs	r3, r3, r1
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	6963      	ldr	r3, [r4, #20]
 800461e:	4343      	muls	r3, r0
 8004620:	0fdd      	lsrs	r5, r3, #31
 8004622:	18ed      	adds	r5, r5, r3
 8004624:	9b01      	ldr	r3, [sp, #4]
 8004626:	9802      	ldr	r0, [sp, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	181b      	adds	r3, r3, r0
 800462c:	106d      	asrs	r5, r5, #1
 800462e:	42ab      	cmp	r3, r5
 8004630:	d900      	bls.n	8004634 <__ssputs_r+0x40>
 8004632:	001d      	movs	r5, r3
 8004634:	0552      	lsls	r2, r2, #21
 8004636:	d529      	bpl.n	800468c <__ssputs_r+0x98>
 8004638:	0029      	movs	r1, r5
 800463a:	0038      	movs	r0, r7
 800463c:	f7ff ff48 	bl	80044d0 <_malloc_r>
 8004640:	1e06      	subs	r6, r0, #0
 8004642:	d02d      	beq.n	80046a0 <__ssputs_r+0xac>
 8004644:	9a02      	ldr	r2, [sp, #8]
 8004646:	6921      	ldr	r1, [r4, #16]
 8004648:	f000 fae7 	bl	8004c1a <memcpy>
 800464c:	89a2      	ldrh	r2, [r4, #12]
 800464e:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <__ssputs_r+0xc0>)
 8004650:	401a      	ands	r2, r3
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	4313      	orrs	r3, r2
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	9b02      	ldr	r3, [sp, #8]
 800465a:	6126      	str	r6, [r4, #16]
 800465c:	18f6      	adds	r6, r6, r3
 800465e:	6026      	str	r6, [r4, #0]
 8004660:	6165      	str	r5, [r4, #20]
 8004662:	9e01      	ldr	r6, [sp, #4]
 8004664:	1aed      	subs	r5, r5, r3
 8004666:	60a5      	str	r5, [r4, #8]
 8004668:	9b01      	ldr	r3, [sp, #4]
 800466a:	429e      	cmp	r6, r3
 800466c:	d900      	bls.n	8004670 <__ssputs_r+0x7c>
 800466e:	9e01      	ldr	r6, [sp, #4]
 8004670:	0032      	movs	r2, r6
 8004672:	9903      	ldr	r1, [sp, #12]
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	f000 fa9f 	bl	8004bb8 <memmove>
 800467a:	2000      	movs	r0, #0
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	1b9b      	subs	r3, r3, r6
 8004680:	60a3      	str	r3, [r4, #8]
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	199b      	adds	r3, r3, r6
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	b005      	add	sp, #20
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468c:	002a      	movs	r2, r5
 800468e:	0038      	movs	r0, r7
 8004690:	f000 facc 	bl	8004c2c <_realloc_r>
 8004694:	1e06      	subs	r6, r0, #0
 8004696:	d1df      	bne.n	8004658 <__ssputs_r+0x64>
 8004698:	0038      	movs	r0, r7
 800469a:	6921      	ldr	r1, [r4, #16]
 800469c:	f7ff feac 	bl	80043f8 <_free_r>
 80046a0:	230c      	movs	r3, #12
 80046a2:	2001      	movs	r0, #1
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	89a2      	ldrh	r2, [r4, #12]
 80046a8:	3334      	adds	r3, #52	; 0x34
 80046aa:	4313      	orrs	r3, r2
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	4240      	negs	r0, r0
 80046b0:	e7ea      	b.n	8004688 <__ssputs_r+0x94>
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	fffffb7f 	.word	0xfffffb7f

080046b8 <_svfiprintf_r>:
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b0a1      	sub	sp, #132	; 0x84
 80046bc:	9003      	str	r0, [sp, #12]
 80046be:	001d      	movs	r5, r3
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	000f      	movs	r7, r1
 80046c4:	0016      	movs	r6, r2
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	d511      	bpl.n	80046ee <_svfiprintf_r+0x36>
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10e      	bne.n	80046ee <_svfiprintf_r+0x36>
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	f7ff fefd 	bl	80044d0 <_malloc_r>
 80046d6:	6038      	str	r0, [r7, #0]
 80046d8:	6138      	str	r0, [r7, #16]
 80046da:	2800      	cmp	r0, #0
 80046dc:	d105      	bne.n	80046ea <_svfiprintf_r+0x32>
 80046de:	230c      	movs	r3, #12
 80046e0:	9a03      	ldr	r2, [sp, #12]
 80046e2:	3801      	subs	r0, #1
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	b021      	add	sp, #132	; 0x84
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ea:	2340      	movs	r3, #64	; 0x40
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	2300      	movs	r3, #0
 80046f0:	ac08      	add	r4, sp, #32
 80046f2:	6163      	str	r3, [r4, #20]
 80046f4:	3320      	adds	r3, #32
 80046f6:	7663      	strb	r3, [r4, #25]
 80046f8:	3310      	adds	r3, #16
 80046fa:	76a3      	strb	r3, [r4, #26]
 80046fc:	9507      	str	r5, [sp, #28]
 80046fe:	0035      	movs	r5, r6
 8004700:	782b      	ldrb	r3, [r5, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <_svfiprintf_r+0x52>
 8004706:	2b25      	cmp	r3, #37	; 0x25
 8004708:	d148      	bne.n	800479c <_svfiprintf_r+0xe4>
 800470a:	1bab      	subs	r3, r5, r6
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	42b5      	cmp	r5, r6
 8004710:	d00b      	beq.n	800472a <_svfiprintf_r+0x72>
 8004712:	0032      	movs	r2, r6
 8004714:	0039      	movs	r1, r7
 8004716:	9803      	ldr	r0, [sp, #12]
 8004718:	f7ff ff6c 	bl	80045f4 <__ssputs_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d100      	bne.n	8004722 <_svfiprintf_r+0x6a>
 8004720:	e0af      	b.n	8004882 <_svfiprintf_r+0x1ca>
 8004722:	6963      	ldr	r3, [r4, #20]
 8004724:	9a05      	ldr	r2, [sp, #20]
 8004726:	189b      	adds	r3, r3, r2
 8004728:	6163      	str	r3, [r4, #20]
 800472a:	782b      	ldrb	r3, [r5, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d100      	bne.n	8004732 <_svfiprintf_r+0x7a>
 8004730:	e0a7      	b.n	8004882 <_svfiprintf_r+0x1ca>
 8004732:	2201      	movs	r2, #1
 8004734:	2300      	movs	r3, #0
 8004736:	4252      	negs	r2, r2
 8004738:	6062      	str	r2, [r4, #4]
 800473a:	a904      	add	r1, sp, #16
 800473c:	3254      	adds	r2, #84	; 0x54
 800473e:	1852      	adds	r2, r2, r1
 8004740:	1c6e      	adds	r6, r5, #1
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	60e3      	str	r3, [r4, #12]
 8004746:	60a3      	str	r3, [r4, #8]
 8004748:	7013      	strb	r3, [r2, #0]
 800474a:	65a3      	str	r3, [r4, #88]	; 0x58
 800474c:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <_svfiprintf_r+0x1ec>)
 800474e:	2205      	movs	r2, #5
 8004750:	0018      	movs	r0, r3
 8004752:	7831      	ldrb	r1, [r6, #0]
 8004754:	9305      	str	r3, [sp, #20]
 8004756:	f000 fa55 	bl	8004c04 <memchr>
 800475a:	1c75      	adds	r5, r6, #1
 800475c:	2800      	cmp	r0, #0
 800475e:	d11f      	bne.n	80047a0 <_svfiprintf_r+0xe8>
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	06d3      	lsls	r3, r2, #27
 8004764:	d504      	bpl.n	8004770 <_svfiprintf_r+0xb8>
 8004766:	2353      	movs	r3, #83	; 0x53
 8004768:	a904      	add	r1, sp, #16
 800476a:	185b      	adds	r3, r3, r1
 800476c:	2120      	movs	r1, #32
 800476e:	7019      	strb	r1, [r3, #0]
 8004770:	0713      	lsls	r3, r2, #28
 8004772:	d504      	bpl.n	800477e <_svfiprintf_r+0xc6>
 8004774:	2353      	movs	r3, #83	; 0x53
 8004776:	a904      	add	r1, sp, #16
 8004778:	185b      	adds	r3, r3, r1
 800477a:	212b      	movs	r1, #43	; 0x2b
 800477c:	7019      	strb	r1, [r3, #0]
 800477e:	7833      	ldrb	r3, [r6, #0]
 8004780:	2b2a      	cmp	r3, #42	; 0x2a
 8004782:	d016      	beq.n	80047b2 <_svfiprintf_r+0xfa>
 8004784:	0035      	movs	r5, r6
 8004786:	2100      	movs	r1, #0
 8004788:	200a      	movs	r0, #10
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	782a      	ldrb	r2, [r5, #0]
 800478e:	1c6e      	adds	r6, r5, #1
 8004790:	3a30      	subs	r2, #48	; 0x30
 8004792:	2a09      	cmp	r2, #9
 8004794:	d94e      	bls.n	8004834 <_svfiprintf_r+0x17c>
 8004796:	2900      	cmp	r1, #0
 8004798:	d111      	bne.n	80047be <_svfiprintf_r+0x106>
 800479a:	e017      	b.n	80047cc <_svfiprintf_r+0x114>
 800479c:	3501      	adds	r5, #1
 800479e:	e7af      	b.n	8004700 <_svfiprintf_r+0x48>
 80047a0:	9b05      	ldr	r3, [sp, #20]
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	1ac0      	subs	r0, r0, r3
 80047a6:	2301      	movs	r3, #1
 80047a8:	4083      	lsls	r3, r0
 80047aa:	4313      	orrs	r3, r2
 80047ac:	002e      	movs	r6, r5
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e7cc      	b.n	800474c <_svfiprintf_r+0x94>
 80047b2:	9b07      	ldr	r3, [sp, #28]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9107      	str	r1, [sp, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db01      	blt.n	80047c2 <_svfiprintf_r+0x10a>
 80047be:	930b      	str	r3, [sp, #44]	; 0x2c
 80047c0:	e004      	b.n	80047cc <_svfiprintf_r+0x114>
 80047c2:	425b      	negs	r3, r3
 80047c4:	60e3      	str	r3, [r4, #12]
 80047c6:	2302      	movs	r3, #2
 80047c8:	4313      	orrs	r3, r2
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	782b      	ldrb	r3, [r5, #0]
 80047ce:	2b2e      	cmp	r3, #46	; 0x2e
 80047d0:	d10a      	bne.n	80047e8 <_svfiprintf_r+0x130>
 80047d2:	786b      	ldrb	r3, [r5, #1]
 80047d4:	2b2a      	cmp	r3, #42	; 0x2a
 80047d6:	d135      	bne.n	8004844 <_svfiprintf_r+0x18c>
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	3502      	adds	r5, #2
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	9207      	str	r2, [sp, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	db2b      	blt.n	800483e <_svfiprintf_r+0x186>
 80047e6:	9309      	str	r3, [sp, #36]	; 0x24
 80047e8:	4e2f      	ldr	r6, [pc, #188]	; (80048a8 <_svfiprintf_r+0x1f0>)
 80047ea:	2203      	movs	r2, #3
 80047ec:	0030      	movs	r0, r6
 80047ee:	7829      	ldrb	r1, [r5, #0]
 80047f0:	f000 fa08 	bl	8004c04 <memchr>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d006      	beq.n	8004806 <_svfiprintf_r+0x14e>
 80047f8:	2340      	movs	r3, #64	; 0x40
 80047fa:	1b80      	subs	r0, r0, r6
 80047fc:	4083      	lsls	r3, r0
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	3501      	adds	r5, #1
 8004802:	4313      	orrs	r3, r2
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	7829      	ldrb	r1, [r5, #0]
 8004808:	2206      	movs	r2, #6
 800480a:	4828      	ldr	r0, [pc, #160]	; (80048ac <_svfiprintf_r+0x1f4>)
 800480c:	1c6e      	adds	r6, r5, #1
 800480e:	7621      	strb	r1, [r4, #24]
 8004810:	f000 f9f8 	bl	8004c04 <memchr>
 8004814:	2800      	cmp	r0, #0
 8004816:	d03c      	beq.n	8004892 <_svfiprintf_r+0x1da>
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <_svfiprintf_r+0x1f8>)
 800481a:	2b00      	cmp	r3, #0
 800481c:	d125      	bne.n	800486a <_svfiprintf_r+0x1b2>
 800481e:	2207      	movs	r2, #7
 8004820:	9b07      	ldr	r3, [sp, #28]
 8004822:	3307      	adds	r3, #7
 8004824:	4393      	bics	r3, r2
 8004826:	3308      	adds	r3, #8
 8004828:	9307      	str	r3, [sp, #28]
 800482a:	6963      	ldr	r3, [r4, #20]
 800482c:	9a04      	ldr	r2, [sp, #16]
 800482e:	189b      	adds	r3, r3, r2
 8004830:	6163      	str	r3, [r4, #20]
 8004832:	e764      	b.n	80046fe <_svfiprintf_r+0x46>
 8004834:	4343      	muls	r3, r0
 8004836:	0035      	movs	r5, r6
 8004838:	2101      	movs	r1, #1
 800483a:	189b      	adds	r3, r3, r2
 800483c:	e7a6      	b.n	800478c <_svfiprintf_r+0xd4>
 800483e:	2301      	movs	r3, #1
 8004840:	425b      	negs	r3, r3
 8004842:	e7d0      	b.n	80047e6 <_svfiprintf_r+0x12e>
 8004844:	2300      	movs	r3, #0
 8004846:	200a      	movs	r0, #10
 8004848:	001a      	movs	r2, r3
 800484a:	3501      	adds	r5, #1
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	7829      	ldrb	r1, [r5, #0]
 8004850:	1c6e      	adds	r6, r5, #1
 8004852:	3930      	subs	r1, #48	; 0x30
 8004854:	2909      	cmp	r1, #9
 8004856:	d903      	bls.n	8004860 <_svfiprintf_r+0x1a8>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c5      	beq.n	80047e8 <_svfiprintf_r+0x130>
 800485c:	9209      	str	r2, [sp, #36]	; 0x24
 800485e:	e7c3      	b.n	80047e8 <_svfiprintf_r+0x130>
 8004860:	4342      	muls	r2, r0
 8004862:	0035      	movs	r5, r6
 8004864:	2301      	movs	r3, #1
 8004866:	1852      	adds	r2, r2, r1
 8004868:	e7f1      	b.n	800484e <_svfiprintf_r+0x196>
 800486a:	aa07      	add	r2, sp, #28
 800486c:	9200      	str	r2, [sp, #0]
 800486e:	0021      	movs	r1, r4
 8004870:	003a      	movs	r2, r7
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <_svfiprintf_r+0x1fc>)
 8004874:	9803      	ldr	r0, [sp, #12]
 8004876:	e000      	b.n	800487a <_svfiprintf_r+0x1c2>
 8004878:	bf00      	nop
 800487a:	9004      	str	r0, [sp, #16]
 800487c:	9b04      	ldr	r3, [sp, #16]
 800487e:	3301      	adds	r3, #1
 8004880:	d1d3      	bne.n	800482a <_svfiprintf_r+0x172>
 8004882:	89bb      	ldrh	r3, [r7, #12]
 8004884:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004886:	065b      	lsls	r3, r3, #25
 8004888:	d400      	bmi.n	800488c <_svfiprintf_r+0x1d4>
 800488a:	e72c      	b.n	80046e6 <_svfiprintf_r+0x2e>
 800488c:	2001      	movs	r0, #1
 800488e:	4240      	negs	r0, r0
 8004890:	e729      	b.n	80046e6 <_svfiprintf_r+0x2e>
 8004892:	aa07      	add	r2, sp, #28
 8004894:	9200      	str	r2, [sp, #0]
 8004896:	0021      	movs	r1, r4
 8004898:	003a      	movs	r2, r7
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <_svfiprintf_r+0x1fc>)
 800489c:	9803      	ldr	r0, [sp, #12]
 800489e:	f000 f87b 	bl	8004998 <_printf_i>
 80048a2:	e7ea      	b.n	800487a <_svfiprintf_r+0x1c2>
 80048a4:	08004cf8 	.word	0x08004cf8
 80048a8:	08004cfe 	.word	0x08004cfe
 80048ac:	08004d02 	.word	0x08004d02
 80048b0:	00000000 	.word	0x00000000
 80048b4:	080045f5 	.word	0x080045f5

080048b8 <_printf_common>:
 80048b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ba:	0016      	movs	r6, r2
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	688a      	ldr	r2, [r1, #8]
 80048c0:	690b      	ldr	r3, [r1, #16]
 80048c2:	000c      	movs	r4, r1
 80048c4:	9000      	str	r0, [sp, #0]
 80048c6:	4293      	cmp	r3, r2
 80048c8:	da00      	bge.n	80048cc <_printf_common+0x14>
 80048ca:	0013      	movs	r3, r2
 80048cc:	0022      	movs	r2, r4
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	3243      	adds	r2, #67	; 0x43
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d001      	beq.n	80048dc <_printf_common+0x24>
 80048d8:	3301      	adds	r3, #1
 80048da:	6033      	str	r3, [r6, #0]
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	069b      	lsls	r3, r3, #26
 80048e0:	d502      	bpl.n	80048e8 <_printf_common+0x30>
 80048e2:	6833      	ldr	r3, [r6, #0]
 80048e4:	3302      	adds	r3, #2
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	2306      	movs	r3, #6
 80048ec:	0015      	movs	r5, r2
 80048ee:	401d      	ands	r5, r3
 80048f0:	421a      	tst	r2, r3
 80048f2:	d027      	beq.n	8004944 <_printf_common+0x8c>
 80048f4:	0023      	movs	r3, r4
 80048f6:	3343      	adds	r3, #67	; 0x43
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	4193      	sbcs	r3, r2
 80048fe:	6822      	ldr	r2, [r4, #0]
 8004900:	0692      	lsls	r2, r2, #26
 8004902:	d430      	bmi.n	8004966 <_printf_common+0xae>
 8004904:	0022      	movs	r2, r4
 8004906:	9901      	ldr	r1, [sp, #4]
 8004908:	9800      	ldr	r0, [sp, #0]
 800490a:	9d08      	ldr	r5, [sp, #32]
 800490c:	3243      	adds	r2, #67	; 0x43
 800490e:	47a8      	blx	r5
 8004910:	3001      	adds	r0, #1
 8004912:	d025      	beq.n	8004960 <_printf_common+0xa8>
 8004914:	2206      	movs	r2, #6
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	2500      	movs	r5, #0
 800491a:	4013      	ands	r3, r2
 800491c:	2b04      	cmp	r3, #4
 800491e:	d105      	bne.n	800492c <_printf_common+0x74>
 8004920:	6833      	ldr	r3, [r6, #0]
 8004922:	68e5      	ldr	r5, [r4, #12]
 8004924:	1aed      	subs	r5, r5, r3
 8004926:	43eb      	mvns	r3, r5
 8004928:	17db      	asrs	r3, r3, #31
 800492a:	401d      	ands	r5, r3
 800492c:	68a3      	ldr	r3, [r4, #8]
 800492e:	6922      	ldr	r2, [r4, #16]
 8004930:	4293      	cmp	r3, r2
 8004932:	dd01      	ble.n	8004938 <_printf_common+0x80>
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	18ed      	adds	r5, r5, r3
 8004938:	2600      	movs	r6, #0
 800493a:	42b5      	cmp	r5, r6
 800493c:	d120      	bne.n	8004980 <_printf_common+0xc8>
 800493e:	2000      	movs	r0, #0
 8004940:	e010      	b.n	8004964 <_printf_common+0xac>
 8004942:	3501      	adds	r5, #1
 8004944:	68e3      	ldr	r3, [r4, #12]
 8004946:	6832      	ldr	r2, [r6, #0]
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	42ab      	cmp	r3, r5
 800494c:	ddd2      	ble.n	80048f4 <_printf_common+0x3c>
 800494e:	0022      	movs	r2, r4
 8004950:	2301      	movs	r3, #1
 8004952:	9901      	ldr	r1, [sp, #4]
 8004954:	9800      	ldr	r0, [sp, #0]
 8004956:	9f08      	ldr	r7, [sp, #32]
 8004958:	3219      	adds	r2, #25
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	d1f0      	bne.n	8004942 <_printf_common+0x8a>
 8004960:	2001      	movs	r0, #1
 8004962:	4240      	negs	r0, r0
 8004964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004966:	2030      	movs	r0, #48	; 0x30
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	3143      	adds	r1, #67	; 0x43
 800496c:	7008      	strb	r0, [r1, #0]
 800496e:	0021      	movs	r1, r4
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	3145      	adds	r1, #69	; 0x45
 8004974:	7809      	ldrb	r1, [r1, #0]
 8004976:	18a2      	adds	r2, r4, r2
 8004978:	3243      	adds	r2, #67	; 0x43
 800497a:	3302      	adds	r3, #2
 800497c:	7011      	strb	r1, [r2, #0]
 800497e:	e7c1      	b.n	8004904 <_printf_common+0x4c>
 8004980:	0022      	movs	r2, r4
 8004982:	2301      	movs	r3, #1
 8004984:	9901      	ldr	r1, [sp, #4]
 8004986:	9800      	ldr	r0, [sp, #0]
 8004988:	9f08      	ldr	r7, [sp, #32]
 800498a:	321a      	adds	r2, #26
 800498c:	47b8      	blx	r7
 800498e:	3001      	adds	r0, #1
 8004990:	d0e6      	beq.n	8004960 <_printf_common+0xa8>
 8004992:	3601      	adds	r6, #1
 8004994:	e7d1      	b.n	800493a <_printf_common+0x82>
	...

08004998 <_printf_i>:
 8004998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499a:	b08b      	sub	sp, #44	; 0x2c
 800499c:	9206      	str	r2, [sp, #24]
 800499e:	000a      	movs	r2, r1
 80049a0:	3243      	adds	r2, #67	; 0x43
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	9005      	str	r0, [sp, #20]
 80049a6:	9204      	str	r2, [sp, #16]
 80049a8:	7e0a      	ldrb	r2, [r1, #24]
 80049aa:	000c      	movs	r4, r1
 80049ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049ae:	2a78      	cmp	r2, #120	; 0x78
 80049b0:	d809      	bhi.n	80049c6 <_printf_i+0x2e>
 80049b2:	2a62      	cmp	r2, #98	; 0x62
 80049b4:	d80b      	bhi.n	80049ce <_printf_i+0x36>
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	d100      	bne.n	80049bc <_printf_i+0x24>
 80049ba:	e0be      	b.n	8004b3a <_printf_i+0x1a2>
 80049bc:	497c      	ldr	r1, [pc, #496]	; (8004bb0 <_printf_i+0x218>)
 80049be:	9103      	str	r1, [sp, #12]
 80049c0:	2a58      	cmp	r2, #88	; 0x58
 80049c2:	d100      	bne.n	80049c6 <_printf_i+0x2e>
 80049c4:	e093      	b.n	8004aee <_printf_i+0x156>
 80049c6:	0026      	movs	r6, r4
 80049c8:	3642      	adds	r6, #66	; 0x42
 80049ca:	7032      	strb	r2, [r6, #0]
 80049cc:	e022      	b.n	8004a14 <_printf_i+0x7c>
 80049ce:	0010      	movs	r0, r2
 80049d0:	3863      	subs	r0, #99	; 0x63
 80049d2:	2815      	cmp	r0, #21
 80049d4:	d8f7      	bhi.n	80049c6 <_printf_i+0x2e>
 80049d6:	f7fb fb95 	bl	8000104 <__gnu_thumb1_case_shi>
 80049da:	0016      	.short	0x0016
 80049dc:	fff6001f 	.word	0xfff6001f
 80049e0:	fff6fff6 	.word	0xfff6fff6
 80049e4:	001ffff6 	.word	0x001ffff6
 80049e8:	fff6fff6 	.word	0xfff6fff6
 80049ec:	fff6fff6 	.word	0xfff6fff6
 80049f0:	003600a3 	.word	0x003600a3
 80049f4:	fff60083 	.word	0xfff60083
 80049f8:	00b4fff6 	.word	0x00b4fff6
 80049fc:	0036fff6 	.word	0x0036fff6
 8004a00:	fff6fff6 	.word	0xfff6fff6
 8004a04:	0087      	.short	0x0087
 8004a06:	0026      	movs	r6, r4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	3642      	adds	r6, #66	; 0x42
 8004a0c:	1d11      	adds	r1, r2, #4
 8004a0e:	6019      	str	r1, [r3, #0]
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	7033      	strb	r3, [r6, #0]
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0a2      	b.n	8004b5e <_printf_i+0x1c6>
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	6809      	ldr	r1, [r1, #0]
 8004a1c:	1d02      	adds	r2, r0, #4
 8004a1e:	060d      	lsls	r5, r1, #24
 8004a20:	d50b      	bpl.n	8004a3a <_printf_i+0xa2>
 8004a22:	6805      	ldr	r5, [r0, #0]
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	da03      	bge.n	8004a32 <_printf_i+0x9a>
 8004a2a:	232d      	movs	r3, #45	; 0x2d
 8004a2c:	9a04      	ldr	r2, [sp, #16]
 8004a2e:	426d      	negs	r5, r5
 8004a30:	7013      	strb	r3, [r2, #0]
 8004a32:	4b5f      	ldr	r3, [pc, #380]	; (8004bb0 <_printf_i+0x218>)
 8004a34:	270a      	movs	r7, #10
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	e01b      	b.n	8004a72 <_printf_i+0xda>
 8004a3a:	6805      	ldr	r5, [r0, #0]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	0649      	lsls	r1, r1, #25
 8004a40:	d5f1      	bpl.n	8004a26 <_printf_i+0x8e>
 8004a42:	b22d      	sxth	r5, r5
 8004a44:	e7ef      	b.n	8004a26 <_printf_i+0x8e>
 8004a46:	680d      	ldr	r5, [r1, #0]
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	1d08      	adds	r0, r1, #4
 8004a4c:	6018      	str	r0, [r3, #0]
 8004a4e:	062e      	lsls	r6, r5, #24
 8004a50:	d501      	bpl.n	8004a56 <_printf_i+0xbe>
 8004a52:	680d      	ldr	r5, [r1, #0]
 8004a54:	e003      	b.n	8004a5e <_printf_i+0xc6>
 8004a56:	066d      	lsls	r5, r5, #25
 8004a58:	d5fb      	bpl.n	8004a52 <_printf_i+0xba>
 8004a5a:	680d      	ldr	r5, [r1, #0]
 8004a5c:	b2ad      	uxth	r5, r5
 8004a5e:	4b54      	ldr	r3, [pc, #336]	; (8004bb0 <_printf_i+0x218>)
 8004a60:	2708      	movs	r7, #8
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	2a6f      	cmp	r2, #111	; 0x6f
 8004a66:	d000      	beq.n	8004a6a <_printf_i+0xd2>
 8004a68:	3702      	adds	r7, #2
 8004a6a:	0023      	movs	r3, r4
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	3343      	adds	r3, #67	; 0x43
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	6863      	ldr	r3, [r4, #4]
 8004a74:	60a3      	str	r3, [r4, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db03      	blt.n	8004a82 <_printf_i+0xea>
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	6822      	ldr	r2, [r4, #0]
 8004a7e:	438a      	bics	r2, r1
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	d102      	bne.n	8004a8c <_printf_i+0xf4>
 8004a86:	9e04      	ldr	r6, [sp, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <_printf_i+0x10e>
 8004a8c:	9e04      	ldr	r6, [sp, #16]
 8004a8e:	0028      	movs	r0, r5
 8004a90:	0039      	movs	r1, r7
 8004a92:	f7fb fbc7 	bl	8000224 <__aeabi_uidivmod>
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	3e01      	subs	r6, #1
 8004a9a:	5c5b      	ldrb	r3, [r3, r1]
 8004a9c:	7033      	strb	r3, [r6, #0]
 8004a9e:	002b      	movs	r3, r5
 8004aa0:	0005      	movs	r5, r0
 8004aa2:	429f      	cmp	r7, r3
 8004aa4:	d9f3      	bls.n	8004a8e <_printf_i+0xf6>
 8004aa6:	2f08      	cmp	r7, #8
 8004aa8:	d109      	bne.n	8004abe <_printf_i+0x126>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	07db      	lsls	r3, r3, #31
 8004aae:	d506      	bpl.n	8004abe <_printf_i+0x126>
 8004ab0:	6862      	ldr	r2, [r4, #4]
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	dc02      	bgt.n	8004abe <_printf_i+0x126>
 8004ab8:	2330      	movs	r3, #48	; 0x30
 8004aba:	3e01      	subs	r6, #1
 8004abc:	7033      	strb	r3, [r6, #0]
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	1b9b      	subs	r3, r3, r6
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	0021      	movs	r1, r4
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	9805      	ldr	r0, [sp, #20]
 8004acc:	9b06      	ldr	r3, [sp, #24]
 8004ace:	aa09      	add	r2, sp, #36	; 0x24
 8004ad0:	f7ff fef2 	bl	80048b8 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d147      	bne.n	8004b68 <_printf_i+0x1d0>
 8004ad8:	2001      	movs	r0, #1
 8004ada:	4240      	negs	r0, r0
 8004adc:	b00b      	add	sp, #44	; 0x2c
 8004ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	6809      	ldr	r1, [r1, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	2278      	movs	r2, #120	; 0x78
 8004aea:	4932      	ldr	r1, [pc, #200]	; (8004bb4 <_printf_i+0x21c>)
 8004aec:	9103      	str	r1, [sp, #12]
 8004aee:	0021      	movs	r1, r4
 8004af0:	3145      	adds	r1, #69	; 0x45
 8004af2:	700a      	strb	r2, [r1, #0]
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	c920      	ldmia	r1!, {r5}
 8004afa:	0610      	lsls	r0, r2, #24
 8004afc:	d402      	bmi.n	8004b04 <_printf_i+0x16c>
 8004afe:	0650      	lsls	r0, r2, #25
 8004b00:	d500      	bpl.n	8004b04 <_printf_i+0x16c>
 8004b02:	b2ad      	uxth	r5, r5
 8004b04:	6019      	str	r1, [r3, #0]
 8004b06:	07d3      	lsls	r3, r2, #31
 8004b08:	d502      	bpl.n	8004b10 <_printf_i+0x178>
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	2710      	movs	r7, #16
 8004b12:	2d00      	cmp	r5, #0
 8004b14:	d1a9      	bne.n	8004a6a <_printf_i+0xd2>
 8004b16:	2220      	movs	r2, #32
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	4393      	bics	r3, r2
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	e7a4      	b.n	8004a6a <_printf_i+0xd2>
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	680d      	ldr	r5, [r1, #0]
 8004b24:	1d10      	adds	r0, r2, #4
 8004b26:	6949      	ldr	r1, [r1, #20]
 8004b28:	6018      	str	r0, [r3, #0]
 8004b2a:	6813      	ldr	r3, [r2, #0]
 8004b2c:	062e      	lsls	r6, r5, #24
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0x19c>
 8004b30:	6019      	str	r1, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <_printf_i+0x1a2>
 8004b34:	066d      	lsls	r5, r5, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0x198>
 8004b38:	8019      	strh	r1, [r3, #0]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9e04      	ldr	r6, [sp, #16]
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	e7c0      	b.n	8004ac4 <_printf_i+0x12c>
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	1d11      	adds	r1, r2, #4
 8004b46:	6019      	str	r1, [r3, #0]
 8004b48:	6816      	ldr	r6, [r2, #0]
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	0030      	movs	r0, r6
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	f000 f858 	bl	8004c04 <memchr>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d001      	beq.n	8004b5c <_printf_i+0x1c4>
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	6060      	str	r0, [r4, #4]
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9a04      	ldr	r2, [sp, #16]
 8004b64:	7013      	strb	r3, [r2, #0]
 8004b66:	e7ad      	b.n	8004ac4 <_printf_i+0x12c>
 8004b68:	0032      	movs	r2, r6
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	9906      	ldr	r1, [sp, #24]
 8004b6e:	9805      	ldr	r0, [sp, #20]
 8004b70:	9d07      	ldr	r5, [sp, #28]
 8004b72:	47a8      	blx	r5
 8004b74:	3001      	adds	r0, #1
 8004b76:	d0af      	beq.n	8004ad8 <_printf_i+0x140>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	079b      	lsls	r3, r3, #30
 8004b7c:	d415      	bmi.n	8004baa <_printf_i+0x212>
 8004b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b80:	68e0      	ldr	r0, [r4, #12]
 8004b82:	4298      	cmp	r0, r3
 8004b84:	daaa      	bge.n	8004adc <_printf_i+0x144>
 8004b86:	0018      	movs	r0, r3
 8004b88:	e7a8      	b.n	8004adc <_printf_i+0x144>
 8004b8a:	0022      	movs	r2, r4
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	9906      	ldr	r1, [sp, #24]
 8004b90:	9805      	ldr	r0, [sp, #20]
 8004b92:	9e07      	ldr	r6, [sp, #28]
 8004b94:	3219      	adds	r2, #25
 8004b96:	47b0      	blx	r6
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d09d      	beq.n	8004ad8 <_printf_i+0x140>
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	68e3      	ldr	r3, [r4, #12]
 8004ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	42ab      	cmp	r3, r5
 8004ba6:	dcf0      	bgt.n	8004b8a <_printf_i+0x1f2>
 8004ba8:	e7e9      	b.n	8004b7e <_printf_i+0x1e6>
 8004baa:	2500      	movs	r5, #0
 8004bac:	e7f7      	b.n	8004b9e <_printf_i+0x206>
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	08004d09 	.word	0x08004d09
 8004bb4:	08004d1a 	.word	0x08004d1a

08004bb8 <memmove>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4288      	cmp	r0, r1
 8004bbc:	d902      	bls.n	8004bc4 <memmove+0xc>
 8004bbe:	188b      	adds	r3, r1, r2
 8004bc0:	4298      	cmp	r0, r3
 8004bc2:	d303      	bcc.n	8004bcc <memmove+0x14>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e007      	b.n	8004bd8 <memmove+0x20>
 8004bc8:	5c8b      	ldrb	r3, [r1, r2]
 8004bca:	5483      	strb	r3, [r0, r2]
 8004bcc:	3a01      	subs	r2, #1
 8004bce:	d2fb      	bcs.n	8004bc8 <memmove+0x10>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	5ccc      	ldrb	r4, [r1, r3]
 8004bd4:	54c4      	strb	r4, [r0, r3]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d1fa      	bne.n	8004bd2 <memmove+0x1a>
 8004bdc:	e7f8      	b.n	8004bd0 <memmove+0x18>
	...

08004be0 <_sbrk_r>:
 8004be0:	2300      	movs	r3, #0
 8004be2:	b570      	push	{r4, r5, r6, lr}
 8004be4:	4d06      	ldr	r5, [pc, #24]	; (8004c00 <_sbrk_r+0x20>)
 8004be6:	0004      	movs	r4, r0
 8004be8:	0008      	movs	r0, r1
 8004bea:	602b      	str	r3, [r5, #0]
 8004bec:	f7fb fe62 	bl	80008b4 <_sbrk>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d103      	bne.n	8004bfc <_sbrk_r+0x1c>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d000      	beq.n	8004bfc <_sbrk_r+0x1c>
 8004bfa:	6023      	str	r3, [r4, #0]
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	2000033c 	.word	0x2000033c

08004c04 <memchr>:
 8004c04:	b2c9      	uxtb	r1, r1
 8004c06:	1882      	adds	r2, r0, r2
 8004c08:	4290      	cmp	r0, r2
 8004c0a:	d101      	bne.n	8004c10 <memchr+0xc>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	4770      	bx	lr
 8004c10:	7803      	ldrb	r3, [r0, #0]
 8004c12:	428b      	cmp	r3, r1
 8004c14:	d0fb      	beq.n	8004c0e <memchr+0xa>
 8004c16:	3001      	adds	r0, #1
 8004c18:	e7f6      	b.n	8004c08 <memchr+0x4>

08004c1a <memcpy>:
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d100      	bne.n	8004c24 <memcpy+0xa>
 8004c22:	bd10      	pop	{r4, pc}
 8004c24:	5ccc      	ldrb	r4, [r1, r3]
 8004c26:	54c4      	strb	r4, [r0, r3]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	e7f8      	b.n	8004c1e <memcpy+0x4>

08004c2c <_realloc_r>:
 8004c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2e:	0007      	movs	r7, r0
 8004c30:	000e      	movs	r6, r1
 8004c32:	0014      	movs	r4, r2
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d105      	bne.n	8004c44 <_realloc_r+0x18>
 8004c38:	0011      	movs	r1, r2
 8004c3a:	f7ff fc49 	bl	80044d0 <_malloc_r>
 8004c3e:	0005      	movs	r5, r0
 8004c40:	0028      	movs	r0, r5
 8004c42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	d103      	bne.n	8004c50 <_realloc_r+0x24>
 8004c48:	f7ff fbd6 	bl	80043f8 <_free_r>
 8004c4c:	0025      	movs	r5, r4
 8004c4e:	e7f7      	b.n	8004c40 <_realloc_r+0x14>
 8004c50:	f000 f81b 	bl	8004c8a <_malloc_usable_size_r>
 8004c54:	9001      	str	r0, [sp, #4]
 8004c56:	4284      	cmp	r4, r0
 8004c58:	d803      	bhi.n	8004c62 <_realloc_r+0x36>
 8004c5a:	0035      	movs	r5, r6
 8004c5c:	0843      	lsrs	r3, r0, #1
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	d3ee      	bcc.n	8004c40 <_realloc_r+0x14>
 8004c62:	0021      	movs	r1, r4
 8004c64:	0038      	movs	r0, r7
 8004c66:	f7ff fc33 	bl	80044d0 <_malloc_r>
 8004c6a:	1e05      	subs	r5, r0, #0
 8004c6c:	d0e8      	beq.n	8004c40 <_realloc_r+0x14>
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	0022      	movs	r2, r4
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d900      	bls.n	8004c78 <_realloc_r+0x4c>
 8004c76:	001a      	movs	r2, r3
 8004c78:	0031      	movs	r1, r6
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7ff ffcd 	bl	8004c1a <memcpy>
 8004c80:	0031      	movs	r1, r6
 8004c82:	0038      	movs	r0, r7
 8004c84:	f7ff fbb8 	bl	80043f8 <_free_r>
 8004c88:	e7da      	b.n	8004c40 <_realloc_r+0x14>

08004c8a <_malloc_usable_size_r>:
 8004c8a:	1f0b      	subs	r3, r1, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1f18      	subs	r0, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	da01      	bge.n	8004c98 <_malloc_usable_size_r+0xe>
 8004c94:	580b      	ldr	r3, [r1, r0]
 8004c96:	18c0      	adds	r0, r0, r3
 8004c98:	4770      	bx	lr
	...

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
