
MainMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000695c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a9c  08006a9c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006a9c  08006a9c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a9c  08006a9c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000018  08006abc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08006abc  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff68  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ac  00000000  00000000  0002ffeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bed  00000000  00000000  00033198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bc68  00000000  00000000  00033d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cf1  00000000  00000000  0004f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aaec0  00000000  00000000  000616de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000382c  00000000  00000000  0010c5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006a00 	.word	0x08006a00

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08006a00 	.word	0x08006a00

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 fef5 	bl	8001014 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe55 	bl	8000ee0 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 facc 	bl	80007dc <__aeabi_dsub>
 8000244:	f000 fe4c 	bl	8000ee0 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dmul>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4645      	mov	r5, r8
 800025c:	46de      	mov	lr, fp
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	001f      	movs	r7, r3
 8000266:	030b      	lsls	r3, r1, #12
 8000268:	0b1b      	lsrs	r3, r3, #12
 800026a:	469b      	mov	fp, r3
 800026c:	004d      	lsls	r5, r1, #1
 800026e:	0fcb      	lsrs	r3, r1, #31
 8000270:	0004      	movs	r4, r0
 8000272:	4691      	mov	r9, r2
 8000274:	4698      	mov	r8, r3
 8000276:	b087      	sub	sp, #28
 8000278:	0d6d      	lsrs	r5, r5, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x26>
 800027c:	e1cd      	b.n	800061a <__aeabi_dmul+0x3c2>
 800027e:	4bce      	ldr	r3, [pc, #824]	; (80005b8 <__aeabi_dmul+0x360>)
 8000280:	429d      	cmp	r5, r3
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x2e>
 8000284:	e1e9      	b.n	800065a <__aeabi_dmul+0x402>
 8000286:	465a      	mov	r2, fp
 8000288:	0f43      	lsrs	r3, r0, #29
 800028a:	00d2      	lsls	r2, r2, #3
 800028c:	4313      	orrs	r3, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	431a      	orrs	r2, r3
 8000294:	00c3      	lsls	r3, r0, #3
 8000296:	469a      	mov	sl, r3
 8000298:	4bc8      	ldr	r3, [pc, #800]	; (80005bc <__aeabi_dmul+0x364>)
 800029a:	4693      	mov	fp, r2
 800029c:	469c      	mov	ip, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	2600      	movs	r6, #0
 80002a2:	4465      	add	r5, ip
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4648      	mov	r0, r9
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dmul+0x60>
 80002b6:	e189      	b.n	80005cc <__aeabi_dmul+0x374>
 80002b8:	4abf      	ldr	r2, [pc, #764]	; (80005b8 <__aeabi_dmul+0x360>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d019      	beq.n	80002f2 <__aeabi_dmul+0x9a>
 80002be:	0f42      	lsrs	r2, r0, #29
 80002c0:	00e4      	lsls	r4, r4, #3
 80002c2:	4322      	orrs	r2, r4
 80002c4:	2480      	movs	r4, #128	; 0x80
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	4314      	orrs	r4, r2
 80002ca:	4abc      	ldr	r2, [pc, #752]	; (80005bc <__aeabi_dmul+0x364>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4694      	mov	ip, r2
 80002d0:	4642      	mov	r2, r8
 80002d2:	4463      	add	r3, ip
 80002d4:	195b      	adds	r3, r3, r5
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	407a      	eors	r2, r7
 80002dc:	3301      	adds	r3, #1
 80002de:	00c0      	lsls	r0, r0, #3
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2e0a      	cmp	r6, #10
 80002e6:	dd1c      	ble.n	8000322 <__aeabi_dmul+0xca>
 80002e8:	003a      	movs	r2, r7
 80002ea:	2e0b      	cmp	r6, #11
 80002ec:	d05e      	beq.n	80003ac <__aeabi_dmul+0x154>
 80002ee:	4647      	mov	r7, r8
 80002f0:	e056      	b.n	80003a0 <__aeabi_dmul+0x148>
 80002f2:	4649      	mov	r1, r9
 80002f4:	4bb0      	ldr	r3, [pc, #704]	; (80005b8 <__aeabi_dmul+0x360>)
 80002f6:	4321      	orrs	r1, r4
 80002f8:	18eb      	adds	r3, r5, r3
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d12a      	bne.n	8000356 <__aeabi_dmul+0xfe>
 8000300:	2080      	movs	r0, #128	; 0x80
 8000302:	2202      	movs	r2, #2
 8000304:	0100      	lsls	r0, r0, #4
 8000306:	002b      	movs	r3, r5
 8000308:	4684      	mov	ip, r0
 800030a:	4316      	orrs	r6, r2
 800030c:	4642      	mov	r2, r8
 800030e:	4463      	add	r3, ip
 8000310:	407a      	eors	r2, r7
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	2e0a      	cmp	r6, #10
 8000318:	dd00      	ble.n	800031c <__aeabi_dmul+0xc4>
 800031a:	e231      	b.n	8000780 <__aeabi_dmul+0x528>
 800031c:	2000      	movs	r0, #0
 800031e:	2400      	movs	r4, #0
 8000320:	2102      	movs	r1, #2
 8000322:	2e02      	cmp	r6, #2
 8000324:	dc26      	bgt.n	8000374 <__aeabi_dmul+0x11c>
 8000326:	3e01      	subs	r6, #1
 8000328:	2e01      	cmp	r6, #1
 800032a:	d852      	bhi.n	80003d2 <__aeabi_dmul+0x17a>
 800032c:	2902      	cmp	r1, #2
 800032e:	d04c      	beq.n	80003ca <__aeabi_dmul+0x172>
 8000330:	2901      	cmp	r1, #1
 8000332:	d000      	beq.n	8000336 <__aeabi_dmul+0xde>
 8000334:	e118      	b.n	8000568 <__aeabi_dmul+0x310>
 8000336:	2300      	movs	r3, #0
 8000338:	2400      	movs	r4, #0
 800033a:	2500      	movs	r5, #0
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	4323      	orrs	r3, r4
 8000340:	07d2      	lsls	r2, r2, #31
 8000342:	4313      	orrs	r3, r2
 8000344:	0028      	movs	r0, r5
 8000346:	0019      	movs	r1, r3
 8000348:	b007      	add	sp, #28
 800034a:	bcf0      	pop	{r4, r5, r6, r7}
 800034c:	46bb      	mov	fp, r7
 800034e:	46b2      	mov	sl, r6
 8000350:	46a9      	mov	r9, r5
 8000352:	46a0      	mov	r8, r4
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	2203      	movs	r2, #3
 800035a:	0109      	lsls	r1, r1, #4
 800035c:	002b      	movs	r3, r5
 800035e:	468c      	mov	ip, r1
 8000360:	4316      	orrs	r6, r2
 8000362:	4642      	mov	r2, r8
 8000364:	4463      	add	r3, ip
 8000366:	407a      	eors	r2, r7
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2e0a      	cmp	r6, #10
 800036e:	dd00      	ble.n	8000372 <__aeabi_dmul+0x11a>
 8000370:	e228      	b.n	80007c4 <__aeabi_dmul+0x56c>
 8000372:	2103      	movs	r1, #3
 8000374:	2501      	movs	r5, #1
 8000376:	40b5      	lsls	r5, r6
 8000378:	46ac      	mov	ip, r5
 800037a:	26a6      	movs	r6, #166	; 0xa6
 800037c:	4663      	mov	r3, ip
 800037e:	00f6      	lsls	r6, r6, #3
 8000380:	4035      	ands	r5, r6
 8000382:	4233      	tst	r3, r6
 8000384:	d10b      	bne.n	800039e <__aeabi_dmul+0x146>
 8000386:	2690      	movs	r6, #144	; 0x90
 8000388:	00b6      	lsls	r6, r6, #2
 800038a:	4233      	tst	r3, r6
 800038c:	d118      	bne.n	80003c0 <__aeabi_dmul+0x168>
 800038e:	3eb9      	subs	r6, #185	; 0xb9
 8000390:	3eff      	subs	r6, #255	; 0xff
 8000392:	421e      	tst	r6, r3
 8000394:	d01d      	beq.n	80003d2 <__aeabi_dmul+0x17a>
 8000396:	46a3      	mov	fp, r4
 8000398:	4682      	mov	sl, r0
 800039a:	9100      	str	r1, [sp, #0]
 800039c:	e000      	b.n	80003a0 <__aeabi_dmul+0x148>
 800039e:	0017      	movs	r7, r2
 80003a0:	9900      	ldr	r1, [sp, #0]
 80003a2:	003a      	movs	r2, r7
 80003a4:	2902      	cmp	r1, #2
 80003a6:	d010      	beq.n	80003ca <__aeabi_dmul+0x172>
 80003a8:	465c      	mov	r4, fp
 80003aa:	4650      	mov	r0, sl
 80003ac:	2903      	cmp	r1, #3
 80003ae:	d1bf      	bne.n	8000330 <__aeabi_dmul+0xd8>
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	031b      	lsls	r3, r3, #12
 80003b4:	431c      	orrs	r4, r3
 80003b6:	0324      	lsls	r4, r4, #12
 80003b8:	0005      	movs	r5, r0
 80003ba:	4b7f      	ldr	r3, [pc, #508]	; (80005b8 <__aeabi_dmul+0x360>)
 80003bc:	0b24      	lsrs	r4, r4, #12
 80003be:	e7bd      	b.n	800033c <__aeabi_dmul+0xe4>
 80003c0:	2480      	movs	r4, #128	; 0x80
 80003c2:	2200      	movs	r2, #0
 80003c4:	4b7c      	ldr	r3, [pc, #496]	; (80005b8 <__aeabi_dmul+0x360>)
 80003c6:	0324      	lsls	r4, r4, #12
 80003c8:	e7b8      	b.n	800033c <__aeabi_dmul+0xe4>
 80003ca:	2400      	movs	r4, #0
 80003cc:	2500      	movs	r5, #0
 80003ce:	4b7a      	ldr	r3, [pc, #488]	; (80005b8 <__aeabi_dmul+0x360>)
 80003d0:	e7b4      	b.n	800033c <__aeabi_dmul+0xe4>
 80003d2:	4653      	mov	r3, sl
 80003d4:	041e      	lsls	r6, r3, #16
 80003d6:	0c36      	lsrs	r6, r6, #16
 80003d8:	0c1f      	lsrs	r7, r3, #16
 80003da:	0033      	movs	r3, r6
 80003dc:	0c01      	lsrs	r1, r0, #16
 80003de:	0400      	lsls	r0, r0, #16
 80003e0:	0c00      	lsrs	r0, r0, #16
 80003e2:	4343      	muls	r3, r0
 80003e4:	4698      	mov	r8, r3
 80003e6:	0003      	movs	r3, r0
 80003e8:	437b      	muls	r3, r7
 80003ea:	4699      	mov	r9, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	434b      	muls	r3, r1
 80003f0:	469c      	mov	ip, r3
 80003f2:	4643      	mov	r3, r8
 80003f4:	000d      	movs	r5, r1
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	469a      	mov	sl, r3
 80003fa:	437d      	muls	r5, r7
 80003fc:	44cc      	add	ip, r9
 80003fe:	44d4      	add	ip, sl
 8000400:	9500      	str	r5, [sp, #0]
 8000402:	45e1      	cmp	r9, ip
 8000404:	d904      	bls.n	8000410 <__aeabi_dmul+0x1b8>
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	4699      	mov	r9, r3
 800040c:	444d      	add	r5, r9
 800040e:	9500      	str	r5, [sp, #0]
 8000410:	4663      	mov	r3, ip
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	001d      	movs	r5, r3
 8000416:	4663      	mov	r3, ip
 8000418:	041b      	lsls	r3, r3, #16
 800041a:	469c      	mov	ip, r3
 800041c:	4643      	mov	r3, r8
 800041e:	041b      	lsls	r3, r3, #16
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	4698      	mov	r8, r3
 8000424:	4663      	mov	r3, ip
 8000426:	4443      	add	r3, r8
 8000428:	9303      	str	r3, [sp, #12]
 800042a:	0c23      	lsrs	r3, r4, #16
 800042c:	4698      	mov	r8, r3
 800042e:	0033      	movs	r3, r6
 8000430:	0424      	lsls	r4, r4, #16
 8000432:	0c24      	lsrs	r4, r4, #16
 8000434:	4363      	muls	r3, r4
 8000436:	469c      	mov	ip, r3
 8000438:	0023      	movs	r3, r4
 800043a:	437b      	muls	r3, r7
 800043c:	4699      	mov	r9, r3
 800043e:	4643      	mov	r3, r8
 8000440:	435e      	muls	r6, r3
 8000442:	435f      	muls	r7, r3
 8000444:	444e      	add	r6, r9
 8000446:	4663      	mov	r3, ip
 8000448:	46b2      	mov	sl, r6
 800044a:	0c1e      	lsrs	r6, r3, #16
 800044c:	4456      	add	r6, sl
 800044e:	45b1      	cmp	r9, r6
 8000450:	d903      	bls.n	800045a <__aeabi_dmul+0x202>
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	025b      	lsls	r3, r3, #9
 8000456:	4699      	mov	r9, r3
 8000458:	444f      	add	r7, r9
 800045a:	0c33      	lsrs	r3, r6, #16
 800045c:	4699      	mov	r9, r3
 800045e:	003b      	movs	r3, r7
 8000460:	444b      	add	r3, r9
 8000462:	9305      	str	r3, [sp, #20]
 8000464:	4663      	mov	r3, ip
 8000466:	46ac      	mov	ip, r5
 8000468:	041f      	lsls	r7, r3, #16
 800046a:	0c3f      	lsrs	r7, r7, #16
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	19f6      	adds	r6, r6, r7
 8000470:	44b4      	add	ip, r6
 8000472:	4663      	mov	r3, ip
 8000474:	9304      	str	r3, [sp, #16]
 8000476:	465b      	mov	r3, fp
 8000478:	0c1b      	lsrs	r3, r3, #16
 800047a:	469c      	mov	ip, r3
 800047c:	465b      	mov	r3, fp
 800047e:	041f      	lsls	r7, r3, #16
 8000480:	0c3f      	lsrs	r7, r7, #16
 8000482:	003b      	movs	r3, r7
 8000484:	4343      	muls	r3, r0
 8000486:	4699      	mov	r9, r3
 8000488:	4663      	mov	r3, ip
 800048a:	4343      	muls	r3, r0
 800048c:	469a      	mov	sl, r3
 800048e:	464b      	mov	r3, r9
 8000490:	4660      	mov	r0, ip
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	469b      	mov	fp, r3
 8000496:	4348      	muls	r0, r1
 8000498:	4379      	muls	r1, r7
 800049a:	4451      	add	r1, sl
 800049c:	4459      	add	r1, fp
 800049e:	458a      	cmp	sl, r1
 80004a0:	d903      	bls.n	80004aa <__aeabi_dmul+0x252>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	469a      	mov	sl, r3
 80004a8:	4450      	add	r0, sl
 80004aa:	0c0b      	lsrs	r3, r1, #16
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	041b      	lsls	r3, r3, #16
 80004b2:	0c1b      	lsrs	r3, r3, #16
 80004b4:	4699      	mov	r9, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4363      	muls	r3, r4
 80004ba:	0409      	lsls	r1, r1, #16
 80004bc:	4645      	mov	r5, r8
 80004be:	4449      	add	r1, r9
 80004c0:	4699      	mov	r9, r3
 80004c2:	4663      	mov	r3, ip
 80004c4:	435c      	muls	r4, r3
 80004c6:	436b      	muls	r3, r5
 80004c8:	469c      	mov	ip, r3
 80004ca:	464b      	mov	r3, r9
 80004cc:	0c1b      	lsrs	r3, r3, #16
 80004ce:	4698      	mov	r8, r3
 80004d0:	436f      	muls	r7, r5
 80004d2:	193f      	adds	r7, r7, r4
 80004d4:	4447      	add	r7, r8
 80004d6:	4450      	add	r0, sl
 80004d8:	42bc      	cmp	r4, r7
 80004da:	d903      	bls.n	80004e4 <__aeabi_dmul+0x28c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	9b04      	ldr	r3, [sp, #16]
 80004e6:	9d00      	ldr	r5, [sp, #0]
 80004e8:	4698      	mov	r8, r3
 80004ea:	4445      	add	r5, r8
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	41b6      	sbcs	r6, r6
 80004f0:	4273      	negs	r3, r6
 80004f2:	4698      	mov	r8, r3
 80004f4:	464b      	mov	r3, r9
 80004f6:	041e      	lsls	r6, r3, #16
 80004f8:	9b05      	ldr	r3, [sp, #20]
 80004fa:	043c      	lsls	r4, r7, #16
 80004fc:	4699      	mov	r9, r3
 80004fe:	0c36      	lsrs	r6, r6, #16
 8000500:	19a4      	adds	r4, r4, r6
 8000502:	444c      	add	r4, r9
 8000504:	46a1      	mov	r9, r4
 8000506:	4683      	mov	fp, r0
 8000508:	186e      	adds	r6, r5, r1
 800050a:	44c1      	add	r9, r8
 800050c:	428e      	cmp	r6, r1
 800050e:	4189      	sbcs	r1, r1
 8000510:	44cb      	add	fp, r9
 8000512:	465d      	mov	r5, fp
 8000514:	4249      	negs	r1, r1
 8000516:	186d      	adds	r5, r5, r1
 8000518:	429c      	cmp	r4, r3
 800051a:	41a4      	sbcs	r4, r4
 800051c:	45c1      	cmp	r9, r8
 800051e:	419b      	sbcs	r3, r3
 8000520:	4583      	cmp	fp, r0
 8000522:	4180      	sbcs	r0, r0
 8000524:	428d      	cmp	r5, r1
 8000526:	4189      	sbcs	r1, r1
 8000528:	425b      	negs	r3, r3
 800052a:	4264      	negs	r4, r4
 800052c:	431c      	orrs	r4, r3
 800052e:	4240      	negs	r0, r0
 8000530:	9b03      	ldr	r3, [sp, #12]
 8000532:	4249      	negs	r1, r1
 8000534:	4301      	orrs	r1, r0
 8000536:	0270      	lsls	r0, r6, #9
 8000538:	0c3f      	lsrs	r7, r7, #16
 800053a:	4318      	orrs	r0, r3
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	1e47      	subs	r7, r0, #1
 8000540:	41b8      	sbcs	r0, r7
 8000542:	1864      	adds	r4, r4, r1
 8000544:	4464      	add	r4, ip
 8000546:	0df6      	lsrs	r6, r6, #23
 8000548:	0261      	lsls	r1, r4, #9
 800054a:	4330      	orrs	r0, r6
 800054c:	0dec      	lsrs	r4, r5, #23
 800054e:	026e      	lsls	r6, r5, #9
 8000550:	430c      	orrs	r4, r1
 8000552:	4330      	orrs	r0, r6
 8000554:	01c9      	lsls	r1, r1, #7
 8000556:	d400      	bmi.n	800055a <__aeabi_dmul+0x302>
 8000558:	e0f1      	b.n	800073e <__aeabi_dmul+0x4e6>
 800055a:	2101      	movs	r1, #1
 800055c:	0843      	lsrs	r3, r0, #1
 800055e:	4001      	ands	r1, r0
 8000560:	430b      	orrs	r3, r1
 8000562:	07e0      	lsls	r0, r4, #31
 8000564:	4318      	orrs	r0, r3
 8000566:	0864      	lsrs	r4, r4, #1
 8000568:	4915      	ldr	r1, [pc, #84]	; (80005c0 <__aeabi_dmul+0x368>)
 800056a:	9b02      	ldr	r3, [sp, #8]
 800056c:	468c      	mov	ip, r1
 800056e:	4463      	add	r3, ip
 8000570:	2b00      	cmp	r3, #0
 8000572:	dc00      	bgt.n	8000576 <__aeabi_dmul+0x31e>
 8000574:	e097      	b.n	80006a6 <__aeabi_dmul+0x44e>
 8000576:	0741      	lsls	r1, r0, #29
 8000578:	d009      	beq.n	800058e <__aeabi_dmul+0x336>
 800057a:	210f      	movs	r1, #15
 800057c:	4001      	ands	r1, r0
 800057e:	2904      	cmp	r1, #4
 8000580:	d005      	beq.n	800058e <__aeabi_dmul+0x336>
 8000582:	1d01      	adds	r1, r0, #4
 8000584:	4281      	cmp	r1, r0
 8000586:	4180      	sbcs	r0, r0
 8000588:	4240      	negs	r0, r0
 800058a:	1824      	adds	r4, r4, r0
 800058c:	0008      	movs	r0, r1
 800058e:	01e1      	lsls	r1, r4, #7
 8000590:	d506      	bpl.n	80005a0 <__aeabi_dmul+0x348>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	00c9      	lsls	r1, r1, #3
 8000596:	468c      	mov	ip, r1
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <__aeabi_dmul+0x36c>)
 800059a:	401c      	ands	r4, r3
 800059c:	9b02      	ldr	r3, [sp, #8]
 800059e:	4463      	add	r3, ip
 80005a0:	4909      	ldr	r1, [pc, #36]	; (80005c8 <__aeabi_dmul+0x370>)
 80005a2:	428b      	cmp	r3, r1
 80005a4:	dd00      	ble.n	80005a8 <__aeabi_dmul+0x350>
 80005a6:	e710      	b.n	80003ca <__aeabi_dmul+0x172>
 80005a8:	0761      	lsls	r1, r4, #29
 80005aa:	08c5      	lsrs	r5, r0, #3
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	430d      	orrs	r5, r1
 80005b2:	0b24      	lsrs	r4, r4, #12
 80005b4:	0d5b      	lsrs	r3, r3, #21
 80005b6:	e6c1      	b.n	800033c <__aeabi_dmul+0xe4>
 80005b8:	000007ff 	.word	0x000007ff
 80005bc:	fffffc01 	.word	0xfffffc01
 80005c0:	000003ff 	.word	0x000003ff
 80005c4:	feffffff 	.word	0xfeffffff
 80005c8:	000007fe 	.word	0x000007fe
 80005cc:	464b      	mov	r3, r9
 80005ce:	4323      	orrs	r3, r4
 80005d0:	d059      	beq.n	8000686 <__aeabi_dmul+0x42e>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dmul+0x380>
 80005d6:	e0a3      	b.n	8000720 <__aeabi_dmul+0x4c8>
 80005d8:	0020      	movs	r0, r4
 80005da:	f000 fd25 	bl	8001028 <__clzsi2>
 80005de:	0001      	movs	r1, r0
 80005e0:	0003      	movs	r3, r0
 80005e2:	390b      	subs	r1, #11
 80005e4:	221d      	movs	r2, #29
 80005e6:	1a52      	subs	r2, r2, r1
 80005e8:	4649      	mov	r1, r9
 80005ea:	0018      	movs	r0, r3
 80005ec:	40d1      	lsrs	r1, r2
 80005ee:	464a      	mov	r2, r9
 80005f0:	3808      	subs	r0, #8
 80005f2:	4082      	lsls	r2, r0
 80005f4:	4084      	lsls	r4, r0
 80005f6:	0010      	movs	r0, r2
 80005f8:	430c      	orrs	r4, r1
 80005fa:	4a74      	ldr	r2, [pc, #464]	; (80007cc <__aeabi_dmul+0x574>)
 80005fc:	1aeb      	subs	r3, r5, r3
 80005fe:	4694      	mov	ip, r2
 8000600:	4642      	mov	r2, r8
 8000602:	4463      	add	r3, ip
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9b01      	ldr	r3, [sp, #4]
 8000608:	407a      	eors	r2, r7
 800060a:	3301      	adds	r3, #1
 800060c:	2100      	movs	r1, #0
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2e0a      	cmp	r6, #10
 8000614:	dd00      	ble.n	8000618 <__aeabi_dmul+0x3c0>
 8000616:	e667      	b.n	80002e8 <__aeabi_dmul+0x90>
 8000618:	e683      	b.n	8000322 <__aeabi_dmul+0xca>
 800061a:	465b      	mov	r3, fp
 800061c:	4303      	orrs	r3, r0
 800061e:	469a      	mov	sl, r3
 8000620:	d02a      	beq.n	8000678 <__aeabi_dmul+0x420>
 8000622:	465b      	mov	r3, fp
 8000624:	2b00      	cmp	r3, #0
 8000626:	d06d      	beq.n	8000704 <__aeabi_dmul+0x4ac>
 8000628:	4658      	mov	r0, fp
 800062a:	f000 fcfd 	bl	8001028 <__clzsi2>
 800062e:	0001      	movs	r1, r0
 8000630:	0003      	movs	r3, r0
 8000632:	390b      	subs	r1, #11
 8000634:	221d      	movs	r2, #29
 8000636:	1a52      	subs	r2, r2, r1
 8000638:	0021      	movs	r1, r4
 800063a:	0018      	movs	r0, r3
 800063c:	465d      	mov	r5, fp
 800063e:	40d1      	lsrs	r1, r2
 8000640:	3808      	subs	r0, #8
 8000642:	4085      	lsls	r5, r0
 8000644:	000a      	movs	r2, r1
 8000646:	4084      	lsls	r4, r0
 8000648:	432a      	orrs	r2, r5
 800064a:	4693      	mov	fp, r2
 800064c:	46a2      	mov	sl, r4
 800064e:	4d5f      	ldr	r5, [pc, #380]	; (80007cc <__aeabi_dmul+0x574>)
 8000650:	2600      	movs	r6, #0
 8000652:	1aed      	subs	r5, r5, r3
 8000654:	2300      	movs	r3, #0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	e625      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800065a:	465b      	mov	r3, fp
 800065c:	4303      	orrs	r3, r0
 800065e:	469a      	mov	sl, r3
 8000660:	d105      	bne.n	800066e <__aeabi_dmul+0x416>
 8000662:	2300      	movs	r3, #0
 8000664:	469b      	mov	fp, r3
 8000666:	3302      	adds	r3, #2
 8000668:	2608      	movs	r6, #8
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	e61b      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800066e:	2303      	movs	r3, #3
 8000670:	4682      	mov	sl, r0
 8000672:	260c      	movs	r6, #12
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	e616      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000678:	2300      	movs	r3, #0
 800067a:	469b      	mov	fp, r3
 800067c:	3301      	adds	r3, #1
 800067e:	2604      	movs	r6, #4
 8000680:	2500      	movs	r5, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	e60f      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000686:	4642      	mov	r2, r8
 8000688:	3301      	adds	r3, #1
 800068a:	9501      	str	r5, [sp, #4]
 800068c:	431e      	orrs	r6, r3
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	407a      	eors	r2, r7
 8000692:	3301      	adds	r3, #1
 8000694:	2400      	movs	r4, #0
 8000696:	2000      	movs	r0, #0
 8000698:	2101      	movs	r1, #1
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2e0a      	cmp	r6, #10
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_dmul+0x44c>
 80006a2:	e621      	b.n	80002e8 <__aeabi_dmul+0x90>
 80006a4:	e63d      	b.n	8000322 <__aeabi_dmul+0xca>
 80006a6:	2101      	movs	r1, #1
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	2938      	cmp	r1, #56	; 0x38
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_dmul+0x458>
 80006ae:	e642      	b.n	8000336 <__aeabi_dmul+0xde>
 80006b0:	291f      	cmp	r1, #31
 80006b2:	dd47      	ble.n	8000744 <__aeabi_dmul+0x4ec>
 80006b4:	261f      	movs	r6, #31
 80006b6:	0025      	movs	r5, r4
 80006b8:	4276      	negs	r6, r6
 80006ba:	1af3      	subs	r3, r6, r3
 80006bc:	40dd      	lsrs	r5, r3
 80006be:	002b      	movs	r3, r5
 80006c0:	2920      	cmp	r1, #32
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dmul+0x478>
 80006c4:	4942      	ldr	r1, [pc, #264]	; (80007d0 <__aeabi_dmul+0x578>)
 80006c6:	9d02      	ldr	r5, [sp, #8]
 80006c8:	468c      	mov	ip, r1
 80006ca:	4465      	add	r5, ip
 80006cc:	40ac      	lsls	r4, r5
 80006ce:	4320      	orrs	r0, r4
 80006d0:	1e41      	subs	r1, r0, #1
 80006d2:	4188      	sbcs	r0, r1
 80006d4:	4318      	orrs	r0, r3
 80006d6:	2307      	movs	r3, #7
 80006d8:	001d      	movs	r5, r3
 80006da:	2400      	movs	r4, #0
 80006dc:	4005      	ands	r5, r0
 80006de:	4203      	tst	r3, r0
 80006e0:	d04a      	beq.n	8000778 <__aeabi_dmul+0x520>
 80006e2:	230f      	movs	r3, #15
 80006e4:	2400      	movs	r4, #0
 80006e6:	4003      	ands	r3, r0
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d042      	beq.n	8000772 <__aeabi_dmul+0x51a>
 80006ec:	1d03      	adds	r3, r0, #4
 80006ee:	4283      	cmp	r3, r0
 80006f0:	4180      	sbcs	r0, r0
 80006f2:	4240      	negs	r0, r0
 80006f4:	1824      	adds	r4, r4, r0
 80006f6:	0018      	movs	r0, r3
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	d53a      	bpl.n	8000772 <__aeabi_dmul+0x51a>
 80006fc:	2301      	movs	r3, #1
 80006fe:	2400      	movs	r4, #0
 8000700:	2500      	movs	r5, #0
 8000702:	e61b      	b.n	800033c <__aeabi_dmul+0xe4>
 8000704:	f000 fc90 	bl	8001028 <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0003      	movs	r3, r0
 800070c:	3115      	adds	r1, #21
 800070e:	3320      	adds	r3, #32
 8000710:	291c      	cmp	r1, #28
 8000712:	dd8f      	ble.n	8000634 <__aeabi_dmul+0x3dc>
 8000714:	3808      	subs	r0, #8
 8000716:	2200      	movs	r2, #0
 8000718:	4084      	lsls	r4, r0
 800071a:	4692      	mov	sl, r2
 800071c:	46a3      	mov	fp, r4
 800071e:	e796      	b.n	800064e <__aeabi_dmul+0x3f6>
 8000720:	f000 fc82 	bl	8001028 <__clzsi2>
 8000724:	0001      	movs	r1, r0
 8000726:	0003      	movs	r3, r0
 8000728:	3115      	adds	r1, #21
 800072a:	3320      	adds	r3, #32
 800072c:	291c      	cmp	r1, #28
 800072e:	dc00      	bgt.n	8000732 <__aeabi_dmul+0x4da>
 8000730:	e758      	b.n	80005e4 <__aeabi_dmul+0x38c>
 8000732:	0002      	movs	r2, r0
 8000734:	464c      	mov	r4, r9
 8000736:	3a08      	subs	r2, #8
 8000738:	2000      	movs	r0, #0
 800073a:	4094      	lsls	r4, r2
 800073c:	e75d      	b.n	80005fa <__aeabi_dmul+0x3a2>
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	e711      	b.n	8000568 <__aeabi_dmul+0x310>
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <__aeabi_dmul+0x57c>)
 8000746:	0026      	movs	r6, r4
 8000748:	469c      	mov	ip, r3
 800074a:	0003      	movs	r3, r0
 800074c:	9d02      	ldr	r5, [sp, #8]
 800074e:	40cb      	lsrs	r3, r1
 8000750:	4465      	add	r5, ip
 8000752:	40ae      	lsls	r6, r5
 8000754:	431e      	orrs	r6, r3
 8000756:	0003      	movs	r3, r0
 8000758:	40ab      	lsls	r3, r5
 800075a:	1e58      	subs	r0, r3, #1
 800075c:	4183      	sbcs	r3, r0
 800075e:	0030      	movs	r0, r6
 8000760:	4318      	orrs	r0, r3
 8000762:	40cc      	lsrs	r4, r1
 8000764:	0743      	lsls	r3, r0, #29
 8000766:	d0c7      	beq.n	80006f8 <__aeabi_dmul+0x4a0>
 8000768:	230f      	movs	r3, #15
 800076a:	4003      	ands	r3, r0
 800076c:	2b04      	cmp	r3, #4
 800076e:	d1bd      	bne.n	80006ec <__aeabi_dmul+0x494>
 8000770:	e7c2      	b.n	80006f8 <__aeabi_dmul+0x4a0>
 8000772:	0765      	lsls	r5, r4, #29
 8000774:	0264      	lsls	r4, r4, #9
 8000776:	0b24      	lsrs	r4, r4, #12
 8000778:	08c0      	lsrs	r0, r0, #3
 800077a:	2300      	movs	r3, #0
 800077c:	4305      	orrs	r5, r0
 800077e:	e5dd      	b.n	800033c <__aeabi_dmul+0xe4>
 8000780:	2500      	movs	r5, #0
 8000782:	2302      	movs	r3, #2
 8000784:	2e0f      	cmp	r6, #15
 8000786:	d10c      	bne.n	80007a2 <__aeabi_dmul+0x54a>
 8000788:	2480      	movs	r4, #128	; 0x80
 800078a:	465b      	mov	r3, fp
 800078c:	0324      	lsls	r4, r4, #12
 800078e:	4223      	tst	r3, r4
 8000790:	d00e      	beq.n	80007b0 <__aeabi_dmul+0x558>
 8000792:	4221      	tst	r1, r4
 8000794:	d10c      	bne.n	80007b0 <__aeabi_dmul+0x558>
 8000796:	430c      	orrs	r4, r1
 8000798:	0324      	lsls	r4, r4, #12
 800079a:	003a      	movs	r2, r7
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <__aeabi_dmul+0x580>)
 800079e:	0b24      	lsrs	r4, r4, #12
 80007a0:	e5cc      	b.n	800033c <__aeabi_dmul+0xe4>
 80007a2:	2e0b      	cmp	r6, #11
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dmul+0x550>
 80007a6:	e5a2      	b.n	80002ee <__aeabi_dmul+0x96>
 80007a8:	468b      	mov	fp, r1
 80007aa:	46aa      	mov	sl, r5
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	e5f7      	b.n	80003a0 <__aeabi_dmul+0x148>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	465b      	mov	r3, fp
 80007b4:	0324      	lsls	r4, r4, #12
 80007b6:	431c      	orrs	r4, r3
 80007b8:	0324      	lsls	r4, r4, #12
 80007ba:	4642      	mov	r2, r8
 80007bc:	4655      	mov	r5, sl
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <__aeabi_dmul+0x580>)
 80007c0:	0b24      	lsrs	r4, r4, #12
 80007c2:	e5bb      	b.n	800033c <__aeabi_dmul+0xe4>
 80007c4:	464d      	mov	r5, r9
 80007c6:	0021      	movs	r1, r4
 80007c8:	2303      	movs	r3, #3
 80007ca:	e7db      	b.n	8000784 <__aeabi_dmul+0x52c>
 80007cc:	fffffc0d 	.word	0xfffffc0d
 80007d0:	0000043e 	.word	0x0000043e
 80007d4:	0000041e 	.word	0x0000041e
 80007d8:	000007ff 	.word	0x000007ff

080007dc <__aeabi_dsub>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	4657      	mov	r7, sl
 80007e0:	464e      	mov	r6, r9
 80007e2:	4645      	mov	r5, r8
 80007e4:	46de      	mov	lr, fp
 80007e6:	b5e0      	push	{r5, r6, r7, lr}
 80007e8:	000d      	movs	r5, r1
 80007ea:	0004      	movs	r4, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	032b      	lsls	r3, r5, #12
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	0f62      	lsrs	r2, r4, #29
 80007f6:	431a      	orrs	r2, r3
 80007f8:	00e3      	lsls	r3, r4, #3
 80007fa:	030c      	lsls	r4, r1, #12
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0f47      	lsrs	r7, r0, #29
 8000800:	4327      	orrs	r7, r4
 8000802:	4cd0      	ldr	r4, [pc, #832]	; (8000b44 <__aeabi_dsub+0x368>)
 8000804:	006e      	lsls	r6, r5, #1
 8000806:	4691      	mov	r9, r2
 8000808:	b083      	sub	sp, #12
 800080a:	004a      	lsls	r2, r1, #1
 800080c:	00c0      	lsls	r0, r0, #3
 800080e:	4698      	mov	r8, r3
 8000810:	46a2      	mov	sl, r4
 8000812:	0d76      	lsrs	r6, r6, #21
 8000814:	0fed      	lsrs	r5, r5, #31
 8000816:	0d52      	lsrs	r2, r2, #21
 8000818:	0fc9      	lsrs	r1, r1, #31
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	42a2      	cmp	r2, r4
 800081e:	d100      	bne.n	8000822 <__aeabi_dsub+0x46>
 8000820:	e0b9      	b.n	8000996 <__aeabi_dsub+0x1ba>
 8000822:	2401      	movs	r4, #1
 8000824:	4061      	eors	r1, r4
 8000826:	468b      	mov	fp, r1
 8000828:	428d      	cmp	r5, r1
 800082a:	d100      	bne.n	800082e <__aeabi_dsub+0x52>
 800082c:	e08d      	b.n	800094a <__aeabi_dsub+0x16e>
 800082e:	1ab4      	subs	r4, r6, r2
 8000830:	46a4      	mov	ip, r4
 8000832:	2c00      	cmp	r4, #0
 8000834:	dc00      	bgt.n	8000838 <__aeabi_dsub+0x5c>
 8000836:	e0b7      	b.n	80009a8 <__aeabi_dsub+0x1cc>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x62>
 800083c:	e0cb      	b.n	80009d6 <__aeabi_dsub+0x1fa>
 800083e:	4ac1      	ldr	r2, [pc, #772]	; (8000b44 <__aeabi_dsub+0x368>)
 8000840:	4296      	cmp	r6, r2
 8000842:	d100      	bne.n	8000846 <__aeabi_dsub+0x6a>
 8000844:	e186      	b.n	8000b54 <__aeabi_dsub+0x378>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	4317      	orrs	r7, r2
 800084c:	4662      	mov	r2, ip
 800084e:	2a38      	cmp	r2, #56	; 0x38
 8000850:	dd00      	ble.n	8000854 <__aeabi_dsub+0x78>
 8000852:	e1a4      	b.n	8000b9e <__aeabi_dsub+0x3c2>
 8000854:	2a1f      	cmp	r2, #31
 8000856:	dd00      	ble.n	800085a <__aeabi_dsub+0x7e>
 8000858:	e21d      	b.n	8000c96 <__aeabi_dsub+0x4ba>
 800085a:	4661      	mov	r1, ip
 800085c:	2220      	movs	r2, #32
 800085e:	003c      	movs	r4, r7
 8000860:	1a52      	subs	r2, r2, r1
 8000862:	0001      	movs	r1, r0
 8000864:	4090      	lsls	r0, r2
 8000866:	4094      	lsls	r4, r2
 8000868:	1e42      	subs	r2, r0, #1
 800086a:	4190      	sbcs	r0, r2
 800086c:	4662      	mov	r2, ip
 800086e:	46a0      	mov	r8, r4
 8000870:	4664      	mov	r4, ip
 8000872:	40d7      	lsrs	r7, r2
 8000874:	464a      	mov	r2, r9
 8000876:	40e1      	lsrs	r1, r4
 8000878:	4644      	mov	r4, r8
 800087a:	1bd2      	subs	r2, r2, r7
 800087c:	4691      	mov	r9, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	4304      	orrs	r4, r0
 8000882:	1b1c      	subs	r4, r3, r4
 8000884:	42a3      	cmp	r3, r4
 8000886:	4192      	sbcs	r2, r2
 8000888:	464b      	mov	r3, r9
 800088a:	4252      	negs	r2, r2
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	469a      	mov	sl, r3
 8000890:	4653      	mov	r3, sl
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	d400      	bmi.n	8000898 <__aeabi_dsub+0xbc>
 8000896:	e12b      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000898:	4653      	mov	r3, sl
 800089a:	025a      	lsls	r2, r3, #9
 800089c:	0a53      	lsrs	r3, r2, #9
 800089e:	469a      	mov	sl, r3
 80008a0:	4653      	mov	r3, sl
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dsub+0xcc>
 80008a6:	e166      	b.n	8000b76 <__aeabi_dsub+0x39a>
 80008a8:	4650      	mov	r0, sl
 80008aa:	f000 fbbd 	bl	8001028 <__clzsi2>
 80008ae:	0003      	movs	r3, r0
 80008b0:	3b08      	subs	r3, #8
 80008b2:	2220      	movs	r2, #32
 80008b4:	0020      	movs	r0, r4
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4651      	mov	r1, sl
 80008ba:	40d0      	lsrs	r0, r2
 80008bc:	4099      	lsls	r1, r3
 80008be:	0002      	movs	r2, r0
 80008c0:	409c      	lsls	r4, r3
 80008c2:	430a      	orrs	r2, r1
 80008c4:	429e      	cmp	r6, r3
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dsub+0xee>
 80008c8:	e164      	b.n	8000b94 <__aeabi_dsub+0x3b8>
 80008ca:	1b9b      	subs	r3, r3, r6
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	291f      	cmp	r1, #31
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dsub+0xf8>
 80008d2:	e0fe      	b.n	8000ad2 <__aeabi_dsub+0x2f6>
 80008d4:	2320      	movs	r3, #32
 80008d6:	0010      	movs	r0, r2
 80008d8:	0026      	movs	r6, r4
 80008da:	1a5b      	subs	r3, r3, r1
 80008dc:	409c      	lsls	r4, r3
 80008de:	4098      	lsls	r0, r3
 80008e0:	40ce      	lsrs	r6, r1
 80008e2:	40ca      	lsrs	r2, r1
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4330      	orrs	r0, r6
 80008ea:	4692      	mov	sl, r2
 80008ec:	2600      	movs	r6, #0
 80008ee:	4304      	orrs	r4, r0
 80008f0:	0763      	lsls	r3, r4, #29
 80008f2:	d009      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d005      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008fc:	1d23      	adds	r3, r4, #4
 80008fe:	42a3      	cmp	r3, r4
 8000900:	41a4      	sbcs	r4, r4
 8000902:	4264      	negs	r4, r4
 8000904:	44a2      	add	sl, r4
 8000906:	001c      	movs	r4, r3
 8000908:	4653      	mov	r3, sl
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	d400      	bmi.n	8000910 <__aeabi_dsub+0x134>
 800090e:	e0f2      	b.n	8000af6 <__aeabi_dsub+0x31a>
 8000910:	4b8c      	ldr	r3, [pc, #560]	; (8000b44 <__aeabi_dsub+0x368>)
 8000912:	3601      	adds	r6, #1
 8000914:	429e      	cmp	r6, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dsub+0x13e>
 8000918:	e10f      	b.n	8000b3a <__aeabi_dsub+0x35e>
 800091a:	4653      	mov	r3, sl
 800091c:	498a      	ldr	r1, [pc, #552]	; (8000b48 <__aeabi_dsub+0x36c>)
 800091e:	08e4      	lsrs	r4, r4, #3
 8000920:	400b      	ands	r3, r1
 8000922:	0019      	movs	r1, r3
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	4323      	orrs	r3, r4
 8000928:	0572      	lsls	r2, r6, #21
 800092a:	024c      	lsls	r4, r1, #9
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0d52      	lsrs	r2, r2, #21
 8000930:	0512      	lsls	r2, r2, #20
 8000932:	4322      	orrs	r2, r4
 8000934:	07ed      	lsls	r5, r5, #31
 8000936:	432a      	orrs	r2, r5
 8000938:	0018      	movs	r0, r3
 800093a:	0011      	movs	r1, r2
 800093c:	b003      	add	sp, #12
 800093e:	bcf0      	pop	{r4, r5, r6, r7}
 8000940:	46bb      	mov	fp, r7
 8000942:	46b2      	mov	sl, r6
 8000944:	46a9      	mov	r9, r5
 8000946:	46a0      	mov	r8, r4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	1ab4      	subs	r4, r6, r2
 800094c:	46a4      	mov	ip, r4
 800094e:	2c00      	cmp	r4, #0
 8000950:	dd59      	ble.n	8000a06 <__aeabi_dsub+0x22a>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x17c>
 8000956:	e0b0      	b.n	8000aba <__aeabi_dsub+0x2de>
 8000958:	4556      	cmp	r6, sl
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x182>
 800095c:	e0fa      	b.n	8000b54 <__aeabi_dsub+0x378>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0412      	lsls	r2, r2, #16
 8000962:	4317      	orrs	r7, r2
 8000964:	4662      	mov	r2, ip
 8000966:	2a38      	cmp	r2, #56	; 0x38
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x190>
 800096a:	e0d4      	b.n	8000b16 <__aeabi_dsub+0x33a>
 800096c:	2a1f      	cmp	r2, #31
 800096e:	dc00      	bgt.n	8000972 <__aeabi_dsub+0x196>
 8000970:	e1c0      	b.n	8000cf4 <__aeabi_dsub+0x518>
 8000972:	0039      	movs	r1, r7
 8000974:	3a20      	subs	r2, #32
 8000976:	40d1      	lsrs	r1, r2
 8000978:	4662      	mov	r2, ip
 800097a:	2a20      	cmp	r2, #32
 800097c:	d006      	beq.n	800098c <__aeabi_dsub+0x1b0>
 800097e:	4664      	mov	r4, ip
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	1b12      	subs	r2, r2, r4
 8000984:	003c      	movs	r4, r7
 8000986:	4094      	lsls	r4, r2
 8000988:	4304      	orrs	r4, r0
 800098a:	9401      	str	r4, [sp, #4]
 800098c:	9c01      	ldr	r4, [sp, #4]
 800098e:	1e62      	subs	r2, r4, #1
 8000990:	4194      	sbcs	r4, r2
 8000992:	430c      	orrs	r4, r1
 8000994:	e0c3      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000996:	003c      	movs	r4, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	d02b      	beq.n	80009f4 <__aeabi_dsub+0x218>
 800099c:	468b      	mov	fp, r1
 800099e:	428d      	cmp	r5, r1
 80009a0:	d02e      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009a2:	4c6a      	ldr	r4, [pc, #424]	; (8000b4c <__aeabi_dsub+0x370>)
 80009a4:	46a4      	mov	ip, r4
 80009a6:	44b4      	add	ip, r6
 80009a8:	4664      	mov	r4, ip
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d05f      	beq.n	8000a6e <__aeabi_dsub+0x292>
 80009ae:	1b94      	subs	r4, r2, r6
 80009b0:	46a4      	mov	ip, r4
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d000      	beq.n	80009b8 <__aeabi_dsub+0x1dc>
 80009b6:	e120      	b.n	8000bfa <__aeabi_dsub+0x41e>
 80009b8:	464c      	mov	r4, r9
 80009ba:	431c      	orrs	r4, r3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x1e4>
 80009be:	e1c7      	b.n	8000d50 <__aeabi_dsub+0x574>
 80009c0:	4661      	mov	r1, ip
 80009c2:	1e4c      	subs	r4, r1, #1
 80009c4:	2901      	cmp	r1, #1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x1ee>
 80009c8:	e223      	b.n	8000e12 <__aeabi_dsub+0x636>
 80009ca:	4d5e      	ldr	r5, [pc, #376]	; (8000b44 <__aeabi_dsub+0x368>)
 80009cc:	45ac      	cmp	ip, r5
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dsub+0x1f6>
 80009d0:	e1d8      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 80009d2:	46a4      	mov	ip, r4
 80009d4:	e11a      	b.n	8000c0c <__aeabi_dsub+0x430>
 80009d6:	003a      	movs	r2, r7
 80009d8:	4302      	orrs	r2, r0
 80009da:	d100      	bne.n	80009de <__aeabi_dsub+0x202>
 80009dc:	e0e4      	b.n	8000ba8 <__aeabi_dsub+0x3cc>
 80009de:	0022      	movs	r2, r4
 80009e0:	3a01      	subs	r2, #1
 80009e2:	2c01      	cmp	r4, #1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dsub+0x20c>
 80009e6:	e1c3      	b.n	8000d70 <__aeabi_dsub+0x594>
 80009e8:	4956      	ldr	r1, [pc, #344]	; (8000b44 <__aeabi_dsub+0x368>)
 80009ea:	428c      	cmp	r4, r1
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dsub+0x214>
 80009ee:	e0b1      	b.n	8000b54 <__aeabi_dsub+0x378>
 80009f0:	4694      	mov	ip, r2
 80009f2:	e72b      	b.n	800084c <__aeabi_dsub+0x70>
 80009f4:	2401      	movs	r4, #1
 80009f6:	4061      	eors	r1, r4
 80009f8:	468b      	mov	fp, r1
 80009fa:	428d      	cmp	r5, r1
 80009fc:	d000      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009fe:	e716      	b.n	800082e <__aeabi_dsub+0x52>
 8000a00:	4952      	ldr	r1, [pc, #328]	; (8000b4c <__aeabi_dsub+0x370>)
 8000a02:	468c      	mov	ip, r1
 8000a04:	44b4      	add	ip, r6
 8000a06:	4664      	mov	r4, ip
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dsub+0x232>
 8000a0c:	e0d3      	b.n	8000bb6 <__aeabi_dsub+0x3da>
 8000a0e:	1b91      	subs	r1, r2, r6
 8000a10:	468c      	mov	ip, r1
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dsub+0x23c>
 8000a16:	e15e      	b.n	8000cd6 <__aeabi_dsub+0x4fa>
 8000a18:	494a      	ldr	r1, [pc, #296]	; (8000b44 <__aeabi_dsub+0x368>)
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dsub+0x244>
 8000a1e:	e1be      	b.n	8000d9e <__aeabi_dsub+0x5c2>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464c      	mov	r4, r9
 8000a24:	0409      	lsls	r1, r1, #16
 8000a26:	430c      	orrs	r4, r1
 8000a28:	46a1      	mov	r9, r4
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	2938      	cmp	r1, #56	; 0x38
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dsub+0x256>
 8000a30:	e1ba      	b.n	8000da8 <__aeabi_dsub+0x5cc>
 8000a32:	291f      	cmp	r1, #31
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_dsub+0x25c>
 8000a36:	e227      	b.n	8000e88 <__aeabi_dsub+0x6ac>
 8000a38:	2420      	movs	r4, #32
 8000a3a:	1a64      	subs	r4, r4, r1
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	40a1      	lsls	r1, r4
 8000a40:	001e      	movs	r6, r3
 8000a42:	4688      	mov	r8, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	40a3      	lsls	r3, r4
 8000a48:	40ce      	lsrs	r6, r1
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	1e5c      	subs	r4, r3, #1
 8000a4e:	41a3      	sbcs	r3, r4
 8000a50:	4331      	orrs	r1, r6
 8000a52:	4319      	orrs	r1, r3
 8000a54:	000c      	movs	r4, r1
 8000a56:	4663      	mov	r3, ip
 8000a58:	4649      	mov	r1, r9
 8000a5a:	40d9      	lsrs	r1, r3
 8000a5c:	187f      	adds	r7, r7, r1
 8000a5e:	1824      	adds	r4, r4, r0
 8000a60:	4284      	cmp	r4, r0
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	425b      	negs	r3, r3
 8000a66:	469a      	mov	sl, r3
 8000a68:	0016      	movs	r6, r2
 8000a6a:	44ba      	add	sl, r7
 8000a6c:	e05d      	b.n	8000b2a <__aeabi_dsub+0x34e>
 8000a6e:	4c38      	ldr	r4, [pc, #224]	; (8000b50 <__aeabi_dsub+0x374>)
 8000a70:	1c72      	adds	r2, r6, #1
 8000a72:	4222      	tst	r2, r4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dsub+0x29c>
 8000a76:	e0df      	b.n	8000c38 <__aeabi_dsub+0x45c>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dsub+0x2a6>
 8000a80:	e15c      	b.n	8000d3c <__aeabi_dsub+0x560>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dsub+0x2ac>
 8000a86:	e1cf      	b.n	8000e28 <__aeabi_dsub+0x64c>
 8000a88:	003a      	movs	r2, r7
 8000a8a:	4302      	orrs	r2, r0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dsub+0x2b4>
 8000a8e:	e17f      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	464a      	mov	r2, r9
 8000a94:	42a3      	cmp	r3, r4
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	1a52      	subs	r2, r2, r1
 8000a9e:	4692      	mov	sl, r2
 8000aa0:	0212      	lsls	r2, r2, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dsub+0x2ca>
 8000aa4:	e20a      	b.n	8000ebc <__aeabi_dsub+0x6e0>
 8000aa6:	1ac4      	subs	r4, r0, r3
 8000aa8:	42a0      	cmp	r0, r4
 8000aaa:	4180      	sbcs	r0, r0
 8000aac:	464b      	mov	r3, r9
 8000aae:	4240      	negs	r0, r0
 8000ab0:	1aff      	subs	r7, r7, r3
 8000ab2:	1a3b      	subs	r3, r7, r0
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	465d      	mov	r5, fp
 8000ab8:	e71a      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000aba:	003a      	movs	r2, r7
 8000abc:	4302      	orrs	r2, r0
 8000abe:	d073      	beq.n	8000ba8 <__aeabi_dsub+0x3cc>
 8000ac0:	0022      	movs	r2, r4
 8000ac2:	3a01      	subs	r2, #1
 8000ac4:	2c01      	cmp	r4, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2ee>
 8000ac8:	e0cb      	b.n	8000c62 <__aeabi_dsub+0x486>
 8000aca:	4554      	cmp	r4, sl
 8000acc:	d042      	beq.n	8000b54 <__aeabi_dsub+0x378>
 8000ace:	4694      	mov	ip, r2
 8000ad0:	e748      	b.n	8000964 <__aeabi_dsub+0x188>
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	3b1f      	subs	r3, #31
 8000ad6:	40d8      	lsrs	r0, r3
 8000ad8:	2920      	cmp	r1, #32
 8000ada:	d003      	beq.n	8000ae4 <__aeabi_dsub+0x308>
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	4314      	orrs	r4, r2
 8000ae4:	1e63      	subs	r3, r4, #1
 8000ae6:	419c      	sbcs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2600      	movs	r6, #0
 8000aec:	469a      	mov	sl, r3
 8000aee:	4304      	orrs	r4, r0
 8000af0:	0763      	lsls	r3, r4, #29
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dsub+0x31a>
 8000af4:	e6fe      	b.n	80008f4 <__aeabi_dsub+0x118>
 8000af6:	4652      	mov	r2, sl
 8000af8:	08e3      	lsrs	r3, r4, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	4313      	orrs	r3, r2
 8000afe:	4652      	mov	r2, sl
 8000b00:	46b4      	mov	ip, r6
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	490f      	ldr	r1, [pc, #60]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b06:	458c      	cmp	ip, r1
 8000b08:	d02a      	beq.n	8000b60 <__aeabi_dsub+0x384>
 8000b0a:	0312      	lsls	r2, r2, #12
 8000b0c:	0b14      	lsrs	r4, r2, #12
 8000b0e:	4662      	mov	r2, ip
 8000b10:	0552      	lsls	r2, r2, #21
 8000b12:	0d52      	lsrs	r2, r2, #21
 8000b14:	e70c      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b16:	003c      	movs	r4, r7
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	1e62      	subs	r2, r4, #1
 8000b1c:	4194      	sbcs	r4, r2
 8000b1e:	18e4      	adds	r4, r4, r3
 8000b20:	429c      	cmp	r4, r3
 8000b22:	4192      	sbcs	r2, r2
 8000b24:	4252      	negs	r2, r2
 8000b26:	444a      	add	r2, r9
 8000b28:	4692      	mov	sl, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	d5df      	bpl.n	8000af0 <__aeabi_dsub+0x314>
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b32:	3601      	adds	r6, #1
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dsub+0x35e>
 8000b38:	e0a0      	b.n	8000c7c <__aeabi_dsub+0x4a0>
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2400      	movs	r4, #0
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e6f6      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	000007ff 	.word	0x000007ff
 8000b48:	ff7fffff 	.word	0xff7fffff
 8000b4c:	fffff801 	.word	0xfffff801
 8000b50:	000007fe 	.word	0x000007fe
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	0752      	lsls	r2, r2, #29
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	08d2      	lsrs	r2, r2, #3
 8000b60:	0019      	movs	r1, r3
 8000b62:	4311      	orrs	r1, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dsub+0x38c>
 8000b66:	e1b5      	b.n	8000ed4 <__aeabi_dsub+0x6f8>
 8000b68:	2480      	movs	r4, #128	; 0x80
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	0324      	lsls	r4, r4, #12
 8000b70:	4ad5      	ldr	r2, [pc, #852]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000b72:	0b24      	lsrs	r4, r4, #12
 8000b74:	e6dc      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b76:	0020      	movs	r0, r4
 8000b78:	f000 fa56 	bl	8001028 <__clzsi2>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	3318      	adds	r3, #24
 8000b80:	2b1f      	cmp	r3, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x3aa>
 8000b84:	e695      	b.n	80008b2 <__aeabi_dsub+0xd6>
 8000b86:	0022      	movs	r2, r4
 8000b88:	3808      	subs	r0, #8
 8000b8a:	4082      	lsls	r2, r0
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_dsub+0x3b8>
 8000b92:	e69a      	b.n	80008ca <__aeabi_dsub+0xee>
 8000b94:	1af6      	subs	r6, r6, r3
 8000b96:	4bcd      	ldr	r3, [pc, #820]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000b98:	401a      	ands	r2, r3
 8000b9a:	4692      	mov	sl, r2
 8000b9c:	e6a8      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000b9e:	003c      	movs	r4, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1e62      	subs	r2, r4, #1
 8000ba4:	4194      	sbcs	r4, r2
 8000ba6:	e66c      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	0752      	lsls	r2, r2, #29
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	08d2      	lsrs	r2, r2, #3
 8000bb4:	e7a6      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000bb6:	4cc6      	ldr	r4, [pc, #792]	; (8000ed0 <__aeabi_dsub+0x6f4>)
 8000bb8:	1c72      	adds	r2, r6, #1
 8000bba:	4222      	tst	r2, r4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dsub+0x3e4>
 8000bbe:	e0ac      	b.n	8000d1a <__aeabi_dsub+0x53e>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dsub+0x3ee>
 8000bc8:	e105      	b.n	8000dd6 <__aeabi_dsub+0x5fa>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dsub+0x3f4>
 8000bce:	e156      	b.n	8000e7e <__aeabi_dsub+0x6a2>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dsub+0x3fc>
 8000bd6:	e0db      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000bd8:	181c      	adds	r4, r3, r0
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	419b      	sbcs	r3, r3
 8000bde:	444f      	add	r7, r9
 8000be0:	46ba      	mov	sl, r7
 8000be2:	425b      	negs	r3, r3
 8000be4:	449a      	add	sl, r3
 8000be6:	4653      	mov	r3, sl
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dsub+0x412>
 8000bec:	e780      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bee:	4652      	mov	r2, sl
 8000bf0:	4bb6      	ldr	r3, [pc, #728]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000bf2:	2601      	movs	r6, #1
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	4692      	mov	sl, r2
 8000bf8:	e77a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bfa:	4cb3      	ldr	r4, [pc, #716]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dsub+0x426>
 8000c00:	e0c0      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 8000c02:	2480      	movs	r4, #128	; 0x80
 8000c04:	464d      	mov	r5, r9
 8000c06:	0424      	lsls	r4, r4, #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	46a9      	mov	r9, r5
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	2c38      	cmp	r4, #56	; 0x38
 8000c10:	dc53      	bgt.n	8000cba <__aeabi_dsub+0x4de>
 8000c12:	4661      	mov	r1, ip
 8000c14:	2c1f      	cmp	r4, #31
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_dsub+0x43e>
 8000c18:	e0cd      	b.n	8000db6 <__aeabi_dsub+0x5da>
 8000c1a:	2520      	movs	r5, #32
 8000c1c:	001e      	movs	r6, r3
 8000c1e:	1b2d      	subs	r5, r5, r4
 8000c20:	464c      	mov	r4, r9
 8000c22:	40ab      	lsls	r3, r5
 8000c24:	40ac      	lsls	r4, r5
 8000c26:	40ce      	lsrs	r6, r1
 8000c28:	1e5d      	subs	r5, r3, #1
 8000c2a:	41ab      	sbcs	r3, r5
 8000c2c:	4334      	orrs	r4, r6
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	464c      	mov	r4, r9
 8000c32:	40cc      	lsrs	r4, r1
 8000c34:	1b3f      	subs	r7, r7, r4
 8000c36:	e045      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1a1c      	subs	r4, r3, r0
 8000c3c:	1bd1      	subs	r1, r2, r7
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	4192      	sbcs	r2, r2
 8000c42:	4252      	negs	r2, r2
 8000c44:	4692      	mov	sl, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	4651      	mov	r1, sl
 8000c4a:	1a52      	subs	r2, r2, r1
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	0212      	lsls	r2, r2, #8
 8000c50:	d500      	bpl.n	8000c54 <__aeabi_dsub+0x478>
 8000c52:	e083      	b.n	8000d5c <__aeabi_dsub+0x580>
 8000c54:	4653      	mov	r3, sl
 8000c56:	4323      	orrs	r3, r4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dsub+0x480>
 8000c5a:	e621      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2500      	movs	r5, #0
 8000c60:	e753      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000c62:	181c      	adds	r4, r3, r0
 8000c64:	429c      	cmp	r4, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	444f      	add	r7, r9
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	449a      	add	sl, r3
 8000c70:	4653      	mov	r3, sl
 8000c72:	2601      	movs	r6, #1
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dsub+0x49e>
 8000c78:	e73a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000c7a:	2602      	movs	r6, #2
 8000c7c:	4652      	mov	r2, sl
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	401a      	ands	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	4021      	ands	r1, r4
 8000c88:	0862      	lsrs	r2, r4, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	07dc      	lsls	r4, r3, #31
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	469a      	mov	sl, r3
 8000c92:	4314      	orrs	r4, r2
 8000c94:	e62c      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000c96:	0039      	movs	r1, r7
 8000c98:	3a20      	subs	r2, #32
 8000c9a:	40d1      	lsrs	r1, r2
 8000c9c:	4662      	mov	r2, ip
 8000c9e:	2a20      	cmp	r2, #32
 8000ca0:	d006      	beq.n	8000cb0 <__aeabi_dsub+0x4d4>
 8000ca2:	4664      	mov	r4, ip
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	1b12      	subs	r2, r2, r4
 8000ca8:	003c      	movs	r4, r7
 8000caa:	4094      	lsls	r4, r2
 8000cac:	4304      	orrs	r4, r0
 8000cae:	9401      	str	r4, [sp, #4]
 8000cb0:	9c01      	ldr	r4, [sp, #4]
 8000cb2:	1e62      	subs	r2, r4, #1
 8000cb4:	4194      	sbcs	r4, r2
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	e5e3      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4319      	orrs	r1, r3
 8000cbe:	000b      	movs	r3, r1
 8000cc0:	1e5c      	subs	r4, r3, #1
 8000cc2:	41a3      	sbcs	r3, r4
 8000cc4:	1ac4      	subs	r4, r0, r3
 8000cc6:	42a0      	cmp	r0, r4
 8000cc8:	419b      	sbcs	r3, r3
 8000cca:	425b      	negs	r3, r3
 8000ccc:	1afb      	subs	r3, r7, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	465d      	mov	r5, fp
 8000cd2:	0016      	movs	r6, r2
 8000cd4:	e5dc      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	d100      	bne.n	8000cde <__aeabi_dsub+0x502>
 8000cdc:	e0ae      	b.n	8000e3c <__aeabi_dsub+0x660>
 8000cde:	4661      	mov	r1, ip
 8000ce0:	4664      	mov	r4, ip
 8000ce2:	3901      	subs	r1, #1
 8000ce4:	2c01      	cmp	r4, #1
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dsub+0x50e>
 8000ce8:	e0e0      	b.n	8000eac <__aeabi_dsub+0x6d0>
 8000cea:	4c77      	ldr	r4, [pc, #476]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d056      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	e69a      	b.n	8000a2a <__aeabi_dsub+0x24e>
 8000cf4:	4661      	mov	r1, ip
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	003c      	movs	r4, r7
 8000cfa:	1a52      	subs	r2, r2, r1
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	0001      	movs	r1, r0
 8000d00:	4090      	lsls	r0, r2
 8000d02:	46a0      	mov	r8, r4
 8000d04:	4664      	mov	r4, ip
 8000d06:	1e42      	subs	r2, r0, #1
 8000d08:	4190      	sbcs	r0, r2
 8000d0a:	4662      	mov	r2, ip
 8000d0c:	40e1      	lsrs	r1, r4
 8000d0e:	4644      	mov	r4, r8
 8000d10:	40d7      	lsrs	r7, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	4304      	orrs	r4, r0
 8000d16:	44b9      	add	r9, r7
 8000d18:	e701      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000d1a:	496b      	ldr	r1, [pc, #428]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dsub+0x546>
 8000d20:	e70c      	b.n	8000b3c <__aeabi_dsub+0x360>
 8000d22:	1818      	adds	r0, r3, r0
 8000d24:	4298      	cmp	r0, r3
 8000d26:	419b      	sbcs	r3, r3
 8000d28:	444f      	add	r7, r9
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	07dc      	lsls	r4, r3, #31
 8000d30:	0840      	lsrs	r0, r0, #1
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	469a      	mov	sl, r3
 8000d36:	0016      	movs	r6, r2
 8000d38:	4304      	orrs	r4, r0
 8000d3a:	e6d9      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_dsub+0x566>
 8000d40:	e081      	b.n	8000e46 <__aeabi_dsub+0x66a>
 8000d42:	003b      	movs	r3, r7
 8000d44:	4303      	orrs	r3, r0
 8000d46:	d11d      	bne.n	8000d84 <__aeabi_dsub+0x5a8>
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	e70b      	b.n	8000b68 <__aeabi_dsub+0x38c>
 8000d50:	08c0      	lsrs	r0, r0, #3
 8000d52:	077b      	lsls	r3, r7, #29
 8000d54:	465d      	mov	r5, fp
 8000d56:	4303      	orrs	r3, r0
 8000d58:	08fa      	lsrs	r2, r7, #3
 8000d5a:	e6d3      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000d5c:	1ac4      	subs	r4, r0, r3
 8000d5e:	42a0      	cmp	r0, r4
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	464b      	mov	r3, r9
 8000d64:	4240      	negs	r0, r0
 8000d66:	1aff      	subs	r7, r7, r3
 8000d68:	1a3b      	subs	r3, r7, r0
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	465d      	mov	r5, fp
 8000d6e:	e597      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	464a      	mov	r2, r9
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	419b      	sbcs	r3, r3
 8000d78:	1bd7      	subs	r7, r2, r7
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	1afb      	subs	r3, r7, r3
 8000d7e:	469a      	mov	sl, r3
 8000d80:	2601      	movs	r6, #1
 8000d82:	e585      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	077b      	lsls	r3, r7, #29
 8000d88:	465d      	mov	r5, fp
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	08fa      	lsrs	r2, r7, #3
 8000d8e:	e6e7      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000d90:	464a      	mov	r2, r9
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	0752      	lsls	r2, r2, #29
 8000d96:	4313      	orrs	r3, r2
 8000d98:	464a      	mov	r2, r9
 8000d9a:	08d2      	lsrs	r2, r2, #3
 8000d9c:	e6b5      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	077b      	lsls	r3, r7, #29
 8000da2:	4303      	orrs	r3, r0
 8000da4:	08fa      	lsrs	r2, r7, #3
 8000da6:	e6db      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000da8:	4649      	mov	r1, r9
 8000daa:	4319      	orrs	r1, r3
 8000dac:	000b      	movs	r3, r1
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	418b      	sbcs	r3, r1
 8000db2:	001c      	movs	r4, r3
 8000db4:	e653      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000db6:	464d      	mov	r5, r9
 8000db8:	3c20      	subs	r4, #32
 8000dba:	40e5      	lsrs	r5, r4
 8000dbc:	2920      	cmp	r1, #32
 8000dbe:	d005      	beq.n	8000dcc <__aeabi_dsub+0x5f0>
 8000dc0:	2440      	movs	r4, #64	; 0x40
 8000dc2:	1a64      	subs	r4, r4, r1
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	40a1      	lsls	r1, r4
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4643      	mov	r3, r8
 8000dce:	1e5c      	subs	r4, r3, #1
 8000dd0:	41a3      	sbcs	r3, r4
 8000dd2:	432b      	orrs	r3, r5
 8000dd4:	e776      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d0e1      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000dda:	003a      	movs	r2, r7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	4302      	orrs	r2, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dsub+0x608>
 8000de2:	e6b8      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000de4:	464a      	mov	r2, r9
 8000de6:	0752      	lsls	r2, r2, #29
 8000de8:	2480      	movs	r4, #128	; 0x80
 8000dea:	4313      	orrs	r3, r2
 8000dec:	464a      	mov	r2, r9
 8000dee:	0324      	lsls	r4, r4, #12
 8000df0:	08d2      	lsrs	r2, r2, #3
 8000df2:	4222      	tst	r2, r4
 8000df4:	d007      	beq.n	8000e06 <__aeabi_dsub+0x62a>
 8000df6:	08fe      	lsrs	r6, r7, #3
 8000df8:	4226      	tst	r6, r4
 8000dfa:	d104      	bne.n	8000e06 <__aeabi_dsub+0x62a>
 8000dfc:	465d      	mov	r5, fp
 8000dfe:	0032      	movs	r2, r6
 8000e00:	08c3      	lsrs	r3, r0, #3
 8000e02:	077f      	lsls	r7, r7, #29
 8000e04:	433b      	orrs	r3, r7
 8000e06:	0f59      	lsrs	r1, r3, #29
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	0749      	lsls	r1, r1, #29
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	e6a6      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e12:	1ac4      	subs	r4, r0, r3
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	4180      	sbcs	r0, r0
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	1aff      	subs	r7, r7, r3
 8000e1e:	1a3b      	subs	r3, r7, r0
 8000e20:	469a      	mov	sl, r3
 8000e22:	465d      	mov	r5, fp
 8000e24:	2601      	movs	r6, #1
 8000e26:	e533      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000e28:	003b      	movs	r3, r7
 8000e2a:	4303      	orrs	r3, r0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dsub+0x654>
 8000e2e:	e715      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000e30:	08c0      	lsrs	r0, r0, #3
 8000e32:	077b      	lsls	r3, r7, #29
 8000e34:	465d      	mov	r5, fp
 8000e36:	4303      	orrs	r3, r0
 8000e38:	08fa      	lsrs	r2, r7, #3
 8000e3a:	e666      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	077b      	lsls	r3, r7, #29
 8000e40:	4303      	orrs	r3, r0
 8000e42:	08fa      	lsrs	r2, r7, #3
 8000e44:	e65e      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000e46:	003a      	movs	r2, r7
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x674>
 8000e4e:	e682      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000e50:	464a      	mov	r2, r9
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	2480      	movs	r4, #128	; 0x80
 8000e56:	4313      	orrs	r3, r2
 8000e58:	464a      	mov	r2, r9
 8000e5a:	0324      	lsls	r4, r4, #12
 8000e5c:	08d2      	lsrs	r2, r2, #3
 8000e5e:	4222      	tst	r2, r4
 8000e60:	d007      	beq.n	8000e72 <__aeabi_dsub+0x696>
 8000e62:	08fe      	lsrs	r6, r7, #3
 8000e64:	4226      	tst	r6, r4
 8000e66:	d104      	bne.n	8000e72 <__aeabi_dsub+0x696>
 8000e68:	465d      	mov	r5, fp
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	08c3      	lsrs	r3, r0, #3
 8000e6e:	077f      	lsls	r7, r7, #29
 8000e70:	433b      	orrs	r3, r7
 8000e72:	0f59      	lsrs	r1, r3, #29
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0749      	lsls	r1, r1, #29
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	e670      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	077b      	lsls	r3, r7, #29
 8000e82:	4303      	orrs	r3, r0
 8000e84:	08fa      	lsrs	r2, r7, #3
 8000e86:	e640      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e88:	464c      	mov	r4, r9
 8000e8a:	3920      	subs	r1, #32
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4661      	mov	r1, ip
 8000e90:	2920      	cmp	r1, #32
 8000e92:	d006      	beq.n	8000ea2 <__aeabi_dsub+0x6c6>
 8000e94:	4666      	mov	r6, ip
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	1b89      	subs	r1, r1, r6
 8000e9a:	464e      	mov	r6, r9
 8000e9c:	408e      	lsls	r6, r1
 8000e9e:	4333      	orrs	r3, r6
 8000ea0:	4698      	mov	r8, r3
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1e59      	subs	r1, r3, #1
 8000ea6:	418b      	sbcs	r3, r1
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	e5d8      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000eac:	181c      	adds	r4, r3, r0
 8000eae:	4284      	cmp	r4, r0
 8000eb0:	4180      	sbcs	r0, r0
 8000eb2:	444f      	add	r7, r9
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	4482      	add	sl, r0
 8000eba:	e6d9      	b.n	8000c70 <__aeabi_dsub+0x494>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x6e8>
 8000ec2:	e6cb      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000ec4:	e614      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	000007fe 	.word	0x000007fe
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4a01      	ldr	r2, [pc, #4]	; (8000edc <__aeabi_dsub+0x700>)
 8000ed8:	001c      	movs	r4, r3
 8000eda:	e529      	b.n	8000930 <__aeabi_dsub+0x154>
 8000edc:	000007ff 	.word	0x000007ff

08000ee0 <__aeabi_d2iz>:
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	b530      	push	{r4, r5, lr}
 8000ee4:	4c13      	ldr	r4, [pc, #76]	; (8000f34 <__aeabi_d2iz+0x54>)
 8000ee6:	0053      	lsls	r3, r2, #1
 8000ee8:	0309      	lsls	r1, r1, #12
 8000eea:	0005      	movs	r5, r0
 8000eec:	0b09      	lsrs	r1, r1, #12
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	0fd2      	lsrs	r2, r2, #31
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	dd04      	ble.n	8000f02 <__aeabi_d2iz+0x22>
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <__aeabi_d2iz+0x58>)
 8000efa:	4283      	cmp	r3, r0
 8000efc:	dd02      	ble.n	8000f04 <__aeabi_d2iz+0x24>
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <__aeabi_d2iz+0x5c>)
 8000f00:	18d0      	adds	r0, r2, r3
 8000f02:	bd30      	pop	{r4, r5, pc}
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	0340      	lsls	r0, r0, #13
 8000f08:	4301      	orrs	r1, r0
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <__aeabi_d2iz+0x60>)
 8000f0c:	1ac0      	subs	r0, r0, r3
 8000f0e:	281f      	cmp	r0, #31
 8000f10:	dd08      	ble.n	8000f24 <__aeabi_d2iz+0x44>
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <__aeabi_d2iz+0x64>)
 8000f14:	1ac3      	subs	r3, r0, r3
 8000f16:	40d9      	lsrs	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	4258      	negs	r0, r3
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1f0      	bne.n	8000f02 <__aeabi_d2iz+0x22>
 8000f20:	0018      	movs	r0, r3
 8000f22:	e7ee      	b.n	8000f02 <__aeabi_d2iz+0x22>
 8000f24:	4c08      	ldr	r4, [pc, #32]	; (8000f48 <__aeabi_d2iz+0x68>)
 8000f26:	40c5      	lsrs	r5, r0
 8000f28:	46a4      	mov	ip, r4
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4099      	lsls	r1, r3
 8000f2e:	000b      	movs	r3, r1
 8000f30:	432b      	orrs	r3, r5
 8000f32:	e7f2      	b.n	8000f1a <__aeabi_d2iz+0x3a>
 8000f34:	000003fe 	.word	0x000003fe
 8000f38:	0000041d 	.word	0x0000041d
 8000f3c:	7fffffff 	.word	0x7fffffff
 8000f40:	00000433 	.word	0x00000433
 8000f44:	00000413 	.word	0x00000413
 8000f48:	fffffbed 	.word	0xfffffbed

08000f4c <__aeabi_i2d>:
 8000f4c:	b570      	push	{r4, r5, r6, lr}
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d016      	beq.n	8000f80 <__aeabi_i2d+0x34>
 8000f52:	17c3      	asrs	r3, r0, #31
 8000f54:	18c5      	adds	r5, r0, r3
 8000f56:	405d      	eors	r5, r3
 8000f58:	0fc4      	lsrs	r4, r0, #31
 8000f5a:	0028      	movs	r0, r5
 8000f5c:	f000 f864 	bl	8001028 <__clzsi2>
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <__aeabi_i2d+0x5c>)
 8000f62:	1a1b      	subs	r3, r3, r0
 8000f64:	280a      	cmp	r0, #10
 8000f66:	dc16      	bgt.n	8000f96 <__aeabi_i2d+0x4a>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	002e      	movs	r6, r5
 8000f6c:	3215      	adds	r2, #21
 8000f6e:	4096      	lsls	r6, r2
 8000f70:	220b      	movs	r2, #11
 8000f72:	1a12      	subs	r2, r2, r0
 8000f74:	40d5      	lsrs	r5, r2
 8000f76:	055b      	lsls	r3, r3, #21
 8000f78:	032d      	lsls	r5, r5, #12
 8000f7a:	0b2d      	lsrs	r5, r5, #12
 8000f7c:	0d5b      	lsrs	r3, r3, #21
 8000f7e:	e003      	b.n	8000f88 <__aeabi_i2d+0x3c>
 8000f80:	2400      	movs	r4, #0
 8000f82:	2300      	movs	r3, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	2600      	movs	r6, #0
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	432b      	orrs	r3, r5
 8000f8c:	07e4      	lsls	r4, r4, #31
 8000f8e:	4323      	orrs	r3, r4
 8000f90:	0030      	movs	r0, r6
 8000f92:	0019      	movs	r1, r3
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	380b      	subs	r0, #11
 8000f98:	4085      	lsls	r5, r0
 8000f9a:	055b      	lsls	r3, r3, #21
 8000f9c:	032d      	lsls	r5, r5, #12
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	0b2d      	lsrs	r5, r5, #12
 8000fa2:	0d5b      	lsrs	r3, r3, #21
 8000fa4:	e7f0      	b.n	8000f88 <__aeabi_i2d+0x3c>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	0000041e 	.word	0x0000041e

08000fac <__aeabi_cdrcmple>:
 8000fac:	4684      	mov	ip, r0
 8000fae:	0010      	movs	r0, r2
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	4663      	mov	r3, ip
 8000fb8:	e000      	b.n	8000fbc <__aeabi_cdcmpeq>
 8000fba:	46c0      	nop			; (mov r8, r8)

08000fbc <__aeabi_cdcmpeq>:
 8000fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000fbe:	f000 f8f9 	bl	80011b4 <__ledf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d401      	bmi.n	8000fca <__aeabi_cdcmpeq+0xe>
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	42c8      	cmn	r0, r1
 8000fca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fcc <__aeabi_dcmpeq>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	f000 f849 	bl	8001064 <__eqdf2>
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <__aeabi_dcmplt>:
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	f000 f8eb 	bl	80011b4 <__ledf2>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	db01      	blt.n	8000fe6 <__aeabi_dcmplt+0xe>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)

08000fec <__aeabi_dcmple>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	f000 f8e1 	bl	80011b4 <__ledf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	dd01      	ble.n	8000ffa <__aeabi_dcmple+0xe>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	bd10      	pop	{r4, pc}
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)

08001000 <__aeabi_dcmpgt>:
 8001000:	b510      	push	{r4, lr}
 8001002:	f000 f871 	bl	80010e8 <__gedf2>
 8001006:	2800      	cmp	r0, #0
 8001008:	dc01      	bgt.n	800100e <__aeabi_dcmpgt+0xe>
 800100a:	2000      	movs	r0, #0
 800100c:	bd10      	pop	{r4, pc}
 800100e:	2001      	movs	r0, #1
 8001010:	bd10      	pop	{r4, pc}
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__aeabi_dcmpge>:
 8001014:	b510      	push	{r4, lr}
 8001016:	f000 f867 	bl	80010e8 <__gedf2>
 800101a:	2800      	cmp	r0, #0
 800101c:	da01      	bge.n	8001022 <__aeabi_dcmpge+0xe>
 800101e:	2000      	movs	r0, #0
 8001020:	bd10      	pop	{r4, pc}
 8001022:	2001      	movs	r0, #1
 8001024:	bd10      	pop	{r4, pc}
 8001026:	46c0      	nop			; (mov r8, r8)

08001028 <__clzsi2>:
 8001028:	211c      	movs	r1, #28
 800102a:	2301      	movs	r3, #1
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	4298      	cmp	r0, r3
 8001030:	d301      	bcc.n	8001036 <__clzsi2+0xe>
 8001032:	0c00      	lsrs	r0, r0, #16
 8001034:	3910      	subs	r1, #16
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	4298      	cmp	r0, r3
 800103a:	d301      	bcc.n	8001040 <__clzsi2+0x18>
 800103c:	0a00      	lsrs	r0, r0, #8
 800103e:	3908      	subs	r1, #8
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	4298      	cmp	r0, r3
 8001044:	d301      	bcc.n	800104a <__clzsi2+0x22>
 8001046:	0900      	lsrs	r0, r0, #4
 8001048:	3904      	subs	r1, #4
 800104a:	a202      	add	r2, pc, #8	; (adr r2, 8001054 <__clzsi2+0x2c>)
 800104c:	5c10      	ldrb	r0, [r2, r0]
 800104e:	1840      	adds	r0, r0, r1
 8001050:	4770      	bx	lr
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	02020304 	.word	0x02020304
 8001058:	01010101 	.word	0x01010101
	...

08001064 <__eqdf2>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	464e      	mov	r6, r9
 8001068:	4645      	mov	r5, r8
 800106a:	46de      	mov	lr, fp
 800106c:	4657      	mov	r7, sl
 800106e:	4690      	mov	r8, r2
 8001070:	b5e0      	push	{r5, r6, r7, lr}
 8001072:	0017      	movs	r7, r2
 8001074:	031a      	lsls	r2, r3, #12
 8001076:	0b12      	lsrs	r2, r2, #12
 8001078:	0005      	movs	r5, r0
 800107a:	4684      	mov	ip, r0
 800107c:	4819      	ldr	r0, [pc, #100]	; (80010e4 <__eqdf2+0x80>)
 800107e:	030e      	lsls	r6, r1, #12
 8001080:	004c      	lsls	r4, r1, #1
 8001082:	4691      	mov	r9, r2
 8001084:	005a      	lsls	r2, r3, #1
 8001086:	0fdb      	lsrs	r3, r3, #31
 8001088:	469b      	mov	fp, r3
 800108a:	0b36      	lsrs	r6, r6, #12
 800108c:	0d64      	lsrs	r4, r4, #21
 800108e:	0fc9      	lsrs	r1, r1, #31
 8001090:	0d52      	lsrs	r2, r2, #21
 8001092:	4284      	cmp	r4, r0
 8001094:	d019      	beq.n	80010ca <__eqdf2+0x66>
 8001096:	4282      	cmp	r2, r0
 8001098:	d010      	beq.n	80010bc <__eqdf2+0x58>
 800109a:	2001      	movs	r0, #1
 800109c:	4294      	cmp	r4, r2
 800109e:	d10e      	bne.n	80010be <__eqdf2+0x5a>
 80010a0:	454e      	cmp	r6, r9
 80010a2:	d10c      	bne.n	80010be <__eqdf2+0x5a>
 80010a4:	2001      	movs	r0, #1
 80010a6:	45c4      	cmp	ip, r8
 80010a8:	d109      	bne.n	80010be <__eqdf2+0x5a>
 80010aa:	4559      	cmp	r1, fp
 80010ac:	d017      	beq.n	80010de <__eqdf2+0x7a>
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	d105      	bne.n	80010be <__eqdf2+0x5a>
 80010b2:	0030      	movs	r0, r6
 80010b4:	4328      	orrs	r0, r5
 80010b6:	1e43      	subs	r3, r0, #1
 80010b8:	4198      	sbcs	r0, r3
 80010ba:	e000      	b.n	80010be <__eqdf2+0x5a>
 80010bc:	2001      	movs	r0, #1
 80010be:	bcf0      	pop	{r4, r5, r6, r7}
 80010c0:	46bb      	mov	fp, r7
 80010c2:	46b2      	mov	sl, r6
 80010c4:	46a9      	mov	r9, r5
 80010c6:	46a0      	mov	r8, r4
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	0033      	movs	r3, r6
 80010cc:	2001      	movs	r0, #1
 80010ce:	432b      	orrs	r3, r5
 80010d0:	d1f5      	bne.n	80010be <__eqdf2+0x5a>
 80010d2:	42a2      	cmp	r2, r4
 80010d4:	d1f3      	bne.n	80010be <__eqdf2+0x5a>
 80010d6:	464b      	mov	r3, r9
 80010d8:	433b      	orrs	r3, r7
 80010da:	d1f0      	bne.n	80010be <__eqdf2+0x5a>
 80010dc:	e7e2      	b.n	80010a4 <__eqdf2+0x40>
 80010de:	2000      	movs	r0, #0
 80010e0:	e7ed      	b.n	80010be <__eqdf2+0x5a>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	000007ff 	.word	0x000007ff

080010e8 <__gedf2>:
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	4647      	mov	r7, r8
 80010ec:	46ce      	mov	lr, r9
 80010ee:	0004      	movs	r4, r0
 80010f0:	0018      	movs	r0, r3
 80010f2:	0016      	movs	r6, r2
 80010f4:	031b      	lsls	r3, r3, #12
 80010f6:	0b1b      	lsrs	r3, r3, #12
 80010f8:	4d2d      	ldr	r5, [pc, #180]	; (80011b0 <__gedf2+0xc8>)
 80010fa:	004a      	lsls	r2, r1, #1
 80010fc:	4699      	mov	r9, r3
 80010fe:	b580      	push	{r7, lr}
 8001100:	0043      	lsls	r3, r0, #1
 8001102:	030f      	lsls	r7, r1, #12
 8001104:	46a4      	mov	ip, r4
 8001106:	46b0      	mov	r8, r6
 8001108:	0b3f      	lsrs	r7, r7, #12
 800110a:	0d52      	lsrs	r2, r2, #21
 800110c:	0fc9      	lsrs	r1, r1, #31
 800110e:	0d5b      	lsrs	r3, r3, #21
 8001110:	0fc0      	lsrs	r0, r0, #31
 8001112:	42aa      	cmp	r2, r5
 8001114:	d021      	beq.n	800115a <__gedf2+0x72>
 8001116:	42ab      	cmp	r3, r5
 8001118:	d013      	beq.n	8001142 <__gedf2+0x5a>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d122      	bne.n	8001164 <__gedf2+0x7c>
 800111e:	433c      	orrs	r4, r7
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <__gedf2+0x42>
 8001124:	464d      	mov	r5, r9
 8001126:	432e      	orrs	r6, r5
 8001128:	d022      	beq.n	8001170 <__gedf2+0x88>
 800112a:	2c00      	cmp	r4, #0
 800112c:	d010      	beq.n	8001150 <__gedf2+0x68>
 800112e:	4281      	cmp	r1, r0
 8001130:	d022      	beq.n	8001178 <__gedf2+0x90>
 8001132:	2002      	movs	r0, #2
 8001134:	3901      	subs	r1, #1
 8001136:	4008      	ands	r0, r1
 8001138:	3801      	subs	r0, #1
 800113a:	bcc0      	pop	{r6, r7}
 800113c:	46b9      	mov	r9, r7
 800113e:	46b0      	mov	r8, r6
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001142:	464d      	mov	r5, r9
 8001144:	432e      	orrs	r6, r5
 8001146:	d129      	bne.n	800119c <__gedf2+0xb4>
 8001148:	2a00      	cmp	r2, #0
 800114a:	d1f0      	bne.n	800112e <__gedf2+0x46>
 800114c:	433c      	orrs	r4, r7
 800114e:	d1ee      	bne.n	800112e <__gedf2+0x46>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1f2      	bne.n	800113a <__gedf2+0x52>
 8001154:	2001      	movs	r0, #1
 8001156:	4240      	negs	r0, r0
 8001158:	e7ef      	b.n	800113a <__gedf2+0x52>
 800115a:	003d      	movs	r5, r7
 800115c:	4325      	orrs	r5, r4
 800115e:	d11d      	bne.n	800119c <__gedf2+0xb4>
 8001160:	4293      	cmp	r3, r2
 8001162:	d0ee      	beq.n	8001142 <__gedf2+0x5a>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e2      	bne.n	800112e <__gedf2+0x46>
 8001168:	464c      	mov	r4, r9
 800116a:	4326      	orrs	r6, r4
 800116c:	d1df      	bne.n	800112e <__gedf2+0x46>
 800116e:	e7e0      	b.n	8001132 <__gedf2+0x4a>
 8001170:	2000      	movs	r0, #0
 8001172:	2c00      	cmp	r4, #0
 8001174:	d0e1      	beq.n	800113a <__gedf2+0x52>
 8001176:	e7dc      	b.n	8001132 <__gedf2+0x4a>
 8001178:	429a      	cmp	r2, r3
 800117a:	dc0a      	bgt.n	8001192 <__gedf2+0xaa>
 800117c:	dbe8      	blt.n	8001150 <__gedf2+0x68>
 800117e:	454f      	cmp	r7, r9
 8001180:	d8d7      	bhi.n	8001132 <__gedf2+0x4a>
 8001182:	d00e      	beq.n	80011a2 <__gedf2+0xba>
 8001184:	2000      	movs	r0, #0
 8001186:	454f      	cmp	r7, r9
 8001188:	d2d7      	bcs.n	800113a <__gedf2+0x52>
 800118a:	2900      	cmp	r1, #0
 800118c:	d0e2      	beq.n	8001154 <__gedf2+0x6c>
 800118e:	0008      	movs	r0, r1
 8001190:	e7d3      	b.n	800113a <__gedf2+0x52>
 8001192:	4243      	negs	r3, r0
 8001194:	4158      	adcs	r0, r3
 8001196:	0040      	lsls	r0, r0, #1
 8001198:	3801      	subs	r0, #1
 800119a:	e7ce      	b.n	800113a <__gedf2+0x52>
 800119c:	2002      	movs	r0, #2
 800119e:	4240      	negs	r0, r0
 80011a0:	e7cb      	b.n	800113a <__gedf2+0x52>
 80011a2:	45c4      	cmp	ip, r8
 80011a4:	d8c5      	bhi.n	8001132 <__gedf2+0x4a>
 80011a6:	2000      	movs	r0, #0
 80011a8:	45c4      	cmp	ip, r8
 80011aa:	d2c6      	bcs.n	800113a <__gedf2+0x52>
 80011ac:	e7ed      	b.n	800118a <__gedf2+0xa2>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	000007ff 	.word	0x000007ff

080011b4 <__ledf2>:
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	4647      	mov	r7, r8
 80011b8:	46ce      	mov	lr, r9
 80011ba:	0004      	movs	r4, r0
 80011bc:	0018      	movs	r0, r3
 80011be:	0016      	movs	r6, r2
 80011c0:	031b      	lsls	r3, r3, #12
 80011c2:	0b1b      	lsrs	r3, r3, #12
 80011c4:	4d2c      	ldr	r5, [pc, #176]	; (8001278 <__ledf2+0xc4>)
 80011c6:	004a      	lsls	r2, r1, #1
 80011c8:	4699      	mov	r9, r3
 80011ca:	b580      	push	{r7, lr}
 80011cc:	0043      	lsls	r3, r0, #1
 80011ce:	030f      	lsls	r7, r1, #12
 80011d0:	46a4      	mov	ip, r4
 80011d2:	46b0      	mov	r8, r6
 80011d4:	0b3f      	lsrs	r7, r7, #12
 80011d6:	0d52      	lsrs	r2, r2, #21
 80011d8:	0fc9      	lsrs	r1, r1, #31
 80011da:	0d5b      	lsrs	r3, r3, #21
 80011dc:	0fc0      	lsrs	r0, r0, #31
 80011de:	42aa      	cmp	r2, r5
 80011e0:	d00d      	beq.n	80011fe <__ledf2+0x4a>
 80011e2:	42ab      	cmp	r3, r5
 80011e4:	d010      	beq.n	8001208 <__ledf2+0x54>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d127      	bne.n	800123a <__ledf2+0x86>
 80011ea:	433c      	orrs	r4, r7
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d111      	bne.n	8001214 <__ledf2+0x60>
 80011f0:	464d      	mov	r5, r9
 80011f2:	432e      	orrs	r6, r5
 80011f4:	d10e      	bne.n	8001214 <__ledf2+0x60>
 80011f6:	2000      	movs	r0, #0
 80011f8:	2c00      	cmp	r4, #0
 80011fa:	d015      	beq.n	8001228 <__ledf2+0x74>
 80011fc:	e00e      	b.n	800121c <__ledf2+0x68>
 80011fe:	003d      	movs	r5, r7
 8001200:	4325      	orrs	r5, r4
 8001202:	d110      	bne.n	8001226 <__ledf2+0x72>
 8001204:	4293      	cmp	r3, r2
 8001206:	d118      	bne.n	800123a <__ledf2+0x86>
 8001208:	464d      	mov	r5, r9
 800120a:	432e      	orrs	r6, r5
 800120c:	d10b      	bne.n	8001226 <__ledf2+0x72>
 800120e:	2a00      	cmp	r2, #0
 8001210:	d102      	bne.n	8001218 <__ledf2+0x64>
 8001212:	433c      	orrs	r4, r7
 8001214:	2c00      	cmp	r4, #0
 8001216:	d00b      	beq.n	8001230 <__ledf2+0x7c>
 8001218:	4281      	cmp	r1, r0
 800121a:	d014      	beq.n	8001246 <__ledf2+0x92>
 800121c:	2002      	movs	r0, #2
 800121e:	3901      	subs	r1, #1
 8001220:	4008      	ands	r0, r1
 8001222:	3801      	subs	r0, #1
 8001224:	e000      	b.n	8001228 <__ledf2+0x74>
 8001226:	2002      	movs	r0, #2
 8001228:	bcc0      	pop	{r6, r7}
 800122a:	46b9      	mov	r9, r7
 800122c:	46b0      	mov	r8, r6
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f9      	bne.n	8001228 <__ledf2+0x74>
 8001234:	2001      	movs	r0, #1
 8001236:	4240      	negs	r0, r0
 8001238:	e7f6      	b.n	8001228 <__ledf2+0x74>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ec      	bne.n	8001218 <__ledf2+0x64>
 800123e:	464c      	mov	r4, r9
 8001240:	4326      	orrs	r6, r4
 8001242:	d1e9      	bne.n	8001218 <__ledf2+0x64>
 8001244:	e7ea      	b.n	800121c <__ledf2+0x68>
 8001246:	429a      	cmp	r2, r3
 8001248:	dd04      	ble.n	8001254 <__ledf2+0xa0>
 800124a:	4243      	negs	r3, r0
 800124c:	4158      	adcs	r0, r3
 800124e:	0040      	lsls	r0, r0, #1
 8001250:	3801      	subs	r0, #1
 8001252:	e7e9      	b.n	8001228 <__ledf2+0x74>
 8001254:	429a      	cmp	r2, r3
 8001256:	dbeb      	blt.n	8001230 <__ledf2+0x7c>
 8001258:	454f      	cmp	r7, r9
 800125a:	d8df      	bhi.n	800121c <__ledf2+0x68>
 800125c:	d006      	beq.n	800126c <__ledf2+0xb8>
 800125e:	2000      	movs	r0, #0
 8001260:	454f      	cmp	r7, r9
 8001262:	d2e1      	bcs.n	8001228 <__ledf2+0x74>
 8001264:	2900      	cmp	r1, #0
 8001266:	d0e5      	beq.n	8001234 <__ledf2+0x80>
 8001268:	0008      	movs	r0, r1
 800126a:	e7dd      	b.n	8001228 <__ledf2+0x74>
 800126c:	45c4      	cmp	ip, r8
 800126e:	d8d5      	bhi.n	800121c <__ledf2+0x68>
 8001270:	2000      	movs	r0, #0
 8001272:	45c4      	cmp	ip, r8
 8001274:	d2d8      	bcs.n	8001228 <__ledf2+0x74>
 8001276:	e7f5      	b.n	8001264 <__ledf2+0xb0>
 8001278:	000007ff 	.word	0x000007ff

0800127c <main>:
uint8_t display_select = 0;						//initial display selection (rightmost middle display)
uint8_t hold = 0;								//used for multiplexing larger displays

//Main code
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	//Initializations
	HAL_Init();					//initialize all peripherals, flash interface, and Systick
 8001280:	f001 f9cc 	bl	800261c <HAL_Init>
	SystemClock_Config();		//configure system clock (8 MHz)
 8001284:	f000 f88a 	bl	800139c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 faee 	bl	8001868 <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f000 face 	bl	800182c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001290:	f000 fa9c 	bl	80017cc <MX_USART2_UART_Init>

  MX_TIM1_Init();
 8001294:	f000 f8da 	bl	800144c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001298:	f000 f998 	bl	80015cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800129c:	f000 f9ea 	bl	8001674 <MX_TIM3_Init>
  MX_TIM15_Init();
 80012a0:	f000 fa3e 	bl	8001720 <MX_TIM15_Init>

  /* Start acceleration timer and multiplexing timer */
  HAL_TIM_Base_Start_IT(&htim3);
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <main+0xe4>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 f81c 	bl	80042e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <main+0xe8>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f003 f818 	bl	80042e4 <HAL_TIM_Base_Start_IT>

  /* Initialize rxdata to receive data over UART  */
  HAL_UART_Receive_DMA(&huart2, rxdata, sizeof(rxdata));
 80012b4:	492c      	ldr	r1, [pc, #176]	; (8001368 <main+0xec>)
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <main+0xf0>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	0018      	movs	r0, r3
 80012bc:	f004 f9e8 	bl	8005690 <HAL_UART_Receive_DMA>

  /* Initialize PWM signals */
  HAL_Delay(3000);				//delay 3s to allow for tolerance w motor drivers
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <main+0xf4>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 fa0e 	bl	80026e4 <HAL_Delay>
  TIM1->CCR1 = 175;
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <main+0xf8>)
 80012ca:	22af      	movs	r2, #175	; 0xaf
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR3 = 175;
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <main+0xf8>)
 80012d0:	22af      	movs	r2, #175	; 0xaf
 80012d2:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->ARR = 350;
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <main+0xf8>)
 80012d6:	22af      	movs	r2, #175	; 0xaf
 80012d8:	0052      	lsls	r2, r2, #1
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <main+0xfc>)
 80012de:	2100      	movs	r1, #0
 80012e0:	0018      	movs	r0, r3
 80012e2:	f003 f98f 	bl	8004604 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <main+0xfc>)
 80012e8:	2108      	movs	r1, #8
 80012ea:	0018      	movs	r0, r3
 80012ec:	f003 f98a 	bl	8004604 <HAL_TIM_PWM_Stop>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //scan for each direction flag and enter the given functions accordingly
	  if(down_flag){down();}
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <main+0x100>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <main+0x82>
 80012f8:	f000 fc22 	bl	8001b40 <down>
 80012fc:	e7f8      	b.n	80012f0 <main+0x74>
	  else if(up_flag){up();}
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <main+0x104>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <main+0x90>
 8001306:	f000 fc4b 	bl	8001ba0 <up>
 800130a:	e7f1      	b.n	80012f0 <main+0x74>
	  else if(left_flag){left();}
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <main+0x108>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <main+0x9e>
 8001314:	f000 fc74 	bl	8001c00 <left>
 8001318:	e7ea      	b.n	80012f0 <main+0x74>
	  else if(righ_flag){righ();}
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <main+0x10c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <main+0xac>
 8001322:	f000 fc93 	bl	8001c4c <righ>
 8001326:	e7e3      	b.n	80012f0 <main+0x74>
	  else if(dl_flag){dl();}
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <main+0x110>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <main+0xba>
 8001330:	f000 fcb2 	bl	8001c98 <dl>
 8001334:	e7dc      	b.n	80012f0 <main+0x74>
	  else if(ur_flag){ur();}
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <main+0x114>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <main+0xc8>
 800133e:	f000 fcc9 	bl	8001cd4 <ur>
 8001342:	e7d5      	b.n	80012f0 <main+0x74>
	  else if(dr_flag){dr();}
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <main+0x118>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <main+0xd6>
 800134c:	f000 fce0 	bl	8001d10 <dr>
 8001350:	e7ce      	b.n	80012f0 <main+0x74>
	  else if(ul_flag){ul();}
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <main+0x11c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0ca      	beq.n	80012f0 <main+0x74>
 800135a:	f000 fcf7 	bl	8001d4c <ul>
	  if(down_flag){down();}
 800135e:	e7c7      	b.n	80012f0 <main+0x74>
 8001360:	20000128 	.word	0x20000128
 8001364:	20000170 	.word	0x20000170
 8001368:	20000284 	.word	0x20000284
 800136c:	200001b8 	.word	0x200001b8
 8001370:	00000bb8 	.word	0x00000bb8
 8001374:	40012c00 	.word	0x40012c00
 8001378:	20000098 	.word	0x20000098
 800137c:	20000288 	.word	0x20000288
 8001380:	2000028c 	.word	0x2000028c
 8001384:	20000290 	.word	0x20000290
 8001388:	20000294 	.word	0x20000294
 800138c:	20000298 	.word	0x20000298
 8001390:	2000029c 	.word	0x2000029c
 8001394:	200002a0 	.word	0x200002a0
 8001398:	200002a4 	.word	0x200002a4

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b099      	sub	sp, #100	; 0x64
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	242c      	movs	r4, #44	; 0x2c
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	0018      	movs	r0, r3
 80013a8:	2334      	movs	r3, #52	; 0x34
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f005 fae4 	bl	800697a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b2:	231c      	movs	r3, #28
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	0018      	movs	r0, r3
 80013b8:	2310      	movs	r3, #16
 80013ba:	001a      	movs	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	f005 fadc 	bl	800697a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c2:	003b      	movs	r3, r7
 80013c4:	0018      	movs	r0, r3
 80013c6:	231c      	movs	r3, #28
 80013c8:	001a      	movs	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	f005 fad5 	bl	800697a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	0021      	movs	r1, r4
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2202      	movs	r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2210      	movs	r2, #16
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	0018      	movs	r0, r3
 80013ee:	f001 fe61 	bl	80030b4 <HAL_RCC_OscConfig>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013f6:	f000 ff17 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fa:	211c      	movs	r1, #28
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2207      	movs	r2, #7
 8001400:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2100      	movs	r1, #0
 8001418:	0018      	movs	r0, r3
 800141a:	f002 f9d1 	bl	80037c0 <HAL_RCC_ClockConfig>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001422:	f000 ff01 	bl	8002228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001426:	003b      	movs	r3, r7
 8001428:	2202      	movs	r2, #2
 800142a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800142c:	003b      	movs	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	003b      	movs	r3, r7
 8001434:	0018      	movs	r0, r3
 8001436:	f002 fb2f 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800143e:	f000 fef3 	bl	8002228 <Error_Handler>
  }
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b019      	add	sp, #100	; 0x64
 8001448:	bd90      	pop	{r4, r7, pc}
	...

0800144c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function (MOTORS)
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	; 0x58
 8001450:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	2348      	movs	r3, #72	; 0x48
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	0018      	movs	r0, r3
 8001458:	2310      	movs	r3, #16
 800145a:	001a      	movs	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	f005 fa8c 	bl	800697a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	0018      	movs	r0, r3
 8001468:	2308      	movs	r3, #8
 800146a:	001a      	movs	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f005 fa84 	bl	800697a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	2324      	movs	r3, #36	; 0x24
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	0018      	movs	r0, r3
 8001478:	231c      	movs	r3, #28
 800147a:	001a      	movs	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	f005 fa7c 	bl	800697a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	0018      	movs	r0, r3
 8001486:	2320      	movs	r3, #32
 8001488:	001a      	movs	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	f005 fa75 	bl	800697a <memset>

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001490:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <MX_TIM1_Init+0x178>)
 8001492:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <MX_TIM1_Init+0x17c>)
 8001494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <MX_TIM1_Init+0x178>)
 8001498:	2207      	movs	r2, #7
 800149a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <MX_TIM1_Init+0x178>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80014a2:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014a4:	22fa      	movs	r2, #250	; 0xfa
 80014a6:	00d2      	lsls	r2, r2, #3
 80014a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fec0 	bl	8004244 <HAL_TIM_Base_Init>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80014c8:	f000 feae 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	2148      	movs	r1, #72	; 0x48
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	0152      	lsls	r2, r2, #5
 80014d4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d6:	187a      	adds	r2, r7, r1
 80014d8:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f003 fae9 	bl	8004ab4 <HAL_TIM_ConfigClockSource>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014e6:	f000 fe9f 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <MX_TIM1_Init+0x178>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f002 ff79 	bl	80043e4 <HAL_TIM_PWM_Init>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80014f6:	f000 fe97 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001508:	187a      	adds	r2, r7, r1
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_TIM1_Init+0x178>)
 800150c:	0011      	movs	r1, r2
 800150e:	0018      	movs	r0, r3
 8001510:	f003 fefe 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	1e03      	subs	r3, r0, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001518:	f000 fe86 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151c:	2124      	movs	r1, #36	; 0x24
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2260      	movs	r2, #96	; 0x60
 8001522:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	22fa      	movs	r2, #250	; 0xfa
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154a:	1879      	adds	r1, r7, r1
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_TIM1_Init+0x178>)
 800154e:	2200      	movs	r2, #0
 8001550:	0018      	movs	r0, r3
 8001552:	f003 f9e9 	bl	8004928 <HAL_TIM_PWM_ConfigChannel>
 8001556:	1e03      	subs	r3, r0, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800155a:	f000 fe65 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800155e:	2324      	movs	r3, #36	; 0x24
 8001560:	18f9      	adds	r1, r7, r3
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_TIM1_Init+0x178>)
 8001564:	2208      	movs	r2, #8
 8001566:	0018      	movs	r0, r3
 8001568:	f003 f9de 	bl	8004928 <HAL_TIM_PWM_ConfigChannel>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001570:	f000 fe5a 	bl	8002228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	0192      	lsls	r2, r2, #6
 8001598:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a0:	1d3a      	adds	r2, r7, #4
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_TIM1_Init+0x178>)
 80015a4:	0011      	movs	r1, r2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f003 ff10 	bl	80053cc <HAL_TIMEx_ConfigBreakDeadTime>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80015b0:	f000 fe3a 	bl	8002228 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <MX_TIM1_Init+0x178>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 fed4 	bl	8002364 <HAL_TIM_MspPostInit>

}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b016      	add	sp, #88	; 0x58
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000098 	.word	0x20000098
 80015c8:	40012c00 	.word	0x40012c00

080015cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function (DECELERATION)
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	2308      	movs	r3, #8
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	0018      	movs	r0, r3
 80015d8:	2310      	movs	r3, #16
 80015da:	001a      	movs	r2, r3
 80015dc:	2100      	movs	r1, #0
 80015de:	f005 f9cc 	bl	800697a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e2:	003b      	movs	r3, r7
 80015e4:	0018      	movs	r0, r3
 80015e6:	2308      	movs	r3, #8
 80015e8:	001a      	movs	r2, r3
 80015ea:	2100      	movs	r1, #0
 80015ec:	f005 f9c5 	bl	800697a <memset>

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <MX_TIM2_Init+0xa0>)
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	05d2      	lsls	r2, r2, #23
 80015f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_TIM2_Init+0xa0>)
 80015fa:	2207      	movs	r2, #7
 80015fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_TIM2_Init+0xa0>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_TIM2_Init+0xa0>)
 8001606:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <MX_TIM2_Init+0xa4>)
 8001608:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_TIM2_Init+0xa0>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_TIM2_Init+0xa0>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM2_Init+0xa0>)
 8001618:	0018      	movs	r0, r3
 800161a:	f002 fe13 	bl	8004244 <HAL_TIM_Base_Init>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001622:	f000 fe01 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001626:	2108      	movs	r1, #8
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	0152      	lsls	r2, r2, #5
 800162e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	187a      	adds	r2, r7, r1
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_TIM2_Init+0xa0>)
 8001634:	0011      	movs	r1, r2
 8001636:	0018      	movs	r0, r3
 8001638:	f003 fa3c 	bl	8004ab4 <HAL_TIM_ConfigClockSource>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001640:	f000 fdf2 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	003b      	movs	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	003b      	movs	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001650:	003a      	movs	r2, r7
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_TIM2_Init+0xa0>)
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f003 fe5a 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001660:	f000 fde2 	bl	8002228 <Error_Handler>
  }
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200000e0 	.word	0x200000e0
 8001670:	00009c40 	.word	0x00009c40

08001674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function (ACCELERATION)
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	2308      	movs	r3, #8
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	0018      	movs	r0, r3
 8001680:	2310      	movs	r3, #16
 8001682:	001a      	movs	r2, r3
 8001684:	2100      	movs	r1, #0
 8001686:	f005 f978 	bl	800697a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	003b      	movs	r3, r7
 800168c:	0018      	movs	r0, r3
 800168e:	2308      	movs	r3, #8
 8001690:	001a      	movs	r2, r3
 8001692:	2100      	movs	r1, #0
 8001694:	f005 f971 	bl	800697a <memset>

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <MX_TIM3_Init+0xa0>)
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <MX_TIM3_Init+0xa4>)
 800169c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <MX_TIM3_Init+0xa8>)
 80016ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016be:	0018      	movs	r0, r3
 80016c0:	f002 fdc0 	bl	8004244 <HAL_TIM_Base_Init>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016c8:	f000 fdae 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	2108      	movs	r1, #8
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	0152      	lsls	r2, r2, #5
 80016d4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d6:	187a      	adds	r2, r7, r1
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016da:	0011      	movs	r1, r2
 80016dc:	0018      	movs	r0, r3
 80016de:	f003 f9e9 	bl	8004ab4 <HAL_TIM_ConfigClockSource>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016e6:	f000 fd9f 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	003b      	movs	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	003b      	movs	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f6:	003a      	movs	r2, r7
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_TIM3_Init+0xa0>)
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f003 fe07 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001706:	f000 fd8f 	bl	8002228 <Error_Handler>
  }
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b006      	add	sp, #24
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	20000128 	.word	0x20000128
 8001718:	40000400 	.word	0x40000400
 800171c:	00009c40 	.word	0x00009c40

08001720 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function (MULTIPLEXING)
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	2308      	movs	r3, #8
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	0018      	movs	r0, r3
 800172c:	2310      	movs	r3, #16
 800172e:	001a      	movs	r2, r3
 8001730:	2100      	movs	r1, #0
 8001732:	f005 f922 	bl	800697a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	003b      	movs	r3, r7
 8001738:	0018      	movs	r0, r3
 800173a:	2308      	movs	r3, #8
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f005 f91b 	bl	800697a <memset>

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_TIM15_Init+0xa4>)
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <MX_TIM15_Init+0xa8>)
 8001748:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_TIM15_Init+0xa4>)
 800174c:	2207      	movs	r2, #7
 800174e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_TIM15_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_TIM15_Init+0xa4>)
 8001758:	22c8      	movs	r2, #200	; 0xc8
 800175a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_TIM15_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_TIM15_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_TIM15_Init+0xa4>)
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_TIM15_Init+0xa4>)
 8001770:	0018      	movs	r0, r3
 8001772:	f002 fd67 	bl	8004244 <HAL_TIM_Base_Init>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800177a:	f000 fd55 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177e:	2108      	movs	r1, #8
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0152      	lsls	r2, r2, #5
 8001786:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001788:	187a      	adds	r2, r7, r1
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_TIM15_Init+0xa4>)
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f003 f990 	bl	8004ab4 <HAL_TIM_ConfigClockSource>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d001      	beq.n	800179c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001798:	f000 fd46 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	003b      	movs	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	003b      	movs	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017a8:	003a      	movs	r2, r7
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_TIM15_Init+0xa4>)
 80017ac:	0011      	movs	r1, r2
 80017ae:	0018      	movs	r0, r3
 80017b0:	f003 fdae 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80017b8:	f000 fd36 	bl	8002228 <Error_Handler>
  }
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b006      	add	sp, #24
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000170 	.word	0x20000170
 80017c8:	40014000 	.word	0x40014000

080017cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <MX_USART2_UART_Init+0x5c>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017d8:	22e1      	movs	r2, #225	; 0xe1
 80017da:	0252      	lsls	r2, r2, #9
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_USART2_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_USART2_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <MX_USART2_UART_Init+0x58>)
 8001810:	0018      	movs	r0, r3
 8001812:	f003 fe49 	bl	80054a8 <HAL_UART_Init>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800181a:	f000 fd05 	bl	8002228 <Error_Handler>
  }
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200001b8 	.word	0x200001b8
 8001828:	40004400 	.word	0x40004400

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_DMA_Init+0x38>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_DMA_Init+0x38>)
 8001838:	2101      	movs	r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_DMA_Init+0x38>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2201      	movs	r2, #1
 8001844:	4013      	ands	r3, r2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2009      	movs	r0, #9
 8001850:	f001 f818 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8001854:	2009      	movs	r0, #9
 8001856:	f001 f82a 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	40021000 	.word	0x40021000

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	2414      	movs	r4, #20
 8001870:	193b      	adds	r3, r7, r4
 8001872:	0018      	movs	r0, r3
 8001874:	2314      	movs	r3, #20
 8001876:	001a      	movs	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	f005 f87e 	bl	800697a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <MX_GPIO_Init+0x248>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <MX_GPIO_Init+0x248>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0309      	lsls	r1, r1, #12
 8001888:	430a      	orrs	r2, r1
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <MX_GPIO_Init+0x248>)
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	031b      	lsls	r3, r3, #12
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <MX_GPIO_Init+0x248>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	03c9      	lsls	r1, r1, #15
 80018a4:	430a      	orrs	r2, r1
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	03db      	lsls	r3, r3, #15
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0289      	lsls	r1, r1, #10
 80018c0:	430a      	orrs	r2, r1
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	02c9      	lsls	r1, r1, #11
 80018dc:	430a      	orrs	r2, r1
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <MX_GPIO_Init+0x248>)
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	02db      	lsls	r3, r3, #11
 80018e8:	4013      	ands	r3, r2
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Test_Pin1_Pin|Test_Pin2_Pin|DIR_A_Pin|DIR_B_Pin, GPIO_PIN_RESET);
 80018ee:	23ac      	movs	r3, #172	; 0xac
 80018f0:	0119      	lsls	r1, r3, #4
 80018f2:	2390      	movs	r3, #144	; 0x90
 80018f4:	05db      	lsls	r3, r3, #23
 80018f6:	2200      	movs	r2, #0
 80018f8:	0018      	movs	r0, r3
 80018fa:	f001 fba1 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_Pin3_Pin|Test_Pin4_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80018fe:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <MX_GPIO_Init+0x24c>)
 8001900:	2200      	movs	r2, #0
 8001902:	21b0      	movs	r1, #176	; 0xb0
 8001904:	0018      	movs	r0, r3
 8001906:	f001 fb9b 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Test_Pin5_Pin|Test_Pin6_Pin|Test_Pin7_Pin|Test_Pin8_Pin
 800190a:	496b      	ldr	r1, [pc, #428]	; (8001ab8 <MX_GPIO_Init+0x250>)
 800190c:	4b6b      	ldr	r3, [pc, #428]	; (8001abc <MX_GPIO_Init+0x254>)
 800190e:	2200      	movs	r2, #0
 8001910:	0018      	movs	r0, r3
 8001912:	f001 fb95 	bl	8003040 <HAL_GPIO_WritePin>
                          |Test_Pin9_Pin|SPI_Latch_Pin|DIR_IC_Pin|EN_A_Pin
                          |EN_B_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Test_Pin1_Pin Test_Pin2_Pin */
  GPIO_InitStruct.Pin = Test_Pin1_Pin|Test_Pin2_Pin;
 8001916:	193b      	adds	r3, r7, r4
 8001918:	22c0      	movs	r2, #192	; 0xc0
 800191a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	193b      	adds	r3, r7, r4
 800191e:	2201      	movs	r2, #1
 8001920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	193b      	adds	r3, r7, r4
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	193a      	adds	r2, r7, r4
 8001930:	2390      	movs	r3, #144	; 0x90
 8001932:	05db      	lsls	r3, r3, #23
 8001934:	0011      	movs	r1, r2
 8001936:	0018      	movs	r0, r3
 8001938:	f001 fa0a 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin3_Pin Test_Pin4_Pin */
  GPIO_InitStruct.Pin = Test_Pin3_Pin|Test_Pin4_Pin;
 800193c:	193b      	adds	r3, r7, r4
 800193e:	2230      	movs	r2, #48	; 0x30
 8001940:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	193b      	adds	r3, r7, r4
 8001944:	2201      	movs	r2, #1
 8001946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001948:	193b      	adds	r3, r7, r4
 800194a:	2202      	movs	r2, #2
 800194c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	193b      	adds	r3, r7, r4
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001954:	193b      	adds	r3, r7, r4
 8001956:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <MX_GPIO_Init+0x24c>)
 8001958:	0019      	movs	r1, r3
 800195a:	0010      	movs	r0, r2
 800195c:	f001 f9f8 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin5_Pin Test_Pin6_Pin Test_Pin7_Pin Test_Pin8_Pin
                           Test_Pin9_Pin DIR_IC_Pin OE_Pin */
  GPIO_InitStruct.Pin = Test_Pin5_Pin|Test_Pin6_Pin|Test_Pin7_Pin|Test_Pin8_Pin
 8001960:	193b      	adds	r3, r7, r4
 8001962:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <MX_GPIO_Init+0x258>)
 8001964:	601a      	str	r2, [r3, #0]
                          |Test_Pin9_Pin|DIR_IC_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	193b      	adds	r3, r7, r4
 8001968:	2201      	movs	r2, #1
 800196a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800196c:	193b      	adds	r3, r7, r4
 800196e:	2202      	movs	r2, #2
 8001970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	193b      	adds	r3, r7, r4
 800197a:	4a50      	ldr	r2, [pc, #320]	; (8001abc <MX_GPIO_Init+0x254>)
 800197c:	0019      	movs	r1, r3
 800197e:	0010      	movs	r0, r2
 8001980:	f001 f9e6 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001984:	0021      	movs	r1, r4
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0212      	lsls	r2, r2, #8
 800198c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	000c      	movs	r4, r1
 8001990:	193b      	adds	r3, r7, r4
 8001992:	2202      	movs	r2, #2
 8001994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2203      	movs	r2, #3
 80019a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	4a44      	ldr	r2, [pc, #272]	; (8001abc <MX_GPIO_Init+0x254>)
 80019ac:	0019      	movs	r1, r3
 80019ae:	0010      	movs	r0, r2
 80019b0:	f001 f9ce 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Sensor_IO1_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_IO1_Pin;
 80019b4:	0021      	movs	r1, r4
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2284      	movs	r2, #132	; 0x84
 80019c0:	0392      	lsls	r2, r2, #14
 80019c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c4:	000c      	movs	r4, r1
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	2201      	movs	r2, #1
 80019ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_Sensor_IO1_GPIO_Port, &GPIO_InitStruct);
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	4a39      	ldr	r2, [pc, #228]	; (8001ab4 <MX_GPIO_Init+0x24c>)
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	f001 f9bc 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	2201      	movs	r2, #1
 80019e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	2201      	movs	r2, #1
 80019e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <MX_GPIO_Init+0x24c>)
 80019f4:	0019      	movs	r1, r3
 80019f6:	0010      	movs	r0, r2
 80019f8:	f001 f9aa 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_SW1_Pin Limit_SW2_Pin Limit_SW3_Pin Limit_SW4_Pin */
  GPIO_InitStruct.Pin = Limit_SW1_Pin|Limit_SW2_Pin|Limit_SW3_Pin|Limit_SW4_Pin;
 80019fc:	0021      	movs	r1, r4
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	22f0      	movs	r2, #240	; 0xf0
 8001a02:	0152      	lsls	r2, r2, #5
 8001a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	000c      	movs	r4, r1
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	2202      	movs	r2, #2
 8001a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <MX_GPIO_Init+0x24c>)
 8001a18:	0019      	movs	r1, r3
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	f001 f998 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_A_Pin DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_A_Pin|DIR_B_Pin;
 8001a20:	0021      	movs	r1, r4
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	22a0      	movs	r2, #160	; 0xa0
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	000c      	movs	r4, r1
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2201      	movs	r2, #1
 8001a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2202      	movs	r2, #2
 8001a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	193a      	adds	r2, r7, r4
 8001a40:	2390      	movs	r3, #144	; 0x90
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f001 f982 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Latch_Pin */
  GPIO_InitStruct.Pin = SPI_Latch_Pin;
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	2210      	movs	r2, #16
 8001a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2201      	movs	r2, #1
 8001a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_Latch_GPIO_Port, &GPIO_InitStruct);
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <MX_GPIO_Init+0x254>)
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	f001 f970 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8001a70:	0021      	movs	r1, r4
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	22c0      	movs	r2, #192	; 0xc0
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2201      	movs	r2, #1
 8001a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <MX_GPIO_Init+0x254>)
 8001a90:	0019      	movs	r1, r3
 8001a92:	0010      	movs	r0, r2
 8001a94:	f001 f95c 	bl	8002d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2007      	movs	r0, #7
 8001a9e:	f000 fef1 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001aa2:	2007      	movs	r0, #7
 8001aa4:	f000 ff03 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b00b      	add	sp, #44	; 0x2c
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	00000fd7 	.word	0x00000fd7
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	00000e47 	.word	0x00000e47

08001ac4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	0002      	movs	r2, r0
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	801a      	strh	r2, [r3, #0]
	/* Used for displaying each player's score on the 7-segment display */
	UNUSED(GPIO_Pin);
	if(GPIO_Pin == GPIO_PIN_6)	//IR sensor 1
 8001ad0:	1dbb      	adds	r3, r7, #6
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d114      	bne.n	8001b02 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if(segvalue[6] >= 9){
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001ada:	799b      	ldrb	r3, [r3, #6]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d909      	bls.n	8001af4 <HAL_GPIO_EXTI_Callback+0x30>
			segvalue[7] = segvalue[7] + 1;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001ae2:	79db      	ldrb	r3, [r3, #7]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001aea:	71da      	strb	r2, [r3, #7]
			segvalue[6] = 0;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	719a      	strb	r2, [r3, #6]
		{
		segvalue[4] = segvalue[4] + 1;
		}
	}

}
 8001af2:	e01e      	b.n	8001b32 <HAL_GPIO_EXTI_Callback+0x6e>
		segvalue[6] = segvalue[6] + 1;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001af6:	799b      	ldrb	r3, [r3, #6]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001afe:	719a      	strb	r2, [r3, #6]
}
 8001b00:	e017      	b.n	8001b32 <HAL_GPIO_EXTI_Callback+0x6e>
	else if(GPIO_Pin == GPIO_PIN_7)	//IR sensor 2
 8001b02:	1dbb      	adds	r3, r7, #6
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	2b80      	cmp	r3, #128	; 0x80
 8001b08:	d113      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x6e>
		if(segvalue[4] >= 9){
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d909      	bls.n	8001b26 <HAL_GPIO_EXTI_Callback+0x62>
			segvalue[5] = segvalue[5] + 1;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b14:	795b      	ldrb	r3, [r3, #5]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b1c:	715a      	strb	r2, [r3, #5]
			segvalue[4] = 0;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	711a      	strb	r2, [r3, #4]
}
 8001b24:	e005      	b.n	8001b32 <HAL_GPIO_EXTI_Callback+0x6e>
		segvalue[4] = segvalue[4] + 1;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b28:	791b      	ldrb	r3, [r3, #4]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b30:	711a      	strb	r2, [r3, #4]
}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	200002a8 	.word	0x200002a8

08001b40 <down>:

void down()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	/* Called to move mallet down */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <down+0x58>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f002 fd5b 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <down+0x58>)
 8001b50:	2108      	movs	r1, #8
 8001b52:	0018      	movs	r0, r3
 8001b54:	f002 fd56 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	0099      	lsls	r1, r3, #2
 8001b5c:	2390      	movs	r3, #144	; 0x90
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	2201      	movs	r2, #1
 8001b62:	0018      	movs	r0, r3
 8001b64:	f001 fa6c 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), SET);
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	0119      	lsls	r1, r3, #4
 8001b6c:	2390      	movs	r3, #144	; 0x90
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	2201      	movs	r2, #1
 8001b72:	0018      	movs	r0, r3
 8001b74:	f001 fa64 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <down+0x58>)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f002 fc89 	bl	8004494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <down+0x58>)
 8001b84:	2108      	movs	r1, #8
 8001b86:	0018      	movs	r0, r3
 8001b88:	f002 fc84 	bl	8004494 <HAL_TIM_PWM_Start>
	down_flag=0;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <down+0x5c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000098 	.word	0x20000098
 8001b9c:	20000288 	.word	0x20000288

08001ba0 <up>:

void up()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	/* Called to move mallet up */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <up+0x58>)
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f002 fd2b 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <up+0x58>)
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f002 fd26 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	2390      	movs	r3, #144	; 0x90
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f001 fa3c 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), RESET);
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	0119      	lsls	r1, r3, #4
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f001 fa34 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <up+0x58>)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f002 fc59 	bl	8004494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <up+0x58>)
 8001be4:	2108      	movs	r1, #8
 8001be6:	0018      	movs	r0, r3
 8001be8:	f002 fc54 	bl	8004494 <HAL_TIM_PWM_Start>
	up_flag=0;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <up+0x5c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000098 	.word	0x20000098
 8001bfc:	2000028c 	.word	0x2000028c

08001c00 <left>:

void left()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	/* Called to move mallet left */
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	0099      	lsls	r1, r3, #2
 8001c08:	2390      	movs	r3, #144	; 0x90
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f001 fa16 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), RESET);
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	0119      	lsls	r1, r3, #4
 8001c18:	2390      	movs	r3, #144	; 0x90
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f001 fa0e 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <left+0x44>)
 8001c26:	2100      	movs	r1, #0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f002 fc33 	bl	8004494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <left+0x44>)
 8001c30:	2108      	movs	r1, #8
 8001c32:	0018      	movs	r0, r3
 8001c34:	f002 fc2e 	bl	8004494 <HAL_TIM_PWM_Start>
	left_flag=0;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <left+0x48>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000098 	.word	0x20000098
 8001c48:	20000290 	.word	0x20000290

08001c4c <righ>:

void righ()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	/* Called to move mallet right */
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	2390      	movs	r3, #144	; 0x90
 8001c56:	05db      	lsls	r3, r3, #23
 8001c58:	2200      	movs	r2, #0
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f001 f9f0 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), SET);
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	0119      	lsls	r1, r3, #4
 8001c64:	2390      	movs	r3, #144	; 0x90
 8001c66:	05db      	lsls	r3, r3, #23
 8001c68:	2201      	movs	r2, #1
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f001 f9e8 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <righ+0x44>)
 8001c72:	2100      	movs	r1, #0
 8001c74:	0018      	movs	r0, r3
 8001c76:	f002 fc0d 	bl	8004494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <righ+0x44>)
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f002 fc08 	bl	8004494 <HAL_TIM_PWM_Start>
	righ_flag=0;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <righ+0x48>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000098 	.word	0x20000098
 8001c94:	20000294 	.word	0x20000294

08001c98 <dl>:

void dl()
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	/* Called to move mallet down and left */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <dl+0x34>)
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f002 fcaf 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	0099      	lsls	r1, r3, #2
 8001caa:	2390      	movs	r3, #144	; 0x90
 8001cac:	05db      	lsls	r3, r3, #23
 8001cae:	2201      	movs	r2, #1
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 f9c5 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <dl+0x34>)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f002 fbea 	bl	8004494 <HAL_TIM_PWM_Start>
	dl_flag=0;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <dl+0x38>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000098 	.word	0x20000098
 8001cd0:	20000298 	.word	0x20000298

08001cd4 <ur>:

void ur()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	/* Called to move mallet up and right */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <ur+0x34>)
 8001cda:	2108      	movs	r1, #8
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f002 fc91 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	0099      	lsls	r1, r3, #2
 8001ce6:	2390      	movs	r3, #144	; 0x90
 8001ce8:	05db      	lsls	r3, r3, #23
 8001cea:	2200      	movs	r2, #0
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 f9a7 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <ur+0x34>)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f002 fbcc 	bl	8004494 <HAL_TIM_PWM_Start>
	ur_flag=0;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <ur+0x38>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000098 	.word	0x20000098
 8001d0c:	2000029c 	.word	0x2000029c

08001d10 <dr>:

void dr()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	/* Called to move mallet down and right */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <dr+0x34>)
 8001d16:	2100      	movs	r1, #0
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f002 fc73 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), SET);
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	0119      	lsls	r1, r3, #4
 8001d22:	2390      	movs	r3, #144	; 0x90
 8001d24:	05db      	lsls	r3, r3, #23
 8001d26:	2201      	movs	r2, #1
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f001 f989 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <dr+0x34>)
 8001d30:	2108      	movs	r1, #8
 8001d32:	0018      	movs	r0, r3
 8001d34:	f002 fbae 	bl	8004494 <HAL_TIM_PWM_Start>
	dr_flag=0;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <dr+0x38>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000098 	.word	0x20000098
 8001d48:	200002a0 	.word	0x200002a0

08001d4c <ul>:

void ul()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	/* Called to move mallet up and left */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <ul+0x34>)
 8001d52:	2100      	movs	r1, #0
 8001d54:	0018      	movs	r0, r3
 8001d56:	f002 fc55 	bl	8004604 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), RESET);
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	0119      	lsls	r1, r3, #4
 8001d5e:	2390      	movs	r3, #144	; 0x90
 8001d60:	05db      	lsls	r3, r3, #23
 8001d62:	2200      	movs	r2, #0
 8001d64:	0018      	movs	r0, r3
 8001d66:	f001 f96b 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <ul+0x34>)
 8001d6c:	2108      	movs	r1, #8
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f002 fb90 	bl	8004494 <HAL_TIM_PWM_Start>
	ul_flag=0;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <ul+0x38>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000098 	.word	0x20000098
 8001d84:	200002a4 	.word	0x200002a4

08001d88 <reset_and_accelerate>:

void reset_and_accelerate()
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	/* Called to reset motors to initial speed whenever data is received over UART */
	starting_ccr = 350;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <reset_and_accelerate+0x64>)
 8001d8e:	22af      	movs	r2, #175	; 0xaf
 8001d90:	0052      	lsls	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
	TIM1->CCR1 = (0.5) * starting_ccr;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <reset_and_accelerate+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff f8d7 	bl	8000f4c <__aeabi_i2d>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <reset_and_accelerate+0x68>)
 8001da2:	f7fe fa59 	bl	8000258 <__aeabi_dmul>
 8001da6:	0002      	movs	r2, r0
 8001da8:	000b      	movs	r3, r1
 8001daa:	4c12      	ldr	r4, [pc, #72]	; (8001df4 <reset_and_accelerate+0x6c>)
 8001dac:	0010      	movs	r0, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	f7fe fa34 	bl	800021c <__aeabi_d2uiz>
 8001db4:	0003      	movs	r3, r0
 8001db6:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR3 = (0.5) * starting_ccr;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <reset_and_accelerate+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff f8c5 	bl	8000f4c <__aeabi_i2d>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <reset_and_accelerate+0x68>)
 8001dc6:	f7fe fa47 	bl	8000258 <__aeabi_dmul>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	000b      	movs	r3, r1
 8001dce:	4c09      	ldr	r4, [pc, #36]	; (8001df4 <reset_and_accelerate+0x6c>)
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	f7fe fa22 	bl	800021c <__aeabi_d2uiz>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM1->ARR = starting_ccr;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <reset_and_accelerate+0x64>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <reset_and_accelerate+0x6c>)
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	20000008 	.word	0x20000008
 8001df0:	3fe00000 	.word	0x3fe00000
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//rx transfer completed caldrack
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	/* Callback function triggered when data is received over UART */

	UNUSED(huart);
	HAL_UART_Transmit(&huart2, rxdata, sizeof(rxdata), 100);
 8001e00:	4959      	ldr	r1, [pc, #356]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001e02:	485a      	ldr	r0, [pc, #360]	; (8001f6c <HAL_UART_RxCpltCallback+0x174>)
 8001e04:	2364      	movs	r3, #100	; 0x64
 8001e06:	2204      	movs	r2, #4
 8001e08:	f003 fba2 	bl	8005550 <HAL_UART_Transmit>
	reset_and_accelerate();
 8001e0c:	f7ff ffbc 	bl	8001d88 <reset_and_accelerate>
	if(strstr(rxdata, "down")){
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_UART_RxCpltCallback+0x178>)
 8001e12:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001e14:	0011      	movs	r1, r2
 8001e16:	0018      	movs	r0, r3
 8001e18:	f004 fdb7 	bl	800698a <strstr>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_UART_RxCpltCallback+0x40>
		down_flag=1;
 8001e20:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <HAL_UART_RxCpltCallback+0x17c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f002 faad 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001e2e:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001e30:	0018      	movs	r0, r3
 8001e32:	f002 fa57 	bl	80042e4 <HAL_TIM_Base_Start_IT>
	}
	else{
		HAL_TIM_Base_Start_IT(&htim2);
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}
 8001e36:	e093      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "up00")){
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_UART_RxCpltCallback+0x188>)
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001e3c:	0011      	movs	r1, r2
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f004 fda3 	bl	800698a <strstr>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d00b      	beq.n	8001e60 <HAL_UART_RxCpltCallback+0x68>
		up_flag=1;
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_UART_RxCpltCallback+0x18c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001e50:	0018      	movs	r0, r3
 8001e52:	f002 fa99 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f002 fa43 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001e5e:	e07f      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "left")){
 8001e60:	4a49      	ldr	r2, [pc, #292]	; (8001f88 <HAL_UART_RxCpltCallback+0x190>)
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001e64:	0011      	movs	r1, r2
 8001e66:	0018      	movs	r0, r3
 8001e68:	f004 fd8f 	bl	800698a <strstr>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_UART_RxCpltCallback+0x90>
		left_flag=1;
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_UART_RxCpltCallback+0x194>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f002 fa85 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001e80:	0018      	movs	r0, r3
 8001e82:	f002 fa2f 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001e86:	e06b      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "righ")){
 8001e88:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_UART_RxCpltCallback+0x198>)
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f004 fd7b 	bl	800698a <strstr>
 8001e94:	1e03      	subs	r3, r0, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_UART_RxCpltCallback+0xb8>
		righ_flag=1;
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_UART_RxCpltCallback+0x19c>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f002 fa71 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f002 fa1b 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001eae:	e057      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "dl00")){
 8001eb0:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <HAL_UART_RxCpltCallback+0x1a0>)
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f004 fd67 	bl	800698a <strstr>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_UART_RxCpltCallback+0xe0>
		dl_flag=1;
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_UART_RxCpltCallback+0x1a4>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f002 fa5d 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f002 fa07 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001ed6:	e043      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "ul00")){
 8001ed8:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1a8>)
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001edc:	0011      	movs	r1, r2
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f004 fd53 	bl	800698a <strstr>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_UART_RxCpltCallback+0x108>
		ul_flag=1;
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_UART_RxCpltCallback+0x1ac>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f002 fa49 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f002 f9f3 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001efe:	e02f      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "dr00")){
 8001f00:	4a29      	ldr	r2, [pc, #164]	; (8001fa8 <HAL_UART_RxCpltCallback+0x1b0>)
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f004 fd3f 	bl	800698a <strstr>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_UART_RxCpltCallback+0x130>
		dr_flag=1;
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_UART_RxCpltCallback+0x1b4>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f002 fa35 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f002 f9df 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001f26:	e01b      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "ur00")){
 8001f28:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <HAL_UART_RxCpltCallback+0x1b8>)
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_UART_RxCpltCallback+0x170>)
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f004 fd2b 	bl	800698a <strstr>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_UART_RxCpltCallback+0x158>
		ur_flag=1;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_UART_RxCpltCallback+0x1bc>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001f40:	0018      	movs	r0, r3
 8001f42:	f002 fa21 	bl	8004388 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f002 f9cb 	bl	80042e4 <HAL_TIM_Base_Start_IT>
}
 8001f4e:	e007      	b.n	8001f60 <HAL_UART_RxCpltCallback+0x168>
		HAL_TIM_Base_Start_IT(&htim2);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_UART_RxCpltCallback+0x180>)
 8001f52:	0018      	movs	r0, r3
 8001f54:	f002 f9c6 	bl	80042e4 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_UART_RxCpltCallback+0x184>)
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f002 fa14 	bl	8004388 <HAL_TIM_Base_Stop_IT>
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000284 	.word	0x20000284
 8001f6c:	200001b8 	.word	0x200001b8
 8001f70:	08006a18 	.word	0x08006a18
 8001f74:	20000288 	.word	0x20000288
 8001f78:	200000e0 	.word	0x200000e0
 8001f7c:	20000128 	.word	0x20000128
 8001f80:	08006a20 	.word	0x08006a20
 8001f84:	2000028c 	.word	0x2000028c
 8001f88:	08006a28 	.word	0x08006a28
 8001f8c:	20000290 	.word	0x20000290
 8001f90:	08006a30 	.word	0x08006a30
 8001f94:	20000294 	.word	0x20000294
 8001f98:	08006a38 	.word	0x08006a38
 8001f9c:	20000298 	.word	0x20000298
 8001fa0:	08006a40 	.word	0x08006a40
 8001fa4:	200002a4 	.word	0x200002a4
 8001fa8:	08006a48 	.word	0x08006a48
 8001fac:	200002a0 	.word	0x200002a0
 8001fb0:	08006a50 	.word	0x08006a50
 8001fb4:	2000029c 	.word	0x2000029c

08001fb8 <TranslateDigit>:

uint8_t TranslateDigit(int digit) {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	/* Used in translating decimal digits to bytes to be send over SPI */

    uint8_t segments[10] = {0xfc, 0x60, 0xda, 0xf2, 0x66, 0xb6, 0xbe, 0xe0, 0xfe, 0xf6};
 8001fc0:	240c      	movs	r4, #12
 8001fc2:	193b      	adds	r3, r7, r4
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <TranslateDigit+0x38>)
 8001fc6:	ca03      	ldmia	r2!, {r0, r1}
 8001fc8:	c303      	stmia	r3!, {r0, r1}
 8001fca:	8812      	ldrh	r2, [r2, #0]
 8001fcc:	801a      	strh	r2, [r3, #0]
    if (digit >= 0 && digit <= 9) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db07      	blt.n	8001fe4 <TranslateDigit+0x2c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b09      	cmp	r3, #9
 8001fd8:	dc04      	bgt.n	8001fe4 <TranslateDigit+0x2c>
        return segments[digit];
 8001fda:	193a      	adds	r2, r7, r4
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	18d3      	adds	r3, r2, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	e000      	b.n	8001fe6 <TranslateDigit+0x2e>
    } else {
        // Return 0xFF for an invalid digit (all segments off)
        return 0xff;
 8001fe4:	23ff      	movs	r3, #255	; 0xff
    }
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b007      	add	sp, #28
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	08006a58 	.word	0x08006a58

08001ff4 <HAL_TIM_PeriodElapsedCallback>:
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	/* Callback function for all timer interrupts */
	if (htim == &htim2)
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002000:	429a      	cmp	r2, r3
 8002002:	d14f      	bne.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		/* Start Deceleration */
	  if (starting_ccr < target_ccr_dec)
 8002004:	4b77      	ldr	r3, [pc, #476]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b77      	ldr	r3, [pc, #476]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	da39      	bge.n	8002084 <HAL_TIM_PeriodElapsedCallback+0x90>
	  {
		  starting_ccr = starting_ccr * 1.1;
 8002010:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe ff99 	bl	8000f4c <__aeabi_i2d>
 800201a:	4a74      	ldr	r2, [pc, #464]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800201c:	4b74      	ldr	r3, [pc, #464]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800201e:	f7fe f91b 	bl	8000258 <__aeabi_dmul>
 8002022:	0002      	movs	r2, r0
 8002024:	000b      	movs	r3, r1
 8002026:	0010      	movs	r0, r2
 8002028:	0019      	movs	r1, r3
 800202a:	f7fe ff59 	bl	8000ee0 <__aeabi_d2iz>
 800202e:	0002      	movs	r2, r0
 8002030:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002032:	601a      	str	r2, [r3, #0]
		  TIM1->CCR1 = (0.5) * starting_ccr;
 8002034:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe ff87 	bl	8000f4c <__aeabi_i2d>
 800203e:	2200      	movs	r2, #0
 8002040:	4b6c      	ldr	r3, [pc, #432]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002042:	f7fe f909 	bl	8000258 <__aeabi_dmul>
 8002046:	0002      	movs	r2, r0
 8002048:	000b      	movs	r3, r1
 800204a:	4c6b      	ldr	r4, [pc, #428]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800204c:	0010      	movs	r0, r2
 800204e:	0019      	movs	r1, r3
 8002050:	f7fe f8e4 	bl	800021c <__aeabi_d2uiz>
 8002054:	0003      	movs	r3, r0
 8002056:	6363      	str	r3, [r4, #52]	; 0x34
		  TIM1->CCR3 = (0.5) * starting_ccr;
 8002058:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe ff75 	bl	8000f4c <__aeabi_i2d>
 8002062:	2200      	movs	r2, #0
 8002064:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002066:	f7fe f8f7 	bl	8000258 <__aeabi_dmul>
 800206a:	0002      	movs	r2, r0
 800206c:	000b      	movs	r3, r1
 800206e:	4c62      	ldr	r4, [pc, #392]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002070:	0010      	movs	r0, r2
 8002072:	0019      	movs	r1, r3
 8002074:	f7fe f8d2 	bl	800021c <__aeabi_d2uiz>
 8002078:	0003      	movs	r3, r0
 800207a:	63e3      	str	r3, [r4, #60]	; 0x3c
		  TIM1->ARR = starting_ccr;
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
	  if (starting_ccr >= target_ccr_dec)
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	db09      	blt.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002092:	2100      	movs	r1, #0
 8002094:	0018      	movs	r0, r3
 8002096:	f002 fab5 	bl	8004604 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800209a:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800209c:	2108      	movs	r1, #8
 800209e:	0018      	movs	r0, r3
 80020a0:	f002 fab0 	bl	8004604 <HAL_TIM_PWM_Stop>
	  }
	}
	if (htim == &htim3)
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4b56      	ldr	r3, [pc, #344]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d13f      	bne.n	800212c <HAL_TIM_PeriodElapsedCallback+0x138>
	{
		/* Start Acceleration  */

		if(starting_ccr > target_ccr_acc)
 80020ac:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b54      	ldr	r3, [pc, #336]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dd39      	ble.n	800212c <HAL_TIM_PeriodElapsedCallback+0x138>
		{
			starting_ccr = starting_ccr * .9;
 80020b8:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe ff45 	bl	8000f4c <__aeabi_i2d>
 80020c2:	4a51      	ldr	r2, [pc, #324]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020c4:	4b51      	ldr	r3, [pc, #324]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80020c6:	f7fe f8c7 	bl	8000258 <__aeabi_dmul>
 80020ca:	0002      	movs	r2, r0
 80020cc:	000b      	movs	r3, r1
 80020ce:	0010      	movs	r0, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	f7fe ff05 	bl	8000ee0 <__aeabi_d2iz>
 80020d6:	0002      	movs	r2, r0
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80020da:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = (0.5) * starting_ccr;
 80020dc:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7fe ff33 	bl	8000f4c <__aeabi_i2d>
 80020e6:	2200      	movs	r2, #0
 80020e8:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80020ea:	f7fe f8b5 	bl	8000258 <__aeabi_dmul>
 80020ee:	0002      	movs	r2, r0
 80020f0:	000b      	movs	r3, r1
 80020f2:	4c41      	ldr	r4, [pc, #260]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80020f4:	0010      	movs	r0, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	f7fe f890 	bl	800021c <__aeabi_d2uiz>
 80020fc:	0003      	movs	r3, r0
 80020fe:	6363      	str	r3, [r4, #52]	; 0x34
			TIM1->CCR3 = (0.5) * starting_ccr;
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0018      	movs	r0, r3
 8002106:	f7fe ff21 	bl	8000f4c <__aeabi_i2d>
 800210a:	2200      	movs	r2, #0
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800210e:	f7fe f8a3 	bl	8000258 <__aeabi_dmul>
 8002112:	0002      	movs	r2, r0
 8002114:	000b      	movs	r3, r1
 8002116:	4c38      	ldr	r4, [pc, #224]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002118:	0010      	movs	r0, r2
 800211a:	0019      	movs	r1, r3
 800211c:	f7fe f87e 	bl	800021c <__aeabi_d2uiz>
 8002120:	0003      	movs	r3, r0
 8002122:	63e3      	str	r3, [r4, #60]	; 0x3c
			TIM1->ARR = starting_ccr;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	if(htim == &htim15){
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002130:	429a      	cmp	r2, r3
 8002132:	d151      	bne.n	80021d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
		/* Start Multiplexing  */

		HAL_GPIO_WritePin(GPIOB, latchPin, GPIO_PIN_SET);	// pull latch pin HIGH
 8002134:	2310      	movs	r3, #16
 8002136:	b29b      	uxth	r3, r3
 8002138:	4836      	ldr	r0, [pc, #216]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800213a:	2201      	movs	r2, #1
 800213c:	0019      	movs	r1, r3
 800213e:	f000 ff7f 	bl	8003040 <HAL_GPIO_WritePin>
		uint8_t segment;
		segment = TranslateDigit(segvalue[display_select]);
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	001a      	movs	r2, r3
 8002148:	4b34      	ldr	r3, [pc, #208]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x228>)
 800214a:	5c9b      	ldrb	r3, [r3, r2]
 800214c:	250f      	movs	r5, #15
 800214e:	197c      	adds	r4, r7, r5
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <TranslateDigit>
 8002156:	0003      	movs	r3, r0
 8002158:	7023      	strb	r3, [r4, #0]
		segment = ~segment;
 800215a:	0029      	movs	r1, r5
 800215c:	187b      	adds	r3, r7, r1
 800215e:	187a      	adds	r2, r7, r1
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	43d2      	mvns	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

		uint8_t tx_data[2];

		tx_data[0] = segment;
 8002166:	200c      	movs	r0, #12
 8002168:	183b      	adds	r3, r7, r0
 800216a:	187a      	adds	r2, r7, r1
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	701a      	strb	r2, [r3, #0]
		tx_data[1] = (0x01 << display_select);
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	001a      	movs	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	4093      	lsls	r3, r2
 800217a:	b2da      	uxtb	r2, r3
 800217c:	183b      	adds	r3, r7, r0
 800217e:	705a      	strb	r2, [r3, #1]

		HAL_SPI_Transmit(&hspi1, tx_data, 2, 100);
 8002180:	1839      	adds	r1, r7, r0
 8002182:	4827      	ldr	r0, [pc, #156]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002184:	2364      	movs	r3, #100	; 0x64
 8002186:	2202      	movs	r2, #2
 8002188:	f001 fd86 	bl	8003c98 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, latchPin, GPIO_PIN_RESET);	// pull latch pin HIGH
 800218c:	2310      	movs	r3, #16
 800218e:	b29b      	uxth	r3, r3
 8002190:	4820      	ldr	r0, [pc, #128]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002192:	2200      	movs	r2, #0
 8002194:	0019      	movs	r1, r3
 8002196:	f000 ff53 	bl	8003040 <HAL_GPIO_WritePin>

		if ((display_select > 3) && (hold < HOLDING_CYCLES)) {
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d90a      	bls.n	80021b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d806      	bhi.n	80021b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			hold++;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021b4:	701a      	strb	r2, [r3, #0]
			}
			hold = 0;
		}
	}

}
 80021b6:	e00f      	b.n	80021d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			display_select++;
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80021c2:	701a      	strb	r2, [r3, #0]
			if (display_select == 8) {
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d102      	bne.n	80021d2 <HAL_TIM_PeriodElapsedCallback+0x1de>
			  display_select = 0;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
			hold = 0;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b004      	add	sp, #16
 80021de:	bdb0      	pop	{r4, r5, r7, pc}
 80021e0:	200000e0 	.word	0x200000e0
 80021e4:	20000008 	.word	0x20000008
 80021e8:	20000004 	.word	0x20000004
 80021ec:	9999999a 	.word	0x9999999a
 80021f0:	3ff19999 	.word	0x3ff19999
 80021f4:	3fe00000 	.word	0x3fe00000
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	20000098 	.word	0x20000098
 8002200:	20000128 	.word	0x20000128
 8002204:	20000000 	.word	0x20000000
 8002208:	cccccccd 	.word	0xcccccccd
 800220c:	3feccccc 	.word	0x3feccccc
 8002210:	20000170 	.word	0x20000170
 8002214:	48000400 	.word	0x48000400
 8002218:	200002b0 	.word	0x200002b0
 800221c:	200002a8 	.word	0x200002a8
 8002220:	20000034 	.word	0x20000034
 8002224:	200002b1 	.word	0x200002b1

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_MspInit+0x44>)
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_MspInit+0x44>)
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	619a      	str	r2, [r3, #24]
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_MspInit+0x44>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_MspInit+0x44>)
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_MspInit+0x44>)
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	0549      	lsls	r1, r1, #21
 800225c:	430a      	orrs	r2, r1
 800225e:	61da      	str	r2, [r3, #28]
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_MspInit+0x44>)
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	4013      	ands	r3, r2
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a32      	ldr	r2, [pc, #200]	; (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800228e:	4b32      	ldr	r3, [pc, #200]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0109      	lsls	r1, r1, #4
 8002298:	430a      	orrs	r2, r1
 800229a:	619a      	str	r2, [r3, #24]
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4013      	ands	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80022aa:	e04f      	b.n	800234c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	05db      	lsls	r3, r3, #23
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d114      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022be:	2101      	movs	r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	200f      	movs	r0, #15
 80022d6:	f000 fad5 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022da:	200f      	movs	r0, #15
 80022dc:	f000 fae7 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 80022e0:	e034      	b.n	800234c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_TIM_Base_MspInit+0xe0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d114      	bne.n	8002316 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022f2:	2102      	movs	r1, #2
 80022f4:	430a      	orrs	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2010      	movs	r0, #16
 800230a:	f000 fabb 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800230e:	2010      	movs	r0, #16
 8002310:	f000 facd 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 8002314:	e01a      	b.n	800234c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM15)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_TIM_Base_MspInit+0xe4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d115      	bne.n	800234c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0249      	lsls	r1, r1, #9
 800232a:	430a      	orrs	r2, r1
 800232c:	619a      	str	r2, [r3, #24]
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	025b      	lsls	r3, r3, #9
 8002336:	4013      	ands	r3, r2
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2014      	movs	r0, #20
 8002342:	f000 fa9f 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002346:	2014      	movs	r0, #20
 8002348:	f000 fab1 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40000400 	.word	0x40000400
 8002360:	40014000 	.word	0x40014000

08002364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	240c      	movs	r4, #12
 800236e:	193b      	adds	r3, r7, r4
 8002370:	0018      	movs	r0, r3
 8002372:	2314      	movs	r3, #20
 8002374:	001a      	movs	r2, r3
 8002376:	2100      	movs	r1, #0
 8002378:	f004 faff 	bl	800697a <memset>
  if(htim->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_TIM_MspPostInit+0x78>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d125      	bne.n	80023d2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_TIM_MspPostInit+0x7c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_TIM_MspPostInit+0x7c>)
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0289      	lsls	r1, r1, #10
 8002390:	430a      	orrs	r2, r1
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_TIM_MspPostInit+0x7c>)
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_A_Pin|PUL_B_Pin;
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	22a0      	movs	r2, #160	; 0xa0
 80023a6:	00d2      	lsls	r2, r2, #3
 80023a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	0021      	movs	r1, r4
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	2202      	movs	r2, #2
 80023b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	2202      	movs	r2, #2
 80023c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	187a      	adds	r2, r7, r1
 80023c6:	2390      	movs	r3, #144	; 0x90
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	0011      	movs	r1, r2
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fcbf 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b009      	add	sp, #36	; 0x24
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b08b      	sub	sp, #44	; 0x2c
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	2414      	movs	r4, #20
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	0018      	movs	r0, r3
 80023f2:	2314      	movs	r3, #20
 80023f4:	001a      	movs	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f004 fabf 	bl	800697a <memset>
  if(huart->Instance==USART2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <HAL_UART_MspInit+0x10c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d170      	bne.n	80024e8 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_UART_MspInit+0x110>)
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_UART_MspInit+0x110>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0289      	lsls	r1, r1, #10
 8002410:	430a      	orrs	r2, r1
 8002412:	61da      	str	r2, [r3, #28]
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_UART_MspInit+0x110>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_UART_MspInit+0x110>)
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_UART_MspInit+0x110>)
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0289      	lsls	r1, r1, #10
 800242c:	430a      	orrs	r2, r1
 800242e:	615a      	str	r2, [r3, #20]
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_UART_MspInit+0x110>)
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800243e:	0021      	movs	r1, r4
 8002440:	187b      	adds	r3, r7, r1
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	187b      	adds	r3, r7, r1
 8002448:	2202      	movs	r2, #2
 800244a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2203      	movs	r2, #3
 8002456:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002458:	187b      	adds	r3, r7, r1
 800245a:	2201      	movs	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	187a      	adds	r2, r7, r1
 8002460:	2390      	movs	r3, #144	; 0x90
 8002462:	05db      	lsls	r3, r3, #23
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f000 fc72 	bl	8002d50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_UART_MspInit+0x114>)
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_UART_MspInit+0x118>)
 8002470:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_UART_MspInit+0x114>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_UART_MspInit+0x114>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_UART_MspInit+0x114>)
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_UART_MspInit+0x114>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_UART_MspInit+0x114>)
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_UART_MspInit+0x114>)
 8002492:	2220      	movs	r2, #32
 8002494:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_UART_MspInit+0x114>)
 8002498:	2200      	movs	r2, #0
 800249a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_UART_MspInit+0x114>)
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fa22 	bl	80028e8 <HAL_DMA_Init>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80024a8:	f7ff febe 	bl	8002228 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_UART_MspInit+0x11c>)
 80024ae:	23a8      	movs	r3, #168	; 0xa8
 80024b0:	58d3      	ldr	r3, [r2, r3]
 80024b2:	4913      	ldr	r1, [pc, #76]	; (8002500 <HAL_UART_MspInit+0x11c>)
 80024b4:	220f      	movs	r2, #15
 80024b6:	4393      	bics	r3, r2
 80024b8:	22a8      	movs	r2, #168	; 0xa8
 80024ba:	508b      	str	r3, [r1, r2]
 80024bc:	4a10      	ldr	r2, [pc, #64]	; (8002500 <HAL_UART_MspInit+0x11c>)
 80024be:	23a8      	movs	r3, #168	; 0xa8
 80024c0:	58d3      	ldr	r3, [r2, r3]
 80024c2:	490f      	ldr	r1, [pc, #60]	; (8002500 <HAL_UART_MspInit+0x11c>)
 80024c4:	2209      	movs	r2, #9
 80024c6:	4313      	orrs	r3, r2
 80024c8:	22a8      	movs	r2, #168	; 0xa8
 80024ca:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_UART_MspInit+0x114>)
 80024d0:	675a      	str	r2, [r3, #116]	; 0x74
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_UART_MspInit+0x114>)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	201c      	movs	r0, #28
 80024de:	f000 f9d1 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024e2:	201c      	movs	r0, #28
 80024e4:	f000 f9e3 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b00b      	add	sp, #44	; 0x2c
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40021000 	.word	0x40021000
 80024f8:	20000240 	.word	0x20000240
 80024fc:	40020008 	.word	0x40020008
 8002500:	40020000 	.word	0x40020000

08002504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <NMI_Handler+0x4>

0800250a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 f8c0 	bl	80026ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_IO1_Pin);
 8002536:	2040      	movs	r0, #64	; 0x40
 8002538:	f000 fda0 	bl	800307c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <DMA1_Ch1_IRQHandler+0x14>)
 800254a:	0018      	movs	r0, r3
 800254c:	f000 faf7 	bl	8002b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	20000240 	.word	0x20000240

0800255c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <TIM2_IRQHandler+0x14>)
 8002562:	0018      	movs	r0, r3
 8002564:	f002 f8ca 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	200000e0 	.word	0x200000e0

08002574 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <TIM3_IRQHandler+0x14>)
 800257a:	0018      	movs	r0, r3
 800257c:	f002 f8be 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000128 	.word	0x20000128

0800258c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <TIM15_IRQHandler+0x14>)
 8002592:	0018      	movs	r0, r3
 8002594:	f002 f8b2 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000170 	.word	0x20000170

080025a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <USART2_IRQHandler+0x14>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f003 f8c8 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	200001b8 	.word	0x200001b8

080025bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025c8:	480d      	ldr	r0, [pc, #52]	; (8002600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025cc:	f7ff fff6 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <LoopForever+0x6>)
  ldr r1, =_edata
 80025d2:	490d      	ldr	r1, [pc, #52]	; (8002608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <LoopForever+0xe>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025e8:	4c0a      	ldr	r4, [pc, #40]	; (8002614 <LoopForever+0x16>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025f6:	f004 f9df 	bl	80069b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fa:	f7fe fe3f 	bl	800127c <main>

080025fe <LoopForever>:

LoopForever:
    b LoopForever
 80025fe:	e7fe      	b.n	80025fe <LoopForever>
  ldr   r0, =_estack
 8002600:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800260c:	08006aa4 	.word	0x08006aa4
  ldr r2, =_sbss
 8002610:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002614:	200002b8 	.word	0x200002b8

08002618 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC1_COMP_IRQHandler>
	...

0800261c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_Init+0x24>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_Init+0x24>)
 8002626:	2110      	movs	r1, #16
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800262c:	2003      	movs	r0, #3
 800262e:	f000 f809 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002632:	f7ff fdff 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40022000 	.word	0x40022000

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_InitTick+0x5c>)
 800264e:	681c      	ldr	r4, [r3, #0]
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_InitTick+0x60>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	0019      	movs	r1, r3
 8002656:	23fa      	movs	r3, #250	; 0xfa
 8002658:	0098      	lsls	r0, r3, #2
 800265a:	f7fd fd53 	bl	8000104 <__udivsi3>
 800265e:	0003      	movs	r3, r0
 8002660:	0019      	movs	r1, r3
 8002662:	0020      	movs	r0, r4
 8002664:	f7fd fd4e 	bl	8000104 <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f92f 	bl	80028ce <HAL_SYSTICK_Config>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00f      	b.n	8002698 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d80b      	bhi.n	8002696 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	2200      	movs	r2, #0
 8002686:	0018      	movs	r0, r3
 8002688:	f000 f8fc 	bl	8002884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_InitTick+0x64>)
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b003      	add	sp, #12
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	20000014 	.word	0x20000014
 80026a8:	20000010 	.word	0x20000010

080026ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_IncTick+0x1c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	001a      	movs	r2, r3
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_IncTick+0x20>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	18d2      	adds	r2, r2, r3
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_IncTick+0x20>)
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	20000014 	.word	0x20000014
 80026cc:	200002b4 	.word	0x200002b4

080026d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_GetTick+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	200002b4 	.word	0x200002b4

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	001a      	movs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	189b      	adds	r3, r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	f7ff ffe0 	bl	80026d0 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	20000014 	.word	0x20000014

0800272c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	0002      	movs	r2, r0
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b7f      	cmp	r3, #127	; 0x7f
 800273e:	d809      	bhi.n	8002754 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	001a      	movs	r2, r3
 8002746:	231f      	movs	r3, #31
 8002748:	401a      	ands	r2, r3
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_EnableIRQ+0x30>)
 800274c:	2101      	movs	r1, #1
 800274e:	4091      	lsls	r1, r2
 8002750:	000a      	movs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
  }
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b7f      	cmp	r3, #127	; 0x7f
 8002774:	d828      	bhi.n	80027c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002776:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <__NVIC_SetPriority+0xd4>)
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b25b      	sxtb	r3, r3
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	33c0      	adds	r3, #192	; 0xc0
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	589b      	ldr	r3, [r3, r2]
 8002786:	1dfa      	adds	r2, r7, #7
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	0011      	movs	r1, r2
 800278c:	2203      	movs	r2, #3
 800278e:	400a      	ands	r2, r1
 8002790:	00d2      	lsls	r2, r2, #3
 8002792:	21ff      	movs	r1, #255	; 0xff
 8002794:	4091      	lsls	r1, r2
 8002796:	000a      	movs	r2, r1
 8002798:	43d2      	mvns	r2, r2
 800279a:	401a      	ands	r2, r3
 800279c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	019b      	lsls	r3, r3, #6
 80027a2:	22ff      	movs	r2, #255	; 0xff
 80027a4:	401a      	ands	r2, r3
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	0018      	movs	r0, r3
 80027ac:	2303      	movs	r3, #3
 80027ae:	4003      	ands	r3, r0
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b4:	481f      	ldr	r0, [pc, #124]	; (8002834 <__NVIC_SetPriority+0xd4>)
 80027b6:	1dfb      	adds	r3, r7, #7
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	430a      	orrs	r2, r1
 80027c0:	33c0      	adds	r3, #192	; 0xc0
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027c6:	e031      	b.n	800282c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <__NVIC_SetPriority+0xd8>)
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0019      	movs	r1, r3
 80027d0:	230f      	movs	r3, #15
 80027d2:	400b      	ands	r3, r1
 80027d4:	3b08      	subs	r3, #8
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3306      	adds	r3, #6
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	3304      	adds	r3, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1dfa      	adds	r2, r7, #7
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	0011      	movs	r1, r2
 80027e8:	2203      	movs	r2, #3
 80027ea:	400a      	ands	r2, r1
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	21ff      	movs	r1, #255	; 0xff
 80027f0:	4091      	lsls	r1, r2
 80027f2:	000a      	movs	r2, r1
 80027f4:	43d2      	mvns	r2, r2
 80027f6:	401a      	ands	r2, r3
 80027f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	401a      	ands	r2, r3
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	0018      	movs	r0, r3
 8002808:	2303      	movs	r3, #3
 800280a:	4003      	ands	r3, r0
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <__NVIC_SetPriority+0xd8>)
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	001c      	movs	r4, r3
 8002818:	230f      	movs	r3, #15
 800281a:	4023      	ands	r3, r4
 800281c:	3b08      	subs	r3, #8
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	430a      	orrs	r2, r1
 8002822:	3306      	adds	r3, #6
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	18c3      	adds	r3, r0, r3
 8002828:	3304      	adds	r3, #4
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b003      	add	sp, #12
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	045b      	lsls	r3, r3, #17
 800284c:	429a      	cmp	r2, r3
 800284e:	d301      	bcc.n	8002854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002850:	2301      	movs	r3, #1
 8002852:	e010      	b.n	8002876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <SysTick_Config+0x44>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	3a01      	subs	r2, #1
 800285a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285c:	2301      	movs	r3, #1
 800285e:	425b      	negs	r3, r3
 8002860:	2103      	movs	r1, #3
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ff7c 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x44>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x44>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	210f      	movs	r1, #15
 8002890:	187b      	adds	r3, r7, r1
 8002892:	1c02      	adds	r2, r0, #0
 8002894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	187b      	adds	r3, r7, r1
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b25b      	sxtb	r3, r3
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	0002      	movs	r2, r0
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ff33 	bl	800272c <__NVIC_EnableIRQ>
}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ffaf 	bl	800283c <SysTick_Config>
 80028de:	0003      	movs	r3, r0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e036      	b.n	800296c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2221      	movs	r2, #33	; 0x21
 8002902:	2102      	movs	r1, #2
 8002904:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_DMA_Init+0x8c>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f9c4 	bl	8002cdc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	ffffc00f 	.word	0xffffc00f

08002978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2317      	movs	r3, #23
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	5c9b      	ldrb	r3, [r3, r2]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_DMA_Start_IT+0x24>
 8002998:	2302      	movs	r3, #2
 800299a:	e04f      	b.n	8002a3c <HAL_DMA_Start_IT+0xc4>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	2101      	movs	r1, #1
 80029a2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2221      	movs	r2, #33	; 0x21
 80029a8:	5c9b      	ldrb	r3, [r3, r2]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d13a      	bne.n	8002a26 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	2102      	movs	r1, #2
 80029b6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f954 	bl	8002c82 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	210e      	movs	r1, #14
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00f      	b.n	8002a14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	210a      	movs	r1, #10
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2104      	movs	r1, #4
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e007      	b.n	8002a36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a2e:	2317      	movs	r3, #23
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002a36:	2317      	movs	r3, #23
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b006      	add	sp, #24
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e020      	b.n	8002aac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	210e      	movs	r1, #14
 8002a76:	438a      	bics	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	438a      	bics	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	2101      	movs	r1, #1
 8002a94:	4091      	lsls	r1, r2
 8002a96:	000a      	movs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	210f      	movs	r1, #15
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d006      	beq.n	8002ade <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e028      	b.n	8002b30 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	210e      	movs	r1, #14
 8002aea:	438a      	bics	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	438a      	bics	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	2101      	movs	r1, #1
 8002b08:	4091      	lsls	r1, r2
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	4798      	blx	r3
    }
  }
  return status;
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781b      	ldrb	r3, [r3, #0]
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	0013      	movs	r3, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	d024      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x72>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d020      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2220      	movs	r2, #32
 8002b76:	4013      	ands	r3, r2
 8002b78:	d107      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2104      	movs	r1, #4
 8002b86:	438a      	bics	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2104      	movs	r1, #4
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d100      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x66>
 8002ba2:	e06a      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	0010      	movs	r0, r2
 8002bac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002bae:	e064      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d02b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xda>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d027      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d10b      	bne.n	8002bec <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	210a      	movs	r1, #10
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	2101      	movs	r1, #1
 8002bea:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d036      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	0010      	movs	r0, r2
 8002c14:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c16:	e030      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	d028      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d024      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	210e      	movs	r1, #14
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4091      	lsls	r1, r2
 8002c4c:	000a      	movs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	0010      	movs	r0, r2
 8002c76:	4798      	blx	r3
    }
  }
}
 8002c78:	e7ff      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4091      	lsls	r1, r2
 8002c9c:	000a      	movs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d108      	bne.n	8002cc2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc0:	e007      	b.n	8002cd2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	60da      	str	r2, [r3, #12]
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	001a      	movs	r2, r3
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <DMA_CalcBaseAndBitshift+0x60>)
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d810      	bhi.n	8002d12 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <DMA_CalcBaseAndBitshift+0x64>)
 8002cf6:	4694      	mov	ip, r2
 8002cf8:	4463      	add	r3, ip
 8002cfa:	2114      	movs	r1, #20
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fd fa01 	bl	8000104 <__udivsi3>
 8002d02:	0003      	movs	r3, r0
 8002d04:	009a      	lsls	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <DMA_CalcBaseAndBitshift+0x68>)
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002d10:	e00f      	b.n	8002d32 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <DMA_CalcBaseAndBitshift+0x6c>)
 8002d18:	4694      	mov	ip, r2
 8002d1a:	4463      	add	r3, ip
 8002d1c:	2114      	movs	r1, #20
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7fd f9f0 	bl	8000104 <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <DMA_CalcBaseAndBitshift+0x70>)
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40020407 	.word	0x40020407
 8002d40:	bffdfff8 	.word	0xbffdfff8
 8002d44:	40020000 	.word	0x40020000
 8002d48:	bffdfbf8 	.word	0xbffdfbf8
 8002d4c:	40020400 	.word	0x40020400

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	e155      	b.n	800300c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4091      	lsls	r1, r2
 8002d6a:	000a      	movs	r2, r1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <HAL_GPIO_Init+0x28>
 8002d76:	e146      	b.n	8003006 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d005      	beq.n	8002d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d130      	bne.n	8002df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	0013      	movs	r3, r2
 8002da0:	43da      	mvns	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	2201      	movs	r2, #1
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d017      	beq.n	8002e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d123      	bne.n	8002e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	58d3      	ldr	r3, [r2, r3]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0013      	movs	r3, r2
 8002e56:	43da      	mvns	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2107      	movs	r1, #7
 8002e66:	400b      	ands	r3, r1
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	6939      	ldr	r1, [r7, #16]
 8002e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	43da      	mvns	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d100      	bne.n	8002ec4 <HAL_GPIO_Init+0x174>
 8002ec2:	e0a0      	b.n	8003006 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_GPIO_Init+0x2d4>)
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_GPIO_Init+0x2d4>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	619a      	str	r2, [r3, #24]
 8002ed0:	4b54      	ldr	r3, [pc, #336]	; (8003024 <HAL_GPIO_Init+0x2d4>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_GPIO_Init+0x2d8>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	589b      	ldr	r3, [r3, r2]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2203      	movs	r2, #3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	2390      	movs	r3, #144	; 0x90
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x1ea>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a46      	ldr	r2, [pc, #280]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x1e6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a45      	ldr	r2, [pc, #276]	; (8003034 <HAL_GPIO_Init+0x2e4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x1e2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a44      	ldr	r2, [pc, #272]	; (8003038 <HAL_GPIO_Init+0x2e8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x1de>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	e008      	b.n	8002f40 <HAL_GPIO_Init+0x1f0>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x1f0>
 8002f32:	2303      	movs	r3, #3
 8002f34:	e004      	b.n	8002f40 <HAL_GPIO_Init+0x1f0>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_Init+0x1f0>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_GPIO_Init+0x1f0>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	2103      	movs	r1, #3
 8002f44:	400a      	ands	r2, r1
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	4093      	lsls	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f50:	4935      	ldr	r1, [pc, #212]	; (8003028 <HAL_GPIO_Init+0x2d8>)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	035b      	lsls	r3, r3, #13
 8002f76:	4013      	ands	r3, r2
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	039b      	lsls	r3, r3, #14
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	029b      	lsls	r3, r3, #10
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	40da      	lsrs	r2, r3
 8003014:	1e13      	subs	r3, r2, #0
 8003016:	d000      	beq.n	800301a <HAL_GPIO_Init+0x2ca>
 8003018:	e6a2      	b.n	8002d60 <HAL_GPIO_Init+0x10>
  } 
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b006      	add	sp, #24
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	40010000 	.word	0x40010000
 800302c:	48000400 	.word	0x48000400
 8003030:	48000800 	.word	0x48000800
 8003034:	48000c00 	.word	0x48000c00
 8003038:	48001000 	.word	0x48001000
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	0008      	movs	r0, r1
 800304a:	0011      	movs	r1, r2
 800304c:	1cbb      	adds	r3, r7, #2
 800304e:	1c02      	adds	r2, r0, #0
 8003050:	801a      	strh	r2, [r3, #0]
 8003052:	1c7b      	adds	r3, r7, #1
 8003054:	1c0a      	adds	r2, r1, #0
 8003056:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003058:	1c7b      	adds	r3, r7, #1
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003060:	1cbb      	adds	r3, r7, #2
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003068:	e003      	b.n	8003072 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306a:	1cbb      	adds	r3, r7, #2
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	0002      	movs	r2, r0
 8003084:	1dbb      	adds	r3, r7, #6
 8003086:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	1dba      	adds	r2, r7, #6
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	4013      	ands	r3, r2
 8003092:	d008      	beq.n	80030a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003096:	1dba      	adds	r2, r7, #6
 8003098:	8812      	ldrh	r2, [r2, #0]
 800309a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7fe fd0f 	bl	8001ac4 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	40010400 	.word	0x40010400

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f000 fb76 	bl	80037b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d100      	bne.n	80030d4 <HAL_RCC_OscConfig+0x20>
 80030d2:	e08e      	b.n	80031f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030d4:	4bc5      	ldr	r3, [pc, #788]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	220c      	movs	r2, #12
 80030da:	4013      	ands	r3, r2
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d00e      	beq.n	80030fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e0:	4bc2      	ldr	r3, [pc, #776]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	220c      	movs	r2, #12
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d117      	bne.n	800311c <HAL_RCC_OscConfig+0x68>
 80030ec:	4bbf      	ldr	r3, [pc, #764]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	23c0      	movs	r3, #192	; 0xc0
 80030f2:	025b      	lsls	r3, r3, #9
 80030f4:	401a      	ands	r2, r3
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	025b      	lsls	r3, r3, #9
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d10e      	bne.n	800311c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fe:	4bbb      	ldr	r3, [pc, #748]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	029b      	lsls	r3, r3, #10
 8003106:	4013      	ands	r3, r2
 8003108:	d100      	bne.n	800310c <HAL_RCC_OscConfig+0x58>
 800310a:	e071      	b.n	80031f0 <HAL_RCC_OscConfig+0x13c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d000      	beq.n	8003116 <HAL_RCC_OscConfig+0x62>
 8003114:	e06c      	b.n	80031f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f000 fb4c 	bl	80037b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x80>
 8003124:	4bb1      	ldr	r3, [pc, #708]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4bb0      	ldr	r3, [pc, #704]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	0249      	lsls	r1, r1, #9
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e02f      	b.n	8003194 <HAL_RCC_OscConfig+0xe0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0xa2>
 800313c:	4bab      	ldr	r3, [pc, #684]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4baa      	ldr	r3, [pc, #680]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003142:	49ab      	ldr	r1, [pc, #684]	; (80033f0 <HAL_RCC_OscConfig+0x33c>)
 8003144:	400a      	ands	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	4ba8      	ldr	r3, [pc, #672]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4ba7      	ldr	r3, [pc, #668]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800314e:	49a9      	ldr	r1, [pc, #676]	; (80033f4 <HAL_RCC_OscConfig+0x340>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e01e      	b.n	8003194 <HAL_RCC_OscConfig+0xe0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10e      	bne.n	800317c <HAL_RCC_OscConfig+0xc8>
 800315e:	4ba3      	ldr	r3, [pc, #652]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4ba2      	ldr	r3, [pc, #648]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	02c9      	lsls	r1, r1, #11
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	4b9f      	ldr	r3, [pc, #636]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b9e      	ldr	r3, [pc, #632]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	0249      	lsls	r1, r1, #9
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xe0>
 800317c:	4b9b      	ldr	r3, [pc, #620]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b9a      	ldr	r3, [pc, #616]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003182:	499b      	ldr	r1, [pc, #620]	; (80033f0 <HAL_RCC_OscConfig+0x33c>)
 8003184:	400a      	ands	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	4b98      	ldr	r3, [pc, #608]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b97      	ldr	r3, [pc, #604]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800318e:	4999      	ldr	r1, [pc, #612]	; (80033f4 <HAL_RCC_OscConfig+0x340>)
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d014      	beq.n	80031c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7ff fa98 	bl	80026d0 <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a6:	f7ff fa93 	bl	80026d0 <HAL_GetTick>
 80031aa:	0002      	movs	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b64      	cmp	r3, #100	; 0x64
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e2fd      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b8:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	029b      	lsls	r3, r3, #10
 80031c0:	4013      	ands	r3, r2
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0xf2>
 80031c4:	e015      	b.n	80031f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7ff fa83 	bl	80026d0 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7ff fa7e 	bl	80026d0 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2e8      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	4013      	ands	r3, r2
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x11c>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2202      	movs	r2, #2
 80031f8:	4013      	ands	r3, r2
 80031fa:	d100      	bne.n	80031fe <HAL_RCC_OscConfig+0x14a>
 80031fc:	e06c      	b.n	80032d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031fe:	4b7b      	ldr	r3, [pc, #492]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	220c      	movs	r2, #12
 8003204:	4013      	ands	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003208:	4b78      	ldr	r3, [pc, #480]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	220c      	movs	r2, #12
 800320e:	4013      	ands	r3, r2
 8003210:	2b08      	cmp	r3, #8
 8003212:	d11f      	bne.n	8003254 <HAL_RCC_OscConfig+0x1a0>
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	23c0      	movs	r3, #192	; 0xc0
 800321a:	025b      	lsls	r3, r3, #9
 800321c:	401a      	ands	r2, r3
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	429a      	cmp	r2, r3
 8003224:	d116      	bne.n	8003254 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	4b71      	ldr	r3, [pc, #452]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2202      	movs	r2, #2
 800322c:	4013      	ands	r3, r2
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x188>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e2bb      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b6b      	ldr	r3, [pc, #428]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	22f8      	movs	r2, #248	; 0xf8
 8003242:	4393      	bics	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00da      	lsls	r2, r3, #3
 800324c:	4b67      	ldr	r3, [pc, #412]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	e041      	b.n	80032d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d024      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325c:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b62      	ldr	r3, [pc, #392]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003262:	2101      	movs	r1, #1
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7ff fa32 	bl	80026d0 <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003272:	f7ff fa2d 	bl	80026d0 <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e297      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d0f1      	beq.n	8003272 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	22f8      	movs	r2, #248	; 0xf8
 8003294:	4393      	bics	r3, r2
 8003296:	0019      	movs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	00da      	lsls	r2, r3, #3
 800329e:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e018      	b.n	80032d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b51      	ldr	r3, [pc, #324]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	438a      	bics	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7ff fa0d 	bl	80026d0 <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032bc:	f7ff fa08 	bl	80026d0 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e272      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2202      	movs	r2, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	d1f1      	bne.n	80032bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2208      	movs	r2, #8
 80032de:	4013      	ands	r3, r2
 80032e0:	d036      	beq.n	8003350 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d019      	beq.n	800331e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ea:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80032ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7ff f9eb 	bl	80026d0 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003300:	f7ff f9e6 	bl	80026d0 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e250      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	d0f1      	beq.n	8003300 <HAL_RCC_OscConfig+0x24c>
 800331c:	e018      	b.n	8003350 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331e:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003322:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003324:	2101      	movs	r1, #1
 8003326:	438a      	bics	r2, r1
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7ff f9d1 	bl	80026d0 <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003334:	f7ff f9cc 	bl	80026d0 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e236      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2202      	movs	r2, #2
 800334c:	4013      	ands	r3, r2
 800334e:	d1f1      	bne.n	8003334 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2204      	movs	r2, #4
 8003356:	4013      	ands	r3, r2
 8003358:	d100      	bne.n	800335c <HAL_RCC_OscConfig+0x2a8>
 800335a:	e0b5      	b.n	80034c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	201f      	movs	r0, #31
 800335e:	183b      	adds	r3, r7, r0
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	055b      	lsls	r3, r3, #21
 800336c:	4013      	ands	r3, r2
 800336e:	d110      	bne.n	8003392 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	0549      	lsls	r1, r1, #21
 800337a:	430a      	orrs	r2, r1
 800337c:	61da      	str	r2, [r3, #28]
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	055b      	lsls	r3, r3, #21
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800338c:	183b      	adds	r3, r7, r0
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_OscConfig+0x344>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d11a      	bne.n	80033d4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_RCC_OscConfig+0x344>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0x344>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	0049      	lsls	r1, r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ac:	f7ff f990 	bl	80026d0 <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7ff f98b 	bl	80026d0 <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1f5      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_OscConfig+0x344>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d10f      	bne.n	80033fc <HAL_RCC_OscConfig+0x348>
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	4b02      	ldr	r3, [pc, #8]	; (80033ec <HAL_RCC_OscConfig+0x338>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	621a      	str	r2, [r3, #32]
 80033e8:	e036      	b.n	8003458 <HAL_RCC_OscConfig+0x3a4>
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40021000 	.word	0x40021000
 80033f0:	fffeffff 	.word	0xfffeffff
 80033f4:	fffbffff 	.word	0xfffbffff
 80033f8:	40007000 	.word	0x40007000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10c      	bne.n	800341e <HAL_RCC_OscConfig+0x36a>
 8003404:	4bca      	ldr	r3, [pc, #808]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	4bc9      	ldr	r3, [pc, #804]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800340a:	2101      	movs	r1, #1
 800340c:	438a      	bics	r2, r1
 800340e:	621a      	str	r2, [r3, #32]
 8003410:	4bc7      	ldr	r3, [pc, #796]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	4bc6      	ldr	r3, [pc, #792]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003416:	2104      	movs	r1, #4
 8003418:	438a      	bics	r2, r1
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	e01c      	b.n	8003458 <HAL_RCC_OscConfig+0x3a4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x38c>
 8003426:	4bc2      	ldr	r3, [pc, #776]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	4bc1      	ldr	r3, [pc, #772]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800342c:	2104      	movs	r1, #4
 800342e:	430a      	orrs	r2, r1
 8003430:	621a      	str	r2, [r3, #32]
 8003432:	4bbf      	ldr	r3, [pc, #764]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	4bbe      	ldr	r3, [pc, #760]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003438:	2101      	movs	r1, #1
 800343a:	430a      	orrs	r2, r1
 800343c:	621a      	str	r2, [r3, #32]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x3a4>
 8003440:	4bbb      	ldr	r3, [pc, #748]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	4bba      	ldr	r3, [pc, #744]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	621a      	str	r2, [r3, #32]
 800344c:	4bb8      	ldr	r3, [pc, #736]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	4bb7      	ldr	r3, [pc, #732]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003452:	2104      	movs	r1, #4
 8003454:	438a      	bics	r2, r1
 8003456:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d014      	beq.n	800348a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff f936 	bl	80026d0 <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	e009      	b.n	800347e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7ff f931 	bl	80026d0 <HAL_GetTick>
 800346e:	0002      	movs	r2, r0
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	4aaf      	ldr	r2, [pc, #700]	; (8003734 <HAL_RCC_OscConfig+0x680>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e19a      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4bac      	ldr	r3, [pc, #688]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	2202      	movs	r2, #2
 8003484:	4013      	ands	r3, r2
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x3b6>
 8003488:	e013      	b.n	80034b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7ff f921 	bl	80026d0 <HAL_GetTick>
 800348e:	0003      	movs	r3, r0
 8003490:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	e009      	b.n	80034a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7ff f91c 	bl	80026d0 <HAL_GetTick>
 8003498:	0002      	movs	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	4aa5      	ldr	r2, [pc, #660]	; (8003734 <HAL_RCC_OscConfig+0x680>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e185      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	4ba1      	ldr	r3, [pc, #644]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	2202      	movs	r2, #2
 80034ae:	4013      	ands	r3, r2
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b2:	231f      	movs	r3, #31
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b9c      	ldr	r3, [pc, #624]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	4b9b      	ldr	r3, [pc, #620]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034c2:	499d      	ldr	r1, [pc, #628]	; (8003738 <HAL_RCC_OscConfig+0x684>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	4013      	ands	r3, r2
 80034d0:	d063      	beq.n	800359a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d12a      	bne.n	8003530 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034da:	4b95      	ldr	r3, [pc, #596]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034de:	4b94      	ldr	r3, [pc, #592]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034e0:	2104      	movs	r1, #4
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80034e6:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ea:	4b91      	ldr	r3, [pc, #580]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	430a      	orrs	r2, r1
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7ff f8ed 	bl	80026d0 <HAL_GetTick>
 80034f6:	0003      	movs	r3, r0
 80034f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034fc:	f7ff f8e8 	bl	80026d0 <HAL_GetTick>
 8003500:	0002      	movs	r2, r0
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e152      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	2202      	movs	r2, #2
 8003514:	4013      	ands	r3, r2
 8003516:	d0f1      	beq.n	80034fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003518:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	22f8      	movs	r2, #248	; 0xf8
 800351e:	4393      	bics	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	00da      	lsls	r2, r3, #3
 8003528:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800352a:	430a      	orrs	r2, r1
 800352c:	635a      	str	r2, [r3, #52]	; 0x34
 800352e:	e034      	b.n	800359a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	3305      	adds	r3, #5
 8003536:	d111      	bne.n	800355c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003538:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800353a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353c:	4b7c      	ldr	r3, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800353e:	2104      	movs	r1, #4
 8003540:	438a      	bics	r2, r1
 8003542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003544:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	22f8      	movs	r2, #248	; 0xf8
 800354a:	4393      	bics	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	00da      	lsls	r2, r3, #3
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003556:	430a      	orrs	r2, r1
 8003558:	635a      	str	r2, [r3, #52]	; 0x34
 800355a:	e01e      	b.n	800359a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800355c:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003560:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003562:	2104      	movs	r1, #4
 8003564:	430a      	orrs	r2, r1
 8003566:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003568:	4b71      	ldr	r3, [pc, #452]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356c:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800356e:	2101      	movs	r1, #1
 8003570:	438a      	bics	r2, r1
 8003572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003574:	f7ff f8ac 	bl	80026d0 <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800357e:	f7ff f8a7 	bl	80026d0 <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e111      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003590:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d1f1      	bne.n	800357e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	4013      	ands	r3, r2
 80035a2:	d05c      	beq.n	800365e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035a4:	4b62      	ldr	r3, [pc, #392]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	220c      	movs	r2, #12
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d00e      	beq.n	80035ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035b0:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	220c      	movs	r2, #12
 80035b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d114      	bne.n	80035e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035bc:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	23c0      	movs	r3, #192	; 0xc0
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	401a      	ands	r2, r3
 80035c6:	23c0      	movs	r3, #192	; 0xc0
 80035c8:	025b      	lsls	r3, r3, #9
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035ce:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	4013      	ands	r3, r2
 80035d8:	d040      	beq.n	800365c <HAL_RCC_OscConfig+0x5a8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d03c      	beq.n	800365c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0e6      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01b      	beq.n	8003626 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80035ee:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80035f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f2:	4b4f      	ldr	r3, [pc, #316]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	0249      	lsls	r1, r1, #9
 80035f8:	430a      	orrs	r2, r1
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff f868 	bl	80026d0 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003606:	f7ff f863 	bl	80026d0 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0cd      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003618:	4b45      	ldr	r3, [pc, #276]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800361a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	4013      	ands	r3, r2
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x552>
 8003624:	e01b      	b.n	800365e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800362c:	4943      	ldr	r1, [pc, #268]	; (800373c <HAL_RCC_OscConfig+0x688>)
 800362e:	400a      	ands	r2, r1
 8003630:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003632:	f7ff f84d 	bl	80026d0 <HAL_GetTick>
 8003636:	0003      	movs	r3, r0
 8003638:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800363c:	f7ff f848 	bl	80026d0 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0b2      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800364e:	4b38      	ldr	r3, [pc, #224]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	029b      	lsls	r3, r3, #10
 8003656:	4013      	ands	r3, r2
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x588>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800365c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d100      	bne.n	8003668 <HAL_RCC_OscConfig+0x5b4>
 8003666:	e0a4      	b.n	80037b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	220c      	movs	r2, #12
 800366e:	4013      	ands	r3, r2
 8003670:	2b08      	cmp	r3, #8
 8003672:	d100      	bne.n	8003676 <HAL_RCC_OscConfig+0x5c2>
 8003674:	e078      	b.n	8003768 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b02      	cmp	r3, #2
 800367c:	d14c      	bne.n	8003718 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 8003684:	492e      	ldr	r1, [pc, #184]	; (8003740 <HAL_RCC_OscConfig+0x68c>)
 8003686:	400a      	ands	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7ff f821 	bl	80026d0 <HAL_GetTick>
 800368e:	0003      	movs	r3, r0
 8003690:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003694:	f7ff f81c 	bl	80026d0 <HAL_GetTick>
 8003698:	0002      	movs	r2, r0
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e086      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	049b      	lsls	r3, r3, #18
 80036ae:	4013      	ands	r3, r2
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	220f      	movs	r2, #15
 80036b8:	4393      	bics	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036c2:	430a      	orrs	r2, r1
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_RCC_OscConfig+0x690>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	431a      	orrs	r2, r3
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	0449      	lsls	r1, r1, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe ffef 	bl	80026d0 <HAL_GetTick>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe ffea 	bl	80026d0 <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e054      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	049b      	lsls	r3, r3, #18
 8003712:	4013      	ands	r3, r2
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x644>
 8003716:	e04c      	b.n	80037b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <HAL_RCC_OscConfig+0x67c>)
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <HAL_RCC_OscConfig+0x68c>)
 8003720:	400a      	ands	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe ffd4 	bl	80026d0 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x6a6>
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	40021000 	.word	0x40021000
 8003734:	00001388 	.word	0x00001388
 8003738:	efffffff 	.word	0xefffffff
 800373c:	fffeffff 	.word	0xfffeffff
 8003740:	feffffff 	.word	0xfeffffff
 8003744:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe ffc2 	bl	80026d0 <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e02c      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_OscConfig+0x708>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	049b      	lsls	r3, r3, #18
 8003762:	4013      	ands	r3, r2
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x694>
 8003766:	e024      	b.n	80037b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e01f      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCC_OscConfig+0x708>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x708>)
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	23c0      	movs	r3, #192	; 0xc0
 8003784:	025b      	lsls	r3, r3, #9
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	429a      	cmp	r2, r3
 800378e:	d10e      	bne.n	80037ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	220f      	movs	r2, #15
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d107      	bne.n	80037ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	23f0      	movs	r3, #240	; 0xf0
 80037a2:	039b      	lsls	r3, r3, #14
 80037a4:	401a      	ands	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b008      	add	sp, #32
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0bf      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b61      	ldr	r3, [pc, #388]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d911      	bls.n	8003806 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b5e      	ldr	r3, [pc, #376]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	4393      	bics	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	4b5b      	ldr	r3, [pc, #364]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f4:	4b59      	ldr	r3, [pc, #356]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d001      	beq.n	8003806 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0a6      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2202      	movs	r2, #2
 800380c:	4013      	ands	r3, r2
 800380e:	d015      	beq.n	800383c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2204      	movs	r2, #4
 8003816:	4013      	ands	r3, r2
 8003818:	d006      	beq.n	8003828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800381a:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003820:	21e0      	movs	r1, #224	; 0xe0
 8003822:	00c9      	lsls	r1, r1, #3
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b4d      	ldr	r3, [pc, #308]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	22f0      	movs	r2, #240	; 0xf0
 800382e:	4393      	bics	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	4b4a      	ldr	r3, [pc, #296]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2201      	movs	r2, #1
 8003842:	4013      	ands	r3, r2
 8003844:	d04c      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d120      	bne.n	800389c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07a      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	049b      	lsls	r3, r3, #18
 800386e:	4013      	ands	r3, r2
 8003870:	d114      	bne.n	800389c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06e      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	4013      	ands	r3, r2
 8003888:	d108      	bne.n	800389c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e062      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2202      	movs	r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e05b      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389c:	4b30      	ldr	r3, [pc, #192]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2203      	movs	r2, #3
 80038a2:	4393      	bics	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fe ff0e 	bl	80026d0 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b8:	e009      	b.n	80038ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ba:	f7fe ff09 	bl	80026d0 <HAL_GetTick>
 80038be:	0002      	movs	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_RCC_ClockConfig+0x1a4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e042      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	220c      	movs	r2, #12
 80038d4:	401a      	ands	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1ec      	bne.n	80038ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d211      	bcs.n	8003912 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	4393      	bics	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003900:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_RCC_ClockConfig+0x19c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d001      	beq.n	8003912 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e020      	b.n	8003954 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2204      	movs	r2, #4
 8003918:	4013      	ands	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_RCC_ClockConfig+0x1a8>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003930:	f000 f820 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003934:	0001      	movs	r1, r0
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_ClockConfig+0x1a0>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	220f      	movs	r2, #15
 800393e:	4013      	ands	r3, r2
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x1ac>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	000a      	movs	r2, r1
 8003946:	40da      	lsrs	r2, r3
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1b0>)
 800394a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800394c:	2003      	movs	r0, #3
 800394e:	f7fe fe79 	bl	8002644 <HAL_InitTick>
  
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40022000 	.word	0x40022000
 8003960:	40021000 	.word	0x40021000
 8003964:	00001388 	.word	0x00001388
 8003968:	fffff8ff 	.word	0xfffff8ff
 800396c:	08006a64 	.word	0x08006a64
 8003970:	2000000c 	.word	0x2000000c

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	220c      	movs	r2, #12
 8003998:	4013      	ands	r3, r2
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d046      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb8>
 800399e:	d848      	bhi.n	8003a32 <HAL_RCC_GetSysClockFreq+0xbe>
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d002      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x36>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d003      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x3c>
 80039a8:	e043      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039ac:	613b      	str	r3, [r7, #16]
      break;
 80039ae:	e043      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	0c9b      	lsrs	r3, r3, #18
 80039b4:	220f      	movs	r2, #15
 80039b6:	4013      	ands	r3, r2
 80039b8:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xd8>)
 80039ba:	5cd3      	ldrb	r3, [r2, r3]
 80039bc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	220f      	movs	r2, #15
 80039c4:	4013      	ands	r3, r2
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xdc>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	23c0      	movs	r3, #192	; 0xc0
 80039d0:	025b      	lsls	r3, r3, #9
 80039d2:	401a      	ands	r2, r3
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	025b      	lsls	r3, r3, #9
 80039d8:	429a      	cmp	r2, r3
 80039da:	d109      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	481a      	ldr	r0, [pc, #104]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039e0:	f7fc fb90 	bl	8000104 <__udivsi3>
 80039e4:	0003      	movs	r3, r0
 80039e6:	001a      	movs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4353      	muls	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e01a      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	23c0      	movs	r3, #192	; 0xc0
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	401a      	ands	r2, r3
 80039f8:	23c0      	movs	r3, #192	; 0xc0
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d109      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	4814      	ldr	r0, [pc, #80]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a04:	f7fc fb7e 	bl	8000104 <__udivsi3>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4353      	muls	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	480c      	ldr	r0, [pc, #48]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a18:	f7fc fb74 	bl	8000104 <__udivsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4353      	muls	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	613b      	str	r3, [r7, #16]
      break;
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a2e:	613b      	str	r3, [r7, #16]
      break;
 8003a30:	e002      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a34:	613b      	str	r3, [r7, #16]
      break;
 8003a36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a38:	693b      	ldr	r3, [r7, #16]
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	40021000 	.word	0x40021000
 8003a48:	007a1200 	.word	0x007a1200
 8003a4c:	08006a7c 	.word	0x08006a7c
 8003a50:	08006a8c 	.word	0x08006a8c
 8003a54:	02dc6c00 	.word	0x02dc6c00

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a5c:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	2000000c 	.word	0x2000000c

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a70:	f7ff fff2 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a74:	0001      	movs	r1, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	4013      	ands	r3, r2
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	40d9      	lsrs	r1, r3
 8003a86:	000b      	movs	r3, r1
}    
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08006a74 	.word	0x08006a74

08003a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	025b      	lsls	r3, r3, #9
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003ab4:	e08e      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003ab6:	2017      	movs	r0, #23
 8003ab8:	183b      	adds	r3, r7, r0
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abe:	4b6e      	ldr	r3, [pc, #440]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	055b      	lsls	r3, r3, #21
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d110      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	4b6b      	ldr	r3, [pc, #428]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	0549      	lsls	r1, r1, #21
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	61da      	str	r2, [r3, #28]
 8003ad8:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	055b      	lsls	r3, r3, #21
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae6:	183b      	adds	r3, r7, r0
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	d11a      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af8:	4b60      	ldr	r3, [pc, #384]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	0049      	lsls	r1, r1, #1
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fe fde3 	bl	80026d0 <HAL_GetTick>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fe fdde 	bl	80026d0 <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0a6      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	4b56      	ldr	r3, [pc, #344]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2e:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	23c0      	movs	r3, #192	; 0xc0
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4013      	ands	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d034      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	23c0      	movs	r3, #192	; 0xc0
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d02c      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b50:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0249      	lsls	r1, r1, #9
 8003b64:	430a      	orrs	r2, r1
 8003b66:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b6e:	4945      	ldr	r1, [pc, #276]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003b70:	400a      	ands	r2, r1
 8003b72:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b74:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe fda5 	bl	80026d0 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e009      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fe fda0 	bl	80026d0 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e067      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bbe:	2317      	movs	r3, #23
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bce:	492f      	ldr	r1, [pc, #188]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	2203      	movs	r2, #3
 8003be4:	4393      	bics	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	02db      	lsls	r3, r3, #11
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2220      	movs	r2, #32
 8003c36:	4013      	ands	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	2210      	movs	r2, #16
 8003c40:	4393      	bics	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4013      	ands	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	4393      	bics	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b006      	add	sp, #24
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	fffffcff 	.word	0xfffffcff
 8003c84:	fffeffff 	.word	0xfffeffff
 8003c88:	00001388 	.word	0x00001388
 8003c8c:	efffffff 	.word	0xefffffff
 8003c90:	fffcffff 	.word	0xfffcffff
 8003c94:	fff3ffff 	.word	0xfff3ffff

08003c98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	1dbb      	adds	r3, r7, #6
 8003ca6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ca8:	231f      	movs	r3, #31
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	225c      	movs	r2, #92	; 0x5c
 8003cb4:	5c9b      	ldrb	r3, [r3, r2]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_SPI_Transmit+0x26>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e147      	b.n	8003f4e <HAL_SPI_Transmit+0x2b6>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	225c      	movs	r2, #92	; 0x5c
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc6:	f7fe fd03 	bl	80026d0 <HAL_GetTick>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003cce:	2316      	movs	r3, #22
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	1dba      	adds	r2, r7, #6
 8003cd4:	8812      	ldrh	r2, [r2, #0]
 8003cd6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	225d      	movs	r2, #93	; 0x5d
 8003cdc:	5c9b      	ldrb	r3, [r3, r2]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d004      	beq.n	8003cee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003ce4:	231f      	movs	r3, #31
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2202      	movs	r2, #2
 8003cea:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cec:	e128      	b.n	8003f40 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_SPI_Transmit+0x64>
 8003cf4:	1dbb      	adds	r3, r7, #6
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003cfc:	231f      	movs	r3, #31
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d04:	e11c      	b.n	8003f40 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	225d      	movs	r2, #93	; 0x5d
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1dba      	adds	r2, r7, #6
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1dba      	adds	r2, r7, #6
 8003d26:	8812      	ldrh	r2, [r2, #0]
 8003d28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2244      	movs	r2, #68	; 0x44
 8003d34:	2100      	movs	r1, #0
 8003d36:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2246      	movs	r2, #70	; 0x46
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d110      	bne.n	8003d7a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2140      	movs	r1, #64	; 0x40
 8003d64:	438a      	bics	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	01c9      	lsls	r1, r1, #7
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2240      	movs	r2, #64	; 0x40
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d007      	beq.n	8003d98 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2140      	movs	r1, #64	; 0x40
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	23e0      	movs	r3, #224	; 0xe0
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d952      	bls.n	8003e4a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_SPI_Transmit+0x11e>
 8003dac:	2316      	movs	r3, #22
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d143      	bne.n	8003e3e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	881a      	ldrh	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	1c9a      	adds	r2, r3, #2
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dda:	e030      	b.n	8003e3e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2202      	movs	r2, #2
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d112      	bne.n	8003e10 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	881a      	ldrh	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	1c9a      	adds	r2, r3, #2
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e0e:	e016      	b.n	8003e3e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e10:	f7fe fc5e 	bl	80026d0 <HAL_GetTick>
 8003e14:	0002      	movs	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <HAL_SPI_Transmit+0x18e>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_SPI_Transmit+0x194>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003e2c:	231f      	movs	r3, #31
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2203      	movs	r2, #3
 8003e32:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	225d      	movs	r2, #93	; 0x5d
 8003e38:	2101      	movs	r1, #1
 8003e3a:	5499      	strb	r1, [r3, r2]
          goto error;
 8003e3c:	e080      	b.n	8003f40 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1c9      	bne.n	8003ddc <HAL_SPI_Transmit+0x144>
 8003e48:	e053      	b.n	8003ef2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_SPI_Transmit+0x1c4>
 8003e52:	2316      	movs	r3, #22
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d145      	bne.n	8003ee8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003e82:	e031      	b.n	8003ee8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d113      	bne.n	8003eba <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb8:	e016      	b.n	8003ee8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eba:	f7fe fc09 	bl	80026d0 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d802      	bhi.n	8003ed0 <HAL_SPI_Transmit+0x238>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_SPI_Transmit+0x23e>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003ed6:	231f      	movs	r3, #31
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2203      	movs	r2, #3
 8003edc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	225d      	movs	r2, #93	; 0x5d
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]
          goto error;
 8003ee6:	e02b      	b.n	8003f40 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1c8      	bne.n	8003e84 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 f95d 	bl	80041b8 <SPI_EndRxTxTransaction>
 8003efe:	1e03      	subs	r3, r0, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e003      	b.n	8003f40 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	225d      	movs	r2, #93	; 0x5d
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	225c      	movs	r2, #92	; 0x5c
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f48:	231f      	movs	r3, #31
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781b      	ldrb	r3, [r3, #0]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b008      	add	sp, #32
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f68:	f7fe fbb2 	bl	80026d0 <HAL_GetTick>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f78:	f7fe fbaa 	bl	80026d0 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f80:	4b3a      	ldr	r3, [pc, #232]	; (800406c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	015b      	lsls	r3, r3, #5
 8003f86:	0d1b      	lsrs	r3, r3, #20
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	4353      	muls	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8e:	e058      	b.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	d055      	beq.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f96:	f7fe fb9b 	bl	80026d0 <HAL_GetTick>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d902      	bls.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x54>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d142      	bne.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	21e0      	movs	r1, #224	; 0xe0
 8003fb8:	438a      	bics	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	2382      	movs	r3, #130	; 0x82
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d113      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d005      	beq.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2140      	movs	r1, #64	; 0x40
 8003fec:	438a      	bics	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d110      	bne.n	800401e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	491a      	ldr	r1, [pc, #104]	; (8004070 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004008:	400a      	ands	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	0189      	lsls	r1, r1, #6
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	225d      	movs	r2, #93	; 0x5d
 8004022:	2101      	movs	r1, #1
 8004024:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	225c      	movs	r2, #92	; 0x5c
 800402a:	2100      	movs	r1, #0
 800402c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e017      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3b01      	subs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	425a      	negs	r2, r3
 8004052:	4153      	adcs	r3, r2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	001a      	movs	r2, r3
 8004058:	1dfb      	adds	r3, r7, #7
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d197      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b008      	add	sp, #32
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	2000000c 	.word	0x2000000c
 8004070:	ffffdfff 	.word	0xffffdfff

08004074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800408a:	f7fe fb21 	bl	80026d0 <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800409a:	f7fe fb19 	bl	80026d0 <HAL_GetTick>
 800409e:	0003      	movs	r3, r0
 80040a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	0013      	movs	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	189b      	adds	r3, r3, r2
 80040b4:	00da      	lsls	r2, r3, #3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	0d1b      	lsrs	r3, r3, #20
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	4353      	muls	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040c0:	e068      	b.n	8004194 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	23c0      	movs	r3, #192	; 0xc0
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d10a      	bne.n	80040e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	2117      	movs	r1, #23
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	d055      	beq.n	8004194 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040e8:	f7fe faf2 	bl	80026d0 <HAL_GetTick>
 80040ec:	0002      	movs	r2, r0
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d902      	bls.n	80040fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d142      	bne.n	8004184 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	21e0      	movs	r1, #224	; 0xe0
 800410a:	438a      	bics	r2, r1
 800410c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	2382      	movs	r3, #130	; 0x82
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	429a      	cmp	r2, r3
 8004118:	d113      	bne.n	8004142 <SPI_WaitFifoStateUntilTimeout+0xce>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	429a      	cmp	r2, r3
 8004124:	d005      	beq.n	8004132 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	429a      	cmp	r2, r3
 8004130:	d107      	bne.n	8004142 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	429a      	cmp	r2, r3
 800414c:	d110      	bne.n	8004170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4916      	ldr	r1, [pc, #88]	; (80041b4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800415a:	400a      	ands	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0189      	lsls	r1, r1, #6
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	225d      	movs	r2, #93	; 0x5d
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	225c      	movs	r2, #92	; 0x5c
 800417c:	2100      	movs	r1, #0
 800417e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e010      	b.n	80041a6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	3b01      	subs	r3, #1
 8004192:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d18e      	bne.n	80040c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b00a      	add	sp, #40	; 0x28
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	ffffdfff 	.word	0xffffdfff

080041b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	23c0      	movs	r3, #192	; 0xc0
 80041c8:	0159      	lsls	r1, r3, #5
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	0013      	movs	r3, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	f7ff ff4e 	bl	8004074 <SPI_WaitFifoStateUntilTimeout>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d007      	beq.n	80041ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	2220      	movs	r2, #32
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e027      	b.n	800423c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0013      	movs	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	f7ff fead 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d007      	beq.n	8004212 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004206:	2220      	movs	r2, #32
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e014      	b.n	800423c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	23c0      	movs	r3, #192	; 0xc0
 8004216:	00d9      	lsls	r1, r3, #3
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	0013      	movs	r3, r2
 8004220:	2200      	movs	r2, #0
 8004222:	f7ff ff27 	bl	8004074 <SPI_WaitFifoStateUntilTimeout>
 8004226:	1e03      	subs	r3, r0, #0
 8004228:	d007      	beq.n	800423a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	2220      	movs	r2, #32
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e000      	b.n	800423c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e042      	b.n	80042dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	223d      	movs	r2, #61	; 0x3d
 800425a:	5c9b      	ldrb	r3, [r3, r2]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	223c      	movs	r2, #60	; 0x3c
 8004266:	2100      	movs	r1, #0
 8004268:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fe f805 	bl	800227c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	223d      	movs	r2, #61	; 0x3d
 8004276:	2102      	movs	r1, #2
 8004278:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	0019      	movs	r1, r3
 8004284:	0010      	movs	r0, r2
 8004286:	f000 fd09 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2246      	movs	r2, #70	; 0x46
 800428e:	2101      	movs	r1, #1
 8004290:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	223e      	movs	r2, #62	; 0x3e
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	223f      	movs	r2, #63	; 0x3f
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2240      	movs	r2, #64	; 0x40
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2241      	movs	r2, #65	; 0x41
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2242      	movs	r2, #66	; 0x42
 80042b6:	2101      	movs	r1, #1
 80042b8:	5499      	strb	r1, [r3, r2]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2243      	movs	r2, #67	; 0x43
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2244      	movs	r2, #68	; 0x44
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2245      	movs	r2, #69	; 0x45
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223d      	movs	r2, #61	; 0x3d
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	223d      	movs	r2, #61	; 0x3d
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e03b      	b.n	8004374 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223d      	movs	r2, #61	; 0x3d
 8004300:	2102      	movs	r1, #2
 8004302:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIM_Base_Start_IT+0x98>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <HAL_TIM_Base_Start_IT+0x5a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	429a      	cmp	r2, r3
 8004328:	d009      	beq.n	800433e <HAL_TIM_Base_Start_IT+0x5a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_TIM_Base_Start_IT+0x9c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIM_Base_Start_IT+0x5a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_TIM_Base_Start_IT+0xa0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d111      	bne.n	8004362 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2207      	movs	r2, #7
 8004346:	4013      	ands	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d010      	beq.n	8004372 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	430a      	orrs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004360:	e007      	b.n	8004372 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2101      	movs	r1, #1
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b004      	add	sp, #16
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40014000 	.word	0x40014000

08004388 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2101      	movs	r1, #1
 800439c:	438a      	bics	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <HAL_TIM_Base_Stop_IT+0x54>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	d10d      	bne.n	80043c8 <HAL_TIM_Base_Stop_IT+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <HAL_TIM_Base_Stop_IT+0x58>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_Base_Stop_IT+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2101      	movs	r1, #1
 80043c4:	438a      	bics	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	223d      	movs	r2, #61	; 0x3d
 80043cc:	2101      	movs	r1, #1
 80043ce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b002      	add	sp, #8
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	00001111 	.word	0x00001111
 80043e0:	00000444 	.word	0x00000444

080043e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e042      	b.n	800447c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	223d      	movs	r2, #61	; 0x3d
 80043fa:	5c9b      	ldrb	r3, [r3, r2]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	223c      	movs	r2, #60	; 0x3c
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	0018      	movs	r0, r3
 800440e:	f000 f839 	bl	8004484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223d      	movs	r2, #61	; 0x3d
 8004416:	2102      	movs	r1, #2
 8004418:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	0019      	movs	r1, r3
 8004424:	0010      	movs	r0, r2
 8004426:	f000 fc39 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2246      	movs	r2, #70	; 0x46
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223e      	movs	r2, #62	; 0x3e
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223f      	movs	r2, #63	; 0x3f
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2241      	movs	r2, #65	; 0x41
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2242      	movs	r2, #66	; 0x42
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2243      	movs	r2, #67	; 0x43
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2244      	movs	r2, #68	; 0x44
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2245      	movs	r2, #69	; 0x45
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	223d      	movs	r2, #61	; 0x3d
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d108      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x22>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	223e      	movs	r2, #62	; 0x3e
 80044a8:	5c9b      	ldrb	r3, [r3, r2]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	1e5a      	subs	r2, r3, #1
 80044b0:	4193      	sbcs	r3, r2
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e01f      	b.n	80044f6 <HAL_TIM_PWM_Start+0x62>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d108      	bne.n	80044ce <HAL_TIM_PWM_Start+0x3a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	223f      	movs	r2, #63	; 0x3f
 80044c0:	5c9b      	ldrb	r3, [r3, r2]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	1e5a      	subs	r2, r3, #1
 80044c8:	4193      	sbcs	r3, r2
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	e013      	b.n	80044f6 <HAL_TIM_PWM_Start+0x62>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d108      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x52>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	5c9b      	ldrb	r3, [r3, r2]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	1e5a      	subs	r2, r3, #1
 80044e0:	4193      	sbcs	r3, r2
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e007      	b.n	80044f6 <HAL_TIM_PWM_Start+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2241      	movs	r2, #65	; 0x41
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	4193      	sbcs	r3, r2
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e074      	b.n	80045e8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0x7a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	223e      	movs	r2, #62	; 0x3e
 8004508:	2102      	movs	r1, #2
 800450a:	5499      	strb	r1, [r3, r2]
 800450c:	e013      	b.n	8004536 <HAL_TIM_PWM_Start+0xa2>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Start+0x8a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	223f      	movs	r2, #63	; 0x3f
 8004518:	2102      	movs	r1, #2
 800451a:	5499      	strb	r1, [r3, r2]
 800451c:	e00b      	b.n	8004536 <HAL_TIM_PWM_Start+0xa2>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0x9a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	2102      	movs	r1, #2
 800452a:	5499      	strb	r1, [r3, r2]
 800452c:	e003      	b.n	8004536 <HAL_TIM_PWM_Start+0xa2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2241      	movs	r2, #65	; 0x41
 8004532:	2102      	movs	r1, #2
 8004534:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	2201      	movs	r2, #1
 800453e:	0018      	movs	r0, r3
 8004540:	f000 fec2 	bl	80052c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <HAL_TIM_PWM_Start+0x15c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_PWM_Start+0xd8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <HAL_TIM_PWM_Start+0x160>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_PWM_Start+0xd8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <HAL_TIM_PWM_Start+0x164>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_PWM_Start+0xd8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a25      	ldr	r2, [pc, #148]	; (80045fc <HAL_TIM_PWM_Start+0x168>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_TIM_PWM_Start+0xdc>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_TIM_PWM_Start+0xde>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2180      	movs	r1, #128	; 0x80
 8004582:	0209      	lsls	r1, r1, #8
 8004584:	430a      	orrs	r2, r1
 8004586:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_TIM_PWM_Start+0x15c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00f      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x11e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	05db      	lsls	r3, r3, #23
 800459a:	429a      	cmp	r2, r3
 800459c:	d009      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x11e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_TIM_PWM_Start+0x16c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x11e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_TIM_PWM_Start+0x160>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d111      	bne.n	80045d6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2207      	movs	r2, #7
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d010      	beq.n	80045e6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2101      	movs	r1, #1
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d4:	e007      	b.n	80045e6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b004      	add	sp, #16
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800
 8004600:	40000400 	.word	0x40000400

08004604 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	2200      	movs	r2, #0
 8004616:	0018      	movs	r0, r3
 8004618:	f000 fe56 	bl	80052c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2f      	ldr	r2, [pc, #188]	; (80046e0 <HAL_TIM_PWM_Stop+0xdc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_TIM_PWM_Stop+0x40>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <HAL_TIM_PWM_Stop+0xe0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_TIM_PWM_Stop+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <HAL_TIM_PWM_Stop+0xe4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_TIM_PWM_Stop+0x40>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <HAL_TIM_PWM_Stop+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_TIM_PWM_Stop+0x44>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_TIM_PWM_Stop+0x46>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d013      	beq.n	8004676 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4a26      	ldr	r2, [pc, #152]	; (80046f0 <HAL_TIM_PWM_Stop+0xec>)
 8004656:	4013      	ands	r3, r2
 8004658:	d10d      	bne.n	8004676 <HAL_TIM_PWM_Stop+0x72>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <HAL_TIM_PWM_Stop+0xf0>)
 8004662:	4013      	ands	r3, r2
 8004664:	d107      	bne.n	8004676 <HAL_TIM_PWM_Stop+0x72>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4921      	ldr	r1, [pc, #132]	; (80046f8 <HAL_TIM_PWM_Stop+0xf4>)
 8004672:	400a      	ands	r2, r1
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_TIM_PWM_Stop+0xec>)
 800467e:	4013      	ands	r3, r2
 8004680:	d10d      	bne.n	800469e <HAL_TIM_PWM_Stop+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <HAL_TIM_PWM_Stop+0xf0>)
 800468a:	4013      	ands	r3, r2
 800468c:	d107      	bne.n	800469e <HAL_TIM_PWM_Stop+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2101      	movs	r1, #1
 800469a:	438a      	bics	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Stop+0xaa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	223e      	movs	r2, #62	; 0x3e
 80046a8:	2101      	movs	r1, #1
 80046aa:	5499      	strb	r1, [r3, r2]
 80046ac:	e013      	b.n	80046d6 <HAL_TIM_PWM_Stop+0xd2>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Stop+0xba>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223f      	movs	r2, #63	; 0x3f
 80046b8:	2101      	movs	r1, #1
 80046ba:	5499      	strb	r1, [r3, r2]
 80046bc:	e00b      	b.n	80046d6 <HAL_TIM_PWM_Stop+0xd2>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Stop+0xca>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2240      	movs	r2, #64	; 0x40
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]
 80046cc:	e003      	b.n	80046d6 <HAL_TIM_PWM_Stop+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2241      	movs	r2, #65	; 0x41
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800
 80046f0:	00001111 	.word	0x00001111
 80046f4:	00000444 	.word	0x00000444
 80046f8:	ffff7fff 	.word	0xffff7fff

080046fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2202      	movs	r2, #2
 800470c:	4013      	ands	r3, r2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d124      	bne.n	800475c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2202      	movs	r2, #2
 800471a:	4013      	ands	r3, r2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11d      	bne.n	800475c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2203      	movs	r2, #3
 8004726:	4252      	negs	r2, r2
 8004728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2203      	movs	r2, #3
 8004738:	4013      	ands	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fa94 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004744:	e007      	b.n	8004756 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0018      	movs	r0, r3
 800474a:	f000 fa87 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fa93 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2204      	movs	r2, #4
 8004764:	4013      	ands	r3, r2
 8004766:	2b04      	cmp	r3, #4
 8004768:	d125      	bne.n	80047b6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2204      	movs	r2, #4
 8004772:	4013      	ands	r3, r2
 8004774:	2b04      	cmp	r3, #4
 8004776:	d11e      	bne.n	80047b6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2205      	movs	r2, #5
 800477e:	4252      	negs	r2, r2
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	23c0      	movs	r3, #192	; 0xc0
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4013      	ands	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f000 fa67 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 800479e:	e007      	b.n	80047b0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 fa5a 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fa66 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2208      	movs	r2, #8
 80047be:	4013      	ands	r3, r2
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d124      	bne.n	800480e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2208      	movs	r2, #8
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11d      	bne.n	800480e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2209      	movs	r2, #9
 80047d8:	4252      	negs	r2, r2
 80047da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	2203      	movs	r2, #3
 80047ea:	4013      	ands	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 fa3b 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 80047f6:	e007      	b.n	8004808 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fa2e 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	0018      	movs	r0, r3
 8004804:	f000 fa3a 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2210      	movs	r2, #16
 8004816:	4013      	ands	r3, r2
 8004818:	2b10      	cmp	r3, #16
 800481a:	d125      	bne.n	8004868 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2210      	movs	r2, #16
 8004824:	4013      	ands	r3, r2
 8004826:	2b10      	cmp	r3, #16
 8004828:	d11e      	bne.n	8004868 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2211      	movs	r2, #17
 8004830:	4252      	negs	r2, r2
 8004832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2208      	movs	r2, #8
 8004838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	23c0      	movs	r3, #192	; 0xc0
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	0018      	movs	r0, r3
 800484c:	f000 fa0e 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004850:	e007      	b.n	8004862 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f000 fa01 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f000 fa0d 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2201      	movs	r2, #1
 8004870:	4013      	ands	r3, r2
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10f      	bne.n	8004896 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	4013      	ands	r3, r2
 8004880:	2b01      	cmp	r3, #1
 8004882:	d108      	bne.n	8004896 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2202      	movs	r2, #2
 800488a:	4252      	negs	r2, r2
 800488c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fd fbaf 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2280      	movs	r2, #128	; 0x80
 800489e:	4013      	ands	r3, r2
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d10f      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b80      	cmp	r3, #128	; 0x80
 80048b0:	d108      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2281      	movs	r2, #129	; 0x81
 80048b8:	4252      	negs	r2, r2
 80048ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 fdea 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d10f      	bne.n	80048f2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2240      	movs	r2, #64	; 0x40
 80048da:	4013      	ands	r3, r2
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d108      	bne.n	80048f2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2241      	movs	r2, #65	; 0x41
 80048e6:	4252      	negs	r2, r2
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 f9cd 	bl	8004c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2220      	movs	r2, #32
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d10f      	bne.n	8004920 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	4013      	ands	r3, r2
 800490a:	2b20      	cmp	r3, #32
 800490c:	d108      	bne.n	8004920 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2221      	movs	r2, #33	; 0x21
 8004914:	4252      	negs	r2, r2
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f000 fdb4 	bl	8005488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2317      	movs	r3, #23
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	223c      	movs	r2, #60	; 0x3c
 8004940:	5c9b      	ldrb	r3, [r3, r2]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004946:	2302      	movs	r3, #2
 8004948:	e0ad      	b.n	8004aa6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	223c      	movs	r2, #60	; 0x3c
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d100      	bne.n	800495a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004958:	e076      	b.n	8004a48 <HAL_TIM_PWM_ConfigChannel+0x120>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d900      	bls.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004960:	e095      	b.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d04e      	beq.n	8004a06 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b08      	cmp	r3, #8
 800496c:	d900      	bls.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x48>
 800496e:	e08e      	b.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d021      	beq.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800497c:	e087      	b.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fa08 	bl	8004d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2108      	movs	r1, #8
 8004998:	430a      	orrs	r2, r1
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2104      	movs	r1, #4
 80049a8:	438a      	bics	r2, r1
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
      break;
 80049be:	e06b      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	0011      	movs	r1, r2
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 fa6f 	bl	8004eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	0109      	lsls	r1, r1, #4
 80049dc:	430a      	orrs	r2, r1
 80049de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4931      	ldr	r1, [pc, #196]	; (8004ab0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80049ec:	400a      	ands	r2, r1
 80049ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6999      	ldr	r1, [r3, #24]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	021a      	lsls	r2, r3, #8
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	619a      	str	r2, [r3, #24]
      break;
 8004a04:	e048      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fad0 	bl	8004fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2108      	movs	r1, #8
 8004a20:	430a      	orrs	r2, r1
 8004a22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2104      	movs	r1, #4
 8004a30:	438a      	bics	r2, r1
 8004a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69d9      	ldr	r1, [r3, #28]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	61da      	str	r2, [r3, #28]
      break;
 8004a46:	e027      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	0011      	movs	r1, r2
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 fb35 	bl	80050c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2180      	movs	r1, #128	; 0x80
 8004a62:	0109      	lsls	r1, r1, #4
 8004a64:	430a      	orrs	r2, r1
 8004a66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	490f      	ldr	r1, [pc, #60]	; (8004ab0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69d9      	ldr	r1, [r3, #28]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	61da      	str	r2, [r3, #28]
      break;
 8004a8c:	e004      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004a8e:	2317      	movs	r3, #23
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
      break;
 8004a96:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	223c      	movs	r2, #60	; 0x3c
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]

  return status;
 8004aa0:	2317      	movs	r3, #23
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b006      	add	sp, #24
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	fffffbff 	.word	0xfffffbff

08004ab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	230f      	movs	r3, #15
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	223c      	movs	r2, #60	; 0x3c
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_ConfigClockSource+0x20>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0bc      	b.n	8004c4e <HAL_TIM_ConfigClockSource+0x19a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223c      	movs	r2, #60	; 0x3c
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223d      	movs	r2, #61	; 0x3d
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2277      	movs	r2, #119	; 0x77
 8004af0:	4393      	bics	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a58      	ldr	r2, [pc, #352]	; (8004c58 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2280      	movs	r2, #128	; 0x80
 8004b0a:	0192      	lsls	r2, r2, #6
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d040      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0xde>
 8004b10:	2280      	movs	r2, #128	; 0x80
 8004b12:	0192      	lsls	r2, r2, #6
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d900      	bls.n	8004b1a <HAL_TIM_ConfigClockSource+0x66>
 8004b18:	e088      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	0152      	lsls	r2, r2, #5
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d100      	bne.n	8004b24 <HAL_TIM_ConfigClockSource+0x70>
 8004b22:	e088      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x182>
 8004b24:	2280      	movs	r2, #128	; 0x80
 8004b26:	0152      	lsls	r2, r2, #5
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d900      	bls.n	8004b2e <HAL_TIM_ConfigClockSource+0x7a>
 8004b2c:	e07e      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b2e:	2b70      	cmp	r3, #112	; 0x70
 8004b30:	d018      	beq.n	8004b64 <HAL_TIM_ConfigClockSource+0xb0>
 8004b32:	d900      	bls.n	8004b36 <HAL_TIM_ConfigClockSource+0x82>
 8004b34:	e07a      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b36:	2b60      	cmp	r3, #96	; 0x60
 8004b38:	d04f      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x126>
 8004b3a:	d900      	bls.n	8004b3e <HAL_TIM_ConfigClockSource+0x8a>
 8004b3c:	e076      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b3e:	2b50      	cmp	r3, #80	; 0x50
 8004b40:	d03b      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x106>
 8004b42:	d900      	bls.n	8004b46 <HAL_TIM_ConfigClockSource+0x92>
 8004b44:	e072      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d057      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x146>
 8004b4a:	d900      	bls.n	8004b4e <HAL_TIM_ConfigClockSource+0x9a>
 8004b4c:	e06e      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b4e:	2b30      	cmp	r3, #48	; 0x30
 8004b50:	d063      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x166>
 8004b52:	d86b      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d060      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x166>
 8004b58:	d868      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d05d      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x166>
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d05b      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x166>
 8004b62:	e063      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b74:	f000 fb88 	bl	8005288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2277      	movs	r2, #119	; 0x77
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]
      break;
 8004b90:	e052      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ba2:	f000 fb71 	bl	8005288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	01c9      	lsls	r1, r1, #7
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
      break;
 8004bb8:	e03e      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	f000 fae4 	bl	8005194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2150      	movs	r1, #80	; 0x50
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 fb3e 	bl	8005254 <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e02e      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be6:	001a      	movs	r2, r3
 8004be8:	f000 fb02 	bl	80051f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2160      	movs	r1, #96	; 0x60
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 fb2e 	bl	8005254 <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e01e      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	001a      	movs	r2, r3
 8004c08:	f000 fac4 	bl	8005194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2140      	movs	r1, #64	; 0x40
 8004c12:	0018      	movs	r0, r3
 8004c14:	f000 fb1e 	bl	8005254 <TIM_ITRx_SetConfig>
      break;
 8004c18:	e00e      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	0019      	movs	r1, r3
 8004c24:	0010      	movs	r0, r2
 8004c26:	f000 fb15 	bl	8005254 <TIM_ITRx_SetConfig>
      break;
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c2c:	230f      	movs	r3, #15
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004c36:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	223d      	movs	r2, #61	; 0x3d
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	223c      	movs	r2, #60	; 0x3c
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

  return status;
 8004c48:	230f      	movs	r3, #15
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b004      	add	sp, #16
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	ffff00ff 	.word	0xffff00ff

08004c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d008      	beq.n	8004cc6 <TIM_Base_SetConfig+0x2a>
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x2a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <TIM_Base_SetConfig+0xe8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2270      	movs	r2, #112	; 0x70
 8004cca:	4393      	bics	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	05db      	lsls	r3, r3, #23
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <TIM_Base_SetConfig+0xe8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <TIM_Base_SetConfig+0xec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <TIM_Base_SetConfig+0xf0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <TIM_Base_SetConfig+0xf4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <TIM_Base_SetConfig+0xf8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_Base_SetConfig+0xfc>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	4393      	bics	r3, r2
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0xce>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <TIM_Base_SetConfig+0xf0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0xce>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <TIM_Base_SetConfig+0xf4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0xce>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <TIM_Base_SetConfig+0xf8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d103      	bne.n	8004d72 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	615a      	str	r2, [r3, #20]
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40002000 	.word	0x40002000
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800
 8004d98:	fffffcff 	.word	0xfffffcff

08004d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	2201      	movs	r2, #1
 8004dac:	4393      	bics	r3, r2
 8004dae:	001a      	movs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2270      	movs	r2, #112	; 0x70
 8004dca:	4393      	bics	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	4393      	bics	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2202      	movs	r2, #2
 8004de4:	4393      	bics	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <TIM_OC1_SetConfig+0xf8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_OC1_SetConfig+0x76>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <TIM_OC1_SetConfig+0xfc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_OC1_SetConfig+0x76>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <TIM_OC1_SetConfig+0x100>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC1_SetConfig+0x76>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a24      	ldr	r2, [pc, #144]	; (8004ea0 <TIM_OC1_SetConfig+0x104>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10c      	bne.n	8004e2c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2208      	movs	r2, #8
 8004e16:	4393      	bics	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2204      	movs	r2, #4
 8004e28:	4393      	bics	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <TIM_OC1_SetConfig+0xf8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <TIM_OC1_SetConfig+0xb0>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <TIM_OC1_SetConfig+0xfc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_OC1_SetConfig+0xb0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <TIM_OC1_SetConfig+0x100>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_OC1_SetConfig+0xb0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <TIM_OC1_SetConfig+0x104>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d111      	bne.n	8004e70 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <TIM_OC1_SetConfig+0x108>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <TIM_OC1_SetConfig+0x10c>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b006      	add	sp, #24
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800
 8004ea4:	fffffeff 	.word	0xfffffeff
 8004ea8:	fffffdff 	.word	0xfffffdff

08004eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	4393      	bics	r3, r2
 8004ebe:	001a      	movs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a2e      	ldr	r2, [pc, #184]	; (8004f94 <TIM_OC2_SetConfig+0xe8>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a2d      	ldr	r2, [pc, #180]	; (8004f98 <TIM_OC2_SetConfig+0xec>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <TIM_OC2_SetConfig+0xf0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10d      	bne.n	8004f2a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	4393      	bics	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2240      	movs	r2, #64	; 0x40
 8004f26:	4393      	bics	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <TIM_OC2_SetConfig+0xf0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <TIM_OC2_SetConfig+0x9e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <TIM_OC2_SetConfig+0xf4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_OC2_SetConfig+0x9e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <TIM_OC2_SetConfig+0xf8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC2_SetConfig+0x9e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <TIM_OC2_SetConfig+0xfc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d113      	bne.n	8004f72 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4a17      	ldr	r2, [pc, #92]	; (8004fac <TIM_OC2_SetConfig+0x100>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <TIM_OC2_SetConfig+0x104>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b006      	add	sp, #24
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffff8fff 	.word	0xffff8fff
 8004f98:	fffffcff 	.word	0xfffffcff
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	fffffbff 	.word	0xfffffbff
 8004fb0:	fffff7ff 	.word	0xfffff7ff

08004fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a35      	ldr	r2, [pc, #212]	; (8005098 <TIM_OC3_SetConfig+0xe4>)
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2270      	movs	r2, #112	; 0x70
 8004fe0:	4393      	bics	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	4393      	bics	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <TIM_OC3_SetConfig+0xe8>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_OC3_SetConfig+0xec>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_OC3_SetConfig+0xf0>)
 8005016:	4013      	ands	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <TIM_OC3_SetConfig+0xf4>)
 800502a:	4013      	ands	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <TIM_OC3_SetConfig+0xec>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_OC3_SetConfig+0x9a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <TIM_OC3_SetConfig+0xf8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <TIM_OC3_SetConfig+0x9a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <TIM_OC3_SetConfig+0xfc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_OC3_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <TIM_OC3_SetConfig+0x100>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d113      	bne.n	8005076 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <TIM_OC3_SetConfig+0x104>)
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <TIM_OC3_SetConfig+0x108>)
 800505a:	4013      	ands	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b006      	add	sp, #24
 8005096:	bd80      	pop	{r7, pc}
 8005098:	fffffeff 	.word	0xfffffeff
 800509c:	fffffdff 	.word	0xfffffdff
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	fffff7ff 	.word	0xfffff7ff
 80050a8:	fffffbff 	.word	0xfffffbff
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800
 80050b8:	ffffefff 	.word	0xffffefff
 80050bc:	ffffdfff 	.word	0xffffdfff

080050c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	4a28      	ldr	r2, [pc, #160]	; (8005170 <TIM_OC4_SetConfig+0xb0>)
 80050d0:	401a      	ands	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a22      	ldr	r2, [pc, #136]	; (8005174 <TIM_OC4_SetConfig+0xb4>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <TIM_OC4_SetConfig+0xb8>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_OC4_SetConfig+0xbc>)
 8005108:	4013      	ands	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a19      	ldr	r2, [pc, #100]	; (8005180 <TIM_OC4_SetConfig+0xc0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_OC4_SetConfig+0x78>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a18      	ldr	r2, [pc, #96]	; (8005184 <TIM_OC4_SetConfig+0xc4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC4_SetConfig+0x78>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <TIM_OC4_SetConfig+0xc8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC4_SetConfig+0x78>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a16      	ldr	r2, [pc, #88]	; (800518c <TIM_OC4_SetConfig+0xcc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d109      	bne.n	800514c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4a15      	ldr	r2, [pc, #84]	; (8005190 <TIM_OC4_SetConfig+0xd0>)
 800513c:	4013      	ands	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	019b      	lsls	r3, r3, #6
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b006      	add	sp, #24
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	ffffefff 	.word	0xffffefff
 8005174:	ffff8fff 	.word	0xffff8fff
 8005178:	fffffcff 	.word	0xfffffcff
 800517c:	ffffdfff 	.word	0xffffdfff
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40014000 	.word	0x40014000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800
 8005190:	ffffbfff 	.word	0xffffbfff

08005194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4393      	bics	r3, r2
 80051ae:	001a      	movs	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	22f0      	movs	r2, #240	; 0xf0
 80051be:	4393      	bics	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	220a      	movs	r2, #10
 80051d0:	4393      	bics	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b006      	add	sp, #24
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	2210      	movs	r2, #16
 8005202:	4393      	bics	r3, r2
 8005204:	001a      	movs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <TIM_TI2_ConfigInputStage+0x60>)
 800521a:	4013      	ands	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	031b      	lsls	r3, r3, #12
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	22a0      	movs	r2, #160	; 0xa0
 800522c:	4393      	bics	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b006      	add	sp, #24
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	ffff0fff 	.word	0xffff0fff

08005254 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2270      	movs	r2, #112	; 0x70
 8005268:	4393      	bics	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	2207      	movs	r2, #7
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	609a      	str	r2, [r3, #8]
}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b004      	add	sp, #16
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <TIM_ETR_SetConfig+0x3c>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b006      	add	sp, #24
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	ffff00ff 	.word	0xffff00ff

080052c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	221f      	movs	r2, #31
 80052d8:	4013      	ands	r3, r2
 80052da:	2201      	movs	r2, #1
 80052dc:	409a      	lsls	r2, r3
 80052de:	0013      	movs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	43d2      	mvns	r2, r2
 80052ea:	401a      	ands	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	211f      	movs	r1, #31
 80052f8:	400b      	ands	r3, r1
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4099      	lsls	r1, r3
 80052fe:	000b      	movs	r3, r1
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b006      	add	sp, #24
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223c      	movs	r2, #60	; 0x3c
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e047      	b.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	223c      	movs	r2, #60	; 0x3c
 800532c:	2101      	movs	r1, #1
 800532e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223d      	movs	r2, #61	; 0x3d
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2270      	movs	r2, #112	; 0x70
 800534c:	4393      	bics	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00f      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	05db      	lsls	r3, r3, #23
 8005374:	429a      	cmp	r2, r3
 8005376:	d009      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a11      	ldr	r2, [pc, #68]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10c      	bne.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	4393      	bics	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	4313      	orrs	r3, r2
 800539c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	223d      	movs	r2, #61	; 0x3d
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	223c      	movs	r2, #60	; 0x3c
 80053b2:	2100      	movs	r1, #0
 80053b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b004      	add	sp, #16
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40014000 	.word	0x40014000

080053cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	223c      	movs	r2, #60	; 0x3c
 80053de:	5c9b      	ldrb	r3, [r3, r2]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e03e      	b.n	8005466 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	223c      	movs	r2, #60	; 0x3c
 80053ec:	2101      	movs	r1, #1
 80053ee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	22ff      	movs	r2, #255	; 0xff
 80053f4:	4393      	bics	r3, r2
 80053f6:	001a      	movs	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005404:	401a      	ands	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005412:	401a      	ands	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a16      	ldr	r2, [pc, #88]	; (8005478 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005420:	401a      	ands	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800542e:	401a      	ands	r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800543c:	401a      	ands	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800544a:	401a      	ands	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	223c      	movs	r2, #60	; 0x3c
 8005460:	2100      	movs	r1, #0
 8005462:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	fffffcff 	.word	0xfffffcff
 8005474:	fffffbff 	.word	0xfffffbff
 8005478:	fffff7ff 	.word	0xfffff7ff
 800547c:	ffffefff 	.word	0xffffefff
 8005480:	ffffdfff 	.word	0xffffdfff
 8005484:	ffffbfff 	.word	0xffffbfff

08005488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005490:	46c0      	nop			; (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	b002      	add	sp, #8
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e044      	b.n	8005544 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2278      	movs	r2, #120	; 0x78
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7fc ff89 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	; 0x24
 80054d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2101      	movs	r1, #1
 80054e4:	438a      	bics	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fc2c 	bl	8005d48 <UART_SetConfig>
 80054f0:	0003      	movs	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e024      	b.n	8005544 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0018      	movs	r0, r3
 8005506:	f000 fe07 	bl	8006118 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	490d      	ldr	r1, [pc, #52]	; (800554c <HAL_UART_Init+0xa4>)
 8005516:	400a      	ands	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	212a      	movs	r1, #42	; 0x2a
 8005526:	438a      	bics	r2, r1
 8005528:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2101      	movs	r1, #1
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 fe9f 	bl	8006280 <UART_CheckIdleState>
 8005542:	0003      	movs	r3, r0
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}
 800554c:	ffffb7ff 	.word	0xffffb7ff

08005550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	1dbb      	adds	r3, r7, #6
 800555e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005564:	2b20      	cmp	r3, #32
 8005566:	d000      	beq.n	800556a <HAL_UART_Transmit+0x1a>
 8005568:	e08d      	b.n	8005686 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_UART_Transmit+0x28>
 8005570:	1dbb      	adds	r3, r7, #6
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e085      	b.n	8005688 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	015b      	lsls	r3, r3, #5
 8005584:	429a      	cmp	r2, r3
 8005586:	d109      	bne.n	800559c <HAL_UART_Transmit+0x4c>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2201      	movs	r2, #1
 8005594:	4013      	ands	r3, r2
 8005596:	d001      	beq.n	800559c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e075      	b.n	8005688 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2284      	movs	r2, #132	; 0x84
 80055a0:	2100      	movs	r1, #0
 80055a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2221      	movs	r2, #33	; 0x21
 80055a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055aa:	f7fd f891 	bl	80026d0 <HAL_GetTick>
 80055ae:	0003      	movs	r3, r0
 80055b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1dba      	adds	r2, r7, #6
 80055b6:	2150      	movs	r1, #80	; 0x50
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1dba      	adds	r2, r7, #6
 80055c0:	2152      	movs	r1, #82	; 0x52
 80055c2:	8812      	ldrh	r2, [r2, #0]
 80055c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	015b      	lsls	r3, r3, #5
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d108      	bne.n	80055e4 <HAL_UART_Transmit+0x94>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e003      	b.n	80055ec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055ec:	e030      	b.n	8005650 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	0013      	movs	r3, r2
 80055f8:	2200      	movs	r2, #0
 80055fa:	2180      	movs	r1, #128	; 0x80
 80055fc:	f000 fee8 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d004      	beq.n	800560e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e03c      	b.n	8005688 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	05d2      	lsls	r2, r2, #23
 800561e:	0dd2      	lsrs	r2, r2, #23
 8005620:	b292      	uxth	r2, r2
 8005622:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	3302      	adds	r3, #2
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	e008      	b.n	800563e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b292      	uxth	r2, r2
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	3301      	adds	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2252      	movs	r2, #82	; 0x52
 8005642:	5a9b      	ldrh	r3, [r3, r2]
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b299      	uxth	r1, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2252      	movs	r2, #82	; 0x52
 800564e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2252      	movs	r2, #82	; 0x52
 8005654:	5a9b      	ldrh	r3, [r3, r2]
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1c8      	bne.n	80055ee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	0013      	movs	r3, r2
 8005666:	2200      	movs	r2, #0
 8005668:	2140      	movs	r1, #64	; 0x40
 800566a:	f000 feb1 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d004      	beq.n	800567c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e005      	b.n	8005688 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e000      	b.n	8005688 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
  }
}
 8005688:	0018      	movs	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	b008      	add	sp, #32
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	1dbb      	adds	r3, r7, #6
 800569c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	589b      	ldr	r3, [r3, r2]
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d145      	bne.n	8005734 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_UART_Receive_DMA+0x26>
 80056ae:	1dbb      	adds	r3, r7, #6
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e03d      	b.n	8005736 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	015b      	lsls	r3, r3, #5
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d109      	bne.n	80056da <HAL_UART_Receive_DMA+0x4a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d105      	bne.n	80056da <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2201      	movs	r2, #1
 80056d2:	4013      	ands	r3, r2
 80056d4:	d001      	beq.n	80056da <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e02d      	b.n	8005736 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	4013      	ands	r3, r2
 80056ec:	d019      	beq.n	8005722 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8310 	mrs	r3, PRIMASK
 80056f2:	613b      	str	r3, [r7, #16]
  return(result);
 80056f4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f383 8810 	msr	PRIMASK, r3
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2180      	movs	r1, #128	; 0x80
 8005710:	04c9      	lsls	r1, r1, #19
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	f383 8810 	msr	PRIMASK, r3
}
 8005720:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005722:	1dbb      	adds	r3, r7, #6
 8005724:	881a      	ldrh	r2, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 feba 	bl	80064a4 <UART_Start_Receive_DMA>
 8005730:	0003      	movs	r3, r0
 8005732:	e000      	b.n	8005736 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b008      	add	sp, #32
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b0ab      	sub	sp, #172	; 0xac
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	22a4      	movs	r2, #164	; 0xa4
 8005750:	18b9      	adds	r1, r7, r2
 8005752:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	20a0      	movs	r0, #160	; 0xa0
 800575c:	1839      	adds	r1, r7, r0
 800575e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	219c      	movs	r1, #156	; 0x9c
 8005768:	1879      	adds	r1, r7, r1
 800576a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800576c:	0011      	movs	r1, r2
 800576e:	18bb      	adds	r3, r7, r2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a99      	ldr	r2, [pc, #612]	; (80059d8 <HAL_UART_IRQHandler+0x298>)
 8005774:	4013      	ands	r3, r2
 8005776:	2298      	movs	r2, #152	; 0x98
 8005778:	18bc      	adds	r4, r7, r2
 800577a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800577c:	18bb      	adds	r3, r7, r2
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d114      	bne.n	80057ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005784:	187b      	adds	r3, r7, r1
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2220      	movs	r2, #32
 800578a:	4013      	ands	r3, r2
 800578c:	d00f      	beq.n	80057ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800578e:	183b      	adds	r3, r7, r0
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	4013      	ands	r3, r2
 8005796:	d00a      	beq.n	80057ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <HAL_UART_IRQHandler+0x62>
 80057a0:	e29e      	b.n	8005ce0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	0010      	movs	r0, r2
 80057aa:	4798      	blx	r3
      }
      return;
 80057ac:	e298      	b.n	8005ce0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057ae:	2398      	movs	r3, #152	; 0x98
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d100      	bne.n	80057ba <HAL_UART_IRQHandler+0x7a>
 80057b8:	e114      	b.n	80059e4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057ba:	239c      	movs	r3, #156	; 0x9c
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d106      	bne.n	80057d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057c6:	23a0      	movs	r3, #160	; 0xa0
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a83      	ldr	r2, [pc, #524]	; (80059dc <HAL_UART_IRQHandler+0x29c>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	d100      	bne.n	80057d4 <HAL_UART_IRQHandler+0x94>
 80057d2:	e107      	b.n	80059e4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057d4:	23a4      	movs	r3, #164	; 0xa4
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	d012      	beq.n	8005806 <HAL_UART_IRQHandler+0xc6>
 80057e0:	23a0      	movs	r3, #160	; 0xa0
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00b      	beq.n	8005806 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2284      	movs	r2, #132	; 0x84
 80057fa:	589b      	ldr	r3, [r3, r2]
 80057fc:	2201      	movs	r2, #1
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2184      	movs	r1, #132	; 0x84
 8005804:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005806:	23a4      	movs	r3, #164	; 0xa4
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2202      	movs	r2, #2
 800580e:	4013      	ands	r3, r2
 8005810:	d011      	beq.n	8005836 <HAL_UART_IRQHandler+0xf6>
 8005812:	239c      	movs	r3, #156	; 0x9c
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2201      	movs	r2, #1
 800581a:	4013      	ands	r3, r2
 800581c:	d00b      	beq.n	8005836 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2202      	movs	r2, #2
 8005824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2284      	movs	r2, #132	; 0x84
 800582a:	589b      	ldr	r3, [r3, r2]
 800582c:	2204      	movs	r2, #4
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2184      	movs	r1, #132	; 0x84
 8005834:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005836:	23a4      	movs	r3, #164	; 0xa4
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2204      	movs	r2, #4
 800583e:	4013      	ands	r3, r2
 8005840:	d011      	beq.n	8005866 <HAL_UART_IRQHandler+0x126>
 8005842:	239c      	movs	r3, #156	; 0x9c
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d00b      	beq.n	8005866 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2204      	movs	r2, #4
 8005854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2284      	movs	r2, #132	; 0x84
 800585a:	589b      	ldr	r3, [r3, r2]
 800585c:	2202      	movs	r2, #2
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2184      	movs	r1, #132	; 0x84
 8005864:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005866:	23a4      	movs	r3, #164	; 0xa4
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2208      	movs	r2, #8
 800586e:	4013      	ands	r3, r2
 8005870:	d017      	beq.n	80058a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005872:	23a0      	movs	r3, #160	; 0xa0
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2220      	movs	r2, #32
 800587a:	4013      	ands	r3, r2
 800587c:	d105      	bne.n	800588a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800587e:	239c      	movs	r3, #156	; 0x9c
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005888:	d00b      	beq.n	80058a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2208      	movs	r2, #8
 8005890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2284      	movs	r2, #132	; 0x84
 8005896:	589b      	ldr	r3, [r3, r2]
 8005898:	2208      	movs	r2, #8
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2184      	movs	r1, #132	; 0x84
 80058a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058a2:	23a4      	movs	r3, #164	; 0xa4
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4013      	ands	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_UART_IRQHandler+0x198>
 80058b0:	23a0      	movs	r3, #160	; 0xa0
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	04db      	lsls	r3, r3, #19
 80058ba:	4013      	ands	r3, r2
 80058bc:	d00c      	beq.n	80058d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	0112      	lsls	r2, r2, #4
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2284      	movs	r2, #132	; 0x84
 80058cc:	589b      	ldr	r3, [r3, r2]
 80058ce:	2220      	movs	r2, #32
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2184      	movs	r1, #132	; 0x84
 80058d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2284      	movs	r2, #132	; 0x84
 80058dc:	589b      	ldr	r3, [r3, r2]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d100      	bne.n	80058e4 <HAL_UART_IRQHandler+0x1a4>
 80058e2:	e1ff      	b.n	8005ce4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058e4:	23a4      	movs	r3, #164	; 0xa4
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2220      	movs	r2, #32
 80058ec:	4013      	ands	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058f0:	23a0      	movs	r3, #160	; 0xa0
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2220      	movs	r2, #32
 80058f8:	4013      	ands	r3, r2
 80058fa:	d008      	beq.n	800590e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	0010      	movs	r0, r2
 800590c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2284      	movs	r2, #132	; 0x84
 8005912:	589b      	ldr	r3, [r3, r2]
 8005914:	2194      	movs	r1, #148	; 0x94
 8005916:	187a      	adds	r2, r7, r1
 8005918:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2240      	movs	r2, #64	; 0x40
 8005922:	4013      	ands	r3, r2
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d004      	beq.n	8005932 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005928:	187b      	adds	r3, r7, r1
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2228      	movs	r2, #40	; 0x28
 800592e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005930:	d047      	beq.n	80059c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fe79 	bl	800662c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2240      	movs	r2, #64	; 0x40
 8005942:	4013      	ands	r3, r2
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d137      	bne.n	80059b8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800594e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005950:	2090      	movs	r0, #144	; 0x90
 8005952:	183a      	adds	r2, r7, r0
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	2301      	movs	r3, #1
 8005958:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	438a      	bics	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	183b      	adds	r3, r7, r0
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800597a:	f383 8810 	msr	PRIMASK, r3
}
 800597e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <HAL_UART_IRQHandler+0x2a0>)
 800598e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005994:	0018      	movs	r0, r3
 8005996:	f7fd f88d 	bl	8002ab4 <HAL_DMA_Abort_IT>
 800599a:	1e03      	subs	r3, r0, #0
 800599c:	d01a      	beq.n	80059d4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	0018      	movs	r0, r3
 80059aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	e012      	b.n	80059d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f000 f9b5 	bl	8005d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b6:	e00d      	b.n	80059d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 f9b0 	bl	8005d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e008      	b.n	80059d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 f9ab 	bl	8005d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2284      	movs	r2, #132	; 0x84
 80059ce:	2100      	movs	r1, #0
 80059d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80059d2:	e187      	b.n	8005ce4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	46c0      	nop			; (mov r8, r8)
    return;
 80059d6:	e185      	b.n	8005ce4 <HAL_UART_IRQHandler+0x5a4>
 80059d8:	0000080f 	.word	0x0000080f
 80059dc:	04000120 	.word	0x04000120
 80059e0:	080068e7 	.word	0x080068e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d000      	beq.n	80059ee <HAL_UART_IRQHandler+0x2ae>
 80059ec:	e139      	b.n	8005c62 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059ee:	23a4      	movs	r3, #164	; 0xa4
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2210      	movs	r2, #16
 80059f6:	4013      	ands	r3, r2
 80059f8:	d100      	bne.n	80059fc <HAL_UART_IRQHandler+0x2bc>
 80059fa:	e132      	b.n	8005c62 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059fc:	23a0      	movs	r3, #160	; 0xa0
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2210      	movs	r2, #16
 8005a04:	4013      	ands	r3, r2
 8005a06:	d100      	bne.n	8005a0a <HAL_UART_IRQHandler+0x2ca>
 8005a08:	e12b      	b.n	8005c62 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2240      	movs	r2, #64	; 0x40
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d000      	beq.n	8005a22 <HAL_UART_IRQHandler+0x2e2>
 8005a20:	e09f      	b.n	8005b62 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	217e      	movs	r1, #126	; 0x7e
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005a30:	187b      	adds	r3, r7, r1
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d100      	bne.n	8005a3a <HAL_UART_IRQHandler+0x2fa>
 8005a38:	e156      	b.n	8005ce8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2258      	movs	r2, #88	; 0x58
 8005a3e:	5a9b      	ldrh	r3, [r3, r2]
 8005a40:	187a      	adds	r2, r7, r1
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d300      	bcc.n	8005a4a <HAL_UART_IRQHandler+0x30a>
 8005a48:	e14e      	b.n	8005ce8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	187a      	adds	r2, r7, r1
 8005a4e:	215a      	movs	r1, #90	; 0x5a
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d06f      	beq.n	8005b3e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a68:	2301      	movs	r3, #1
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	f383 8810 	msr	PRIMASK, r3
}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	499e      	ldr	r1, [pc, #632]	; (8005cf8 <HAL_UART_IRQHandler+0x5b8>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a90:	f3ef 8310 	mrs	r3, PRIMASK
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a98:	677b      	str	r3, [r7, #116]	; 0x74
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	f383 8810 	msr	PRIMASK, r3
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	438a      	bics	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]
 8005ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	673b      	str	r3, [r7, #112]	; 0x70
 8005acc:	2301      	movs	r3, #1
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2140      	movs	r1, #64	; 0x40
 8005ae4:	438a      	bics	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aee:	f383 8810 	msr	PRIMASK, r3
}
 8005af2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	2120      	movs	r1, #32
 8005afa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b02:	f3ef 8310 	mrs	r3, PRIMASK
 8005b06:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b12:	f383 8810 	msr	PRIMASK, r3
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2110      	movs	r1, #16
 8005b24:	438a      	bics	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2e:	f383 8810 	msr	PRIMASK, r3
}
 8005b32:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7fc ff83 	bl	8002a44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2258      	movs	r2, #88	; 0x58
 8005b48:	5a9a      	ldrh	r2, [r3, r2]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	215a      	movs	r1, #90	; 0x5a
 8005b4e:	5a5b      	ldrh	r3, [r3, r1]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0011      	movs	r1, r2
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f8e8 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b60:	e0c2      	b.n	8005ce8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2258      	movs	r2, #88	; 0x58
 8005b66:	5a99      	ldrh	r1, [r3, r2]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	225a      	movs	r2, #90	; 0x5a
 8005b6c:	5a9b      	ldrh	r3, [r3, r2]
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	208e      	movs	r0, #142	; 0x8e
 8005b72:	183b      	adds	r3, r7, r0
 8005b74:	1a8a      	subs	r2, r1, r2
 8005b76:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	225a      	movs	r2, #90	; 0x5a
 8005b7c:	5a9b      	ldrh	r3, [r3, r2]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d100      	bne.n	8005b86 <HAL_UART_IRQHandler+0x446>
 8005b84:	e0b2      	b.n	8005cec <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005b86:	183b      	adds	r3, r7, r0
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d100      	bne.n	8005b90 <HAL_UART_IRQHandler+0x450>
 8005b8e:	e0ad      	b.n	8005cec <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b90:	f3ef 8310 	mrs	r3, PRIMASK
 8005b94:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b96:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b98:	2488      	movs	r4, #136	; 0x88
 8005b9a:	193a      	adds	r2, r7, r4
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f383 8810 	msr	PRIMASK, r3
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4951      	ldr	r1, [pc, #324]	; (8005cfc <HAL_UART_IRQHandler+0x5bc>)
 8005bb6:	400a      	ands	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	193b      	adds	r3, r7, r4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f383 8810 	msr	PRIMASK, r3
}
 8005bc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd0:	2484      	movs	r4, #132	; 0x84
 8005bd2:	193a      	adds	r2, r7, r4
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	46c0      	nop			; (mov r8, r8)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2101      	movs	r1, #1
 8005bee:	438a      	bics	r2, r1
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	f383 8810 	msr	PRIMASK, r3
}
 8005bfe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	2120      	movs	r1, #32
 8005c06:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c14:	f3ef 8310 	mrs	r3, PRIMASK
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1c:	2480      	movs	r4, #128	; 0x80
 8005c1e:	193a      	adds	r2, r7, r4
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	2301      	movs	r3, #1
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2110      	movs	r1, #16
 8005c3a:	438a      	bics	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	193b      	adds	r3, r7, r4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	f383 8810 	msr	PRIMASK, r3
}
 8005c4a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c52:	183b      	adds	r3, r7, r0
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0011      	movs	r1, r2
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 f868 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c60:	e044      	b.n	8005cec <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c62:	23a4      	movs	r3, #164	; 0xa4
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	035b      	lsls	r3, r3, #13
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d010      	beq.n	8005c92 <HAL_UART_IRQHandler+0x552>
 8005c70:	239c      	movs	r3, #156	; 0x9c
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	03db      	lsls	r3, r3, #15
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2280      	movs	r2, #128	; 0x80
 8005c84:	0352      	lsls	r2, r2, #13
 8005c86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fe6d 	bl	800696a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c90:	e02f      	b.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c92:	23a4      	movs	r3, #164	; 0xa4
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c9e:	23a0      	movs	r3, #160	; 0xa0
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01e      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	0010      	movs	r0, r2
 8005cba:	4798      	blx	r3
    }
    return;
 8005cbc:	e018      	b.n	8005cf0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cbe:	23a4      	movs	r3, #164	; 0xa4
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2240      	movs	r2, #64	; 0x40
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
 8005cca:	23a0      	movs	r3, #160	; 0xa0
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2240      	movs	r2, #64	; 0x40
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d00d      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f000 fe1b 	bl	8006914 <UART_EndTransmit_IT>
    return;
 8005cde:	e008      	b.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	e006      	b.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	e004      	b.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005ce8:	46c0      	nop			; (mov r8, r8)
 8005cea:	e002      	b.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	e000      	b.n	8005cf2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005cf0:	46c0      	nop			; (mov r8, r8)
  }

}
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b02b      	add	sp, #172	; 0xac
 8005cf6:	bd90      	pop	{r4, r7, pc}
 8005cf8:	fffffeff 	.word	0xfffffeff
 8005cfc:	fffffedf 	.word	0xfffffedf

08005d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b002      	add	sp, #8
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	000a      	movs	r2, r1
 8005d3a:	1cbb      	adds	r3, r7, #2
 8005d3c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b002      	add	sp, #8
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d50:	231e      	movs	r3, #30
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4abe      	ldr	r2, [pc, #760]	; (8006070 <UART_SetConfig+0x328>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4ab9      	ldr	r2, [pc, #740]	; (8006074 <UART_SetConfig+0x32c>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	0019      	movs	r1, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4ab0      	ldr	r2, [pc, #704]	; (8006078 <UART_SetConfig+0x330>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	0019      	movs	r1, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4aac      	ldr	r2, [pc, #688]	; (800607c <UART_SetConfig+0x334>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d127      	bne.n	8005e1e <UART_SetConfig+0xd6>
 8005dce:	4bac      	ldr	r3, [pc, #688]	; (8006080 <UART_SetConfig+0x338>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d00d      	beq.n	8005df6 <UART_SetConfig+0xae>
 8005dda:	d81b      	bhi.n	8005e14 <UART_SetConfig+0xcc>
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d014      	beq.n	8005e0a <UART_SetConfig+0xc2>
 8005de0:	d818      	bhi.n	8005e14 <UART_SetConfig+0xcc>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <UART_SetConfig+0xa4>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d00a      	beq.n	8005e00 <UART_SetConfig+0xb8>
 8005dea:	e013      	b.n	8005e14 <UART_SetConfig+0xcc>
 8005dec:	231f      	movs	r3, #31
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e0bd      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005df6:	231f      	movs	r3, #31
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e0b8      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e00:	231f      	movs	r3, #31
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	2204      	movs	r2, #4
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e0b3      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e0a:	231f      	movs	r3, #31
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e0ae      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e14:	231f      	movs	r3, #31
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	2210      	movs	r2, #16
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e0a9      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a98      	ldr	r2, [pc, #608]	; (8006084 <UART_SetConfig+0x33c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d134      	bne.n	8005e92 <UART_SetConfig+0x14a>
 8005e28:	4b95      	ldr	r3, [pc, #596]	; (8006080 <UART_SetConfig+0x338>)
 8005e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2c:	23c0      	movs	r3, #192	; 0xc0
 8005e2e:	029b      	lsls	r3, r3, #10
 8005e30:	4013      	ands	r3, r2
 8005e32:	22c0      	movs	r2, #192	; 0xc0
 8005e34:	0292      	lsls	r2, r2, #10
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d017      	beq.n	8005e6a <UART_SetConfig+0x122>
 8005e3a:	22c0      	movs	r2, #192	; 0xc0
 8005e3c:	0292      	lsls	r2, r2, #10
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d822      	bhi.n	8005e88 <UART_SetConfig+0x140>
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	0292      	lsls	r2, r2, #10
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d019      	beq.n	8005e7e <UART_SetConfig+0x136>
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	0292      	lsls	r2, r2, #10
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d81a      	bhi.n	8005e88 <UART_SetConfig+0x140>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <UART_SetConfig+0x118>
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	0252      	lsls	r2, r2, #9
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00a      	beq.n	8005e74 <UART_SetConfig+0x12c>
 8005e5e:	e013      	b.n	8005e88 <UART_SetConfig+0x140>
 8005e60:	231f      	movs	r3, #31
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	e083      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e6a:	231f      	movs	r3, #31
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	2202      	movs	r2, #2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e07e      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e74:	231f      	movs	r3, #31
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	2204      	movs	r2, #4
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e079      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e7e:	231f      	movs	r3, #31
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	2208      	movs	r2, #8
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e074      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e88:	231f      	movs	r3, #31
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e06f      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a7c      	ldr	r2, [pc, #496]	; (8006088 <UART_SetConfig+0x340>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d134      	bne.n	8005f06 <UART_SetConfig+0x1be>
 8005e9c:	4b78      	ldr	r3, [pc, #480]	; (8006080 <UART_SetConfig+0x338>)
 8005e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea0:	23c0      	movs	r3, #192	; 0xc0
 8005ea2:	031b      	lsls	r3, r3, #12
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	22c0      	movs	r2, #192	; 0xc0
 8005ea8:	0312      	lsls	r2, r2, #12
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d017      	beq.n	8005ede <UART_SetConfig+0x196>
 8005eae:	22c0      	movs	r2, #192	; 0xc0
 8005eb0:	0312      	lsls	r2, r2, #12
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d822      	bhi.n	8005efc <UART_SetConfig+0x1b4>
 8005eb6:	2280      	movs	r2, #128	; 0x80
 8005eb8:	0312      	lsls	r2, r2, #12
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d019      	beq.n	8005ef2 <UART_SetConfig+0x1aa>
 8005ebe:	2280      	movs	r2, #128	; 0x80
 8005ec0:	0312      	lsls	r2, r2, #12
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d81a      	bhi.n	8005efc <UART_SetConfig+0x1b4>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <UART_SetConfig+0x18c>
 8005eca:	2280      	movs	r2, #128	; 0x80
 8005ecc:	02d2      	lsls	r2, r2, #11
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00a      	beq.n	8005ee8 <UART_SetConfig+0x1a0>
 8005ed2:	e013      	b.n	8005efc <UART_SetConfig+0x1b4>
 8005ed4:	231f      	movs	r3, #31
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e049      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005ede:	231f      	movs	r3, #31
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e044      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005ee8:	231f      	movs	r3, #31
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	2204      	movs	r2, #4
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e03f      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005ef2:	231f      	movs	r3, #31
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e03a      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005efc:	231f      	movs	r3, #31
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	2210      	movs	r2, #16
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e035      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a60      	ldr	r2, [pc, #384]	; (800608c <UART_SetConfig+0x344>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d104      	bne.n	8005f1a <UART_SetConfig+0x1d2>
 8005f10:	231f      	movs	r3, #31
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e02b      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a5c      	ldr	r2, [pc, #368]	; (8006090 <UART_SetConfig+0x348>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d104      	bne.n	8005f2e <UART_SetConfig+0x1e6>
 8005f24:	231f      	movs	r3, #31
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e021      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a58      	ldr	r2, [pc, #352]	; (8006094 <UART_SetConfig+0x34c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d104      	bne.n	8005f42 <UART_SetConfig+0x1fa>
 8005f38:	231f      	movs	r3, #31
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e017      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a54      	ldr	r2, [pc, #336]	; (8006098 <UART_SetConfig+0x350>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d104      	bne.n	8005f56 <UART_SetConfig+0x20e>
 8005f4c:	231f      	movs	r3, #31
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e00d      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a50      	ldr	r2, [pc, #320]	; (800609c <UART_SetConfig+0x354>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d104      	bne.n	8005f6a <UART_SetConfig+0x222>
 8005f60:	231f      	movs	r3, #31
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e003      	b.n	8005f72 <UART_SetConfig+0x22a>
 8005f6a:	231f      	movs	r3, #31
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2210      	movs	r2, #16
 8005f70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d15c      	bne.n	8006038 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8005f7e:	231f      	movs	r3, #31
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d015      	beq.n	8005fb4 <UART_SetConfig+0x26c>
 8005f88:	dc18      	bgt.n	8005fbc <UART_SetConfig+0x274>
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d00d      	beq.n	8005faa <UART_SetConfig+0x262>
 8005f8e:	dc15      	bgt.n	8005fbc <UART_SetConfig+0x274>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <UART_SetConfig+0x252>
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d005      	beq.n	8005fa4 <UART_SetConfig+0x25c>
 8005f98:	e010      	b.n	8005fbc <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f9a:	f7fd fd67 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	61bb      	str	r3, [r7, #24]
        break;
 8005fa2:	e012      	b.n	8005fca <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa4:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <UART_SetConfig+0x358>)
 8005fa6:	61bb      	str	r3, [r7, #24]
        break;
 8005fa8:	e00f      	b.n	8005fca <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005faa:	f7fd fce3 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	61bb      	str	r3, [r7, #24]
        break;
 8005fb2:	e00a      	b.n	8005fca <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	61bb      	str	r3, [r7, #24]
        break;
 8005fba:	e006      	b.n	8005fca <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fc0:	231e      	movs	r3, #30
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
        break;
 8005fc8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d100      	bne.n	8005fd2 <UART_SetConfig+0x28a>
 8005fd0:	e095      	b.n	80060fe <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	005a      	lsls	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	18d2      	adds	r2, r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	0010      	movs	r0, r2
 8005fe6:	f7fa f88d 	bl	8000104 <__udivsi3>
 8005fea:	0003      	movs	r3, r0
 8005fec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b0f      	cmp	r3, #15
 8005ff2:	d91c      	bls.n	800602e <UART_SetConfig+0x2e6>
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	025b      	lsls	r3, r3, #9
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d217      	bcs.n	800602e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	b29a      	uxth	r2, r3
 8006002:	200e      	movs	r0, #14
 8006004:	183b      	adds	r3, r7, r0
 8006006:	210f      	movs	r1, #15
 8006008:	438a      	bics	r2, r1
 800600a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	b29b      	uxth	r3, r3
 8006012:	2207      	movs	r2, #7
 8006014:	4013      	ands	r3, r2
 8006016:	b299      	uxth	r1, r3
 8006018:	183b      	adds	r3, r7, r0
 800601a:	183a      	adds	r2, r7, r0
 800601c:	8812      	ldrh	r2, [r2, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	183a      	adds	r2, r7, r0
 8006028:	8812      	ldrh	r2, [r2, #0]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e067      	b.n	80060fe <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800602e:	231e      	movs	r3, #30
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e062      	b.n	80060fe <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006038:	231f      	movs	r3, #31
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b08      	cmp	r3, #8
 8006040:	d030      	beq.n	80060a4 <UART_SetConfig+0x35c>
 8006042:	dc33      	bgt.n	80060ac <UART_SetConfig+0x364>
 8006044:	2b04      	cmp	r3, #4
 8006046:	d00d      	beq.n	8006064 <UART_SetConfig+0x31c>
 8006048:	dc30      	bgt.n	80060ac <UART_SetConfig+0x364>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <UART_SetConfig+0x30c>
 800604e:	2b02      	cmp	r3, #2
 8006050:	d005      	beq.n	800605e <UART_SetConfig+0x316>
 8006052:	e02b      	b.n	80060ac <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006054:	f7fd fd0a 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8006058:	0003      	movs	r3, r0
 800605a:	61bb      	str	r3, [r7, #24]
        break;
 800605c:	e02d      	b.n	80060ba <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <UART_SetConfig+0x358>)
 8006060:	61bb      	str	r3, [r7, #24]
        break;
 8006062:	e02a      	b.n	80060ba <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006064:	f7fd fc86 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8006068:	0003      	movs	r3, r0
 800606a:	61bb      	str	r3, [r7, #24]
        break;
 800606c:	e025      	b.n	80060ba <UART_SetConfig+0x372>
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	efff69f3 	.word	0xefff69f3
 8006074:	ffffcfff 	.word	0xffffcfff
 8006078:	fffff4ff 	.word	0xfffff4ff
 800607c:	40013800 	.word	0x40013800
 8006080:	40021000 	.word	0x40021000
 8006084:	40004400 	.word	0x40004400
 8006088:	40004800 	.word	0x40004800
 800608c:	40004c00 	.word	0x40004c00
 8006090:	40005000 	.word	0x40005000
 8006094:	40011400 	.word	0x40011400
 8006098:	40011800 	.word	0x40011800
 800609c:	40011c00 	.word	0x40011c00
 80060a0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	61bb      	str	r3, [r7, #24]
        break;
 80060aa:	e006      	b.n	80060ba <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060b0:	231e      	movs	r3, #30
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2201      	movs	r2, #1
 80060b6:	701a      	strb	r2, [r3, #0]
        break;
 80060b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	085a      	lsrs	r2, r3, #1
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	18d2      	adds	r2, r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	0019      	movs	r1, r3
 80060d0:	0010      	movs	r0, r2
 80060d2:	f7fa f817 	bl	8000104 <__udivsi3>
 80060d6:	0003      	movs	r3, r0
 80060d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b0f      	cmp	r3, #15
 80060de:	d90a      	bls.n	80060f6 <UART_SetConfig+0x3ae>
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	025b      	lsls	r3, r3, #9
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d205      	bcs.n	80060f6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e003      	b.n	80060fe <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80060f6:	231e      	movs	r3, #30
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800610a:	231e      	movs	r3, #30
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	781b      	ldrb	r3, [r3, #0]
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b008      	add	sp, #32
 8006116:	bd80      	pop	{r7, pc}

08006118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2201      	movs	r2, #1
 8006126:	4013      	ands	r3, r2
 8006128:	d00b      	beq.n	8006142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a4a      	ldr	r2, [pc, #296]	; (800625c <UART_AdvFeatureConfig+0x144>)
 8006132:	4013      	ands	r3, r2
 8006134:	0019      	movs	r1, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2202      	movs	r2, #2
 8006148:	4013      	ands	r3, r2
 800614a:	d00b      	beq.n	8006164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4a43      	ldr	r2, [pc, #268]	; (8006260 <UART_AdvFeatureConfig+0x148>)
 8006154:	4013      	ands	r3, r2
 8006156:	0019      	movs	r1, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2204      	movs	r2, #4
 800616a:	4013      	ands	r3, r2
 800616c:	d00b      	beq.n	8006186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4a3b      	ldr	r2, [pc, #236]	; (8006264 <UART_AdvFeatureConfig+0x14c>)
 8006176:	4013      	ands	r3, r2
 8006178:	0019      	movs	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2208      	movs	r2, #8
 800618c:	4013      	ands	r3, r2
 800618e:	d00b      	beq.n	80061a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4a34      	ldr	r2, [pc, #208]	; (8006268 <UART_AdvFeatureConfig+0x150>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2210      	movs	r2, #16
 80061ae:	4013      	ands	r3, r2
 80061b0:	d00b      	beq.n	80061ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	4a2c      	ldr	r2, [pc, #176]	; (800626c <UART_AdvFeatureConfig+0x154>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2220      	movs	r2, #32
 80061d0:	4013      	ands	r3, r2
 80061d2:	d00b      	beq.n	80061ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	4a25      	ldr	r2, [pc, #148]	; (8006270 <UART_AdvFeatureConfig+0x158>)
 80061dc:	4013      	ands	r3, r2
 80061de:	0019      	movs	r1, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	4013      	ands	r3, r2
 80061f4:	d01d      	beq.n	8006232 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <UART_AdvFeatureConfig+0x15c>)
 80061fe:	4013      	ands	r3, r2
 8006200:	0019      	movs	r1, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006212:	2380      	movs	r3, #128	; 0x80
 8006214:	035b      	lsls	r3, r3, #13
 8006216:	429a      	cmp	r2, r3
 8006218:	d10b      	bne.n	8006232 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <UART_AdvFeatureConfig+0x160>)
 8006222:	4013      	ands	r3, r2
 8006224:	0019      	movs	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	4013      	ands	r3, r2
 800623a:	d00b      	beq.n	8006254 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4a0e      	ldr	r2, [pc, #56]	; (800627c <UART_AdvFeatureConfig+0x164>)
 8006244:	4013      	ands	r3, r2
 8006246:	0019      	movs	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }
}
 8006254:	46c0      	nop			; (mov r8, r8)
 8006256:	46bd      	mov	sp, r7
 8006258:	b002      	add	sp, #8
 800625a:	bd80      	pop	{r7, pc}
 800625c:	fffdffff 	.word	0xfffdffff
 8006260:	fffeffff 	.word	0xfffeffff
 8006264:	fffbffff 	.word	0xfffbffff
 8006268:	ffff7fff 	.word	0xffff7fff
 800626c:	ffffefff 	.word	0xffffefff
 8006270:	ffffdfff 	.word	0xffffdfff
 8006274:	ffefffff 	.word	0xffefffff
 8006278:	ff9fffff 	.word	0xff9fffff
 800627c:	fff7ffff 	.word	0xfff7ffff

08006280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b092      	sub	sp, #72	; 0x48
 8006284:	af02      	add	r7, sp, #8
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2284      	movs	r2, #132	; 0x84
 800628c:	2100      	movs	r1, #0
 800628e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006290:	f7fc fa1e 	bl	80026d0 <HAL_GetTick>
 8006294:	0003      	movs	r3, r0
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2208      	movs	r2, #8
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d12c      	bne.n	8006300 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a8:	2280      	movs	r2, #128	; 0x80
 80062aa:	0391      	lsls	r1, r2, #14
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4a46      	ldr	r2, [pc, #280]	; (80063c8 <UART_CheckIdleState+0x148>)
 80062b0:	9200      	str	r2, [sp, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f000 f88c 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d021      	beq.n	8006300 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062bc:	f3ef 8310 	mrs	r3, PRIMASK
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c6:	2301      	movs	r3, #1
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	f383 8810 	msr	PRIMASK, r3
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2180      	movs	r1, #128	; 0x80
 80062de:	438a      	bics	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	f383 8810 	msr	PRIMASK, r3
}
 80062ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2278      	movs	r2, #120	; 0x78
 80062f8:	2100      	movs	r1, #0
 80062fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e05f      	b.n	80063c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2204      	movs	r2, #4
 8006308:	4013      	ands	r3, r2
 800630a:	2b04      	cmp	r3, #4
 800630c:	d146      	bne.n	800639c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	03d1      	lsls	r1, r2, #15
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4a2c      	ldr	r2, [pc, #176]	; (80063c8 <UART_CheckIdleState+0x148>)
 8006318:	9200      	str	r2, [sp, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	f000 f858 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d03b      	beq.n	800639c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006324:	f3ef 8310 	mrs	r3, PRIMASK
 8006328:	60fb      	str	r3, [r7, #12]
  return(result);
 800632a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	2301      	movs	r3, #1
 8006330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	46c0      	nop			; (mov r8, r8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4921      	ldr	r1, [pc, #132]	; (80063cc <UART_CheckIdleState+0x14c>)
 8006346:	400a      	ands	r2, r1
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f383 8810 	msr	PRIMASK, r3
}
 8006354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006356:	f3ef 8310 	mrs	r3, PRIMASK
 800635a:	61bb      	str	r3, [r7, #24]
  return(result);
 800635c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	2301      	movs	r3, #1
 8006362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f383 8810 	msr	PRIMASK, r3
}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2101      	movs	r1, #1
 8006378:	438a      	bics	r2, r1
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f383 8810 	msr	PRIMASK, r3
}
 8006386:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	2120      	movs	r1, #32
 800638e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2278      	movs	r2, #120	; 0x78
 8006394:	2100      	movs	r1, #0
 8006396:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e011      	b.n	80063c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	2120      	movs	r1, #32
 80063a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2278      	movs	r2, #120	; 0x78
 80063ba:	2100      	movs	r1, #0
 80063bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	0018      	movs	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b010      	add	sp, #64	; 0x40
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	01ffffff 	.word	0x01ffffff
 80063cc:	fffffedf 	.word	0xfffffedf

080063d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	1dfb      	adds	r3, r7, #7
 80063de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e0:	e04b      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	3301      	adds	r3, #1
 80063e6:	d048      	beq.n	800647a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e8:	f7fc f972 	bl	80026d0 <HAL_GetTick>
 80063ec:	0002      	movs	r2, r0
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d302      	bcc.n	80063fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e04b      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2204      	movs	r2, #4
 800640a:	4013      	ands	r3, r2
 800640c:	d035      	beq.n	800647a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	2208      	movs	r2, #8
 8006416:	4013      	ands	r3, r2
 8006418:	2b08      	cmp	r3, #8
 800641a:	d111      	bne.n	8006440 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2208      	movs	r2, #8
 8006422:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	0018      	movs	r0, r3
 8006428:	f000 f900 	bl	800662c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2284      	movs	r2, #132	; 0x84
 8006430:	2108      	movs	r1, #8
 8006432:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2278      	movs	r2, #120	; 0x78
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e02c      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	2380      	movs	r3, #128	; 0x80
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	401a      	ands	r2, r3
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	429a      	cmp	r2, r3
 8006452:	d112      	bne.n	800647a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	0112      	lsls	r2, r2, #4
 800645c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	0018      	movs	r0, r3
 8006462:	f000 f8e3 	bl	800662c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2284      	movs	r2, #132	; 0x84
 800646a:	2120      	movs	r1, #32
 800646c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2278      	movs	r2, #120	; 0x78
 8006472:	2100      	movs	r1, #0
 8006474:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e00f      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	4013      	ands	r3, r2
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	425a      	negs	r2, r3
 800648a:	4153      	adcs	r3, r2
 800648c:	b2db      	uxtb	r3, r3
 800648e:	001a      	movs	r2, r3
 8006490:	1dfb      	adds	r3, r7, #7
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d0a4      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	0018      	movs	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	b004      	add	sp, #16
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b090      	sub	sp, #64	; 0x40
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	1dbb      	adds	r3, r7, #6
 80064b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1dba      	adds	r2, r7, #6
 80064bc:	2158      	movs	r1, #88	; 0x58
 80064be:	8812      	ldrh	r2, [r2, #0]
 80064c0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2284      	movs	r2, #132	; 0x84
 80064c6:	2100      	movs	r1, #0
 80064c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	2122      	movs	r1, #34	; 0x22
 80064d0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d028      	beq.n	800652c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064de:	4a3e      	ldr	r2, [pc, #248]	; (80065d8 <UART_Start_Receive_DMA+0x134>)
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e6:	4a3d      	ldr	r2, [pc, #244]	; (80065dc <UART_Start_Receive_DMA+0x138>)
 80064e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ee:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <UART_Start_Receive_DMA+0x13c>)
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f6:	2200      	movs	r2, #0
 80064f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3324      	adds	r3, #36	; 0x24
 8006504:	0019      	movs	r1, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	001a      	movs	r2, r3
 800650c:	1dbb      	adds	r3, r7, #6
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	f7fc fa32 	bl	8002978 <HAL_DMA_Start_IT>
 8006514:	1e03      	subs	r3, r0, #0
 8006516:	d009      	beq.n	800652c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2284      	movs	r2, #132	; 0x84
 800651c:	2110      	movs	r1, #16
 800651e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2280      	movs	r2, #128	; 0x80
 8006524:	2120      	movs	r1, #32
 8006526:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e050      	b.n	80065ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d019      	beq.n	8006568 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006534:	f3ef 8310 	mrs	r3, PRIMASK
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653e:	2301      	movs	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2180      	movs	r1, #128	; 0x80
 8006556:	0049      	lsls	r1, r1, #1
 8006558:	430a      	orrs	r2, r1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	f383 8810 	msr	PRIMASK, r3
}
 8006566:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006568:	f3ef 8310 	mrs	r3, PRIMASK
 800656c:	613b      	str	r3, [r7, #16]
  return(result);
 800656e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f383 8810 	msr	PRIMASK, r3
}
 800657c:	46c0      	nop			; (mov r8, r8)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2101      	movs	r1, #1
 800658a:	430a      	orrs	r2, r1
 800658c:	609a      	str	r2, [r3, #8]
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659a:	f3ef 8310 	mrs	r3, PRIMASK
 800659e:	61fb      	str	r3, [r7, #28]
  return(result);
 80065a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
 80065a4:	2301      	movs	r3, #1
 80065a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	f383 8810 	msr	PRIMASK, r3
}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2140      	movs	r1, #64	; 0x40
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	0018      	movs	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b010      	add	sp, #64	; 0x40
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	080066f5 	.word	0x080066f5
 80065dc:	08006821 	.word	0x08006821
 80065e0:	08006863 	.word	0x08006863

080065e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ec:	f3ef 8310 	mrs	r3, PRIMASK
 80065f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	2301      	movs	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f383 8810 	msr	PRIMASK, r3
}
 8006600:	46c0      	nop			; (mov r8, r8)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	21c0      	movs	r1, #192	; 0xc0
 800660e:	438a      	bics	r2, r1
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006624:	46c0      	nop			; (mov r8, r8)
 8006626:	46bd      	mov	sp, r7
 8006628:	b006      	add	sp, #24
 800662a:	bd80      	pop	{r7, pc}

0800662c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006634:	f3ef 8310 	mrs	r3, PRIMASK
 8006638:	617b      	str	r3, [r7, #20]
  return(result);
 800663a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
 800663e:	2301      	movs	r3, #1
 8006640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f383 8810 	msr	PRIMASK, r3
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4926      	ldr	r1, [pc, #152]	; (80066f0 <UART_EndRxTransfer+0xc4>)
 8006656:	400a      	ands	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f383 8810 	msr	PRIMASK, r3
}
 8006664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006666:	f3ef 8310 	mrs	r3, PRIMASK
 800666a:	623b      	str	r3, [r7, #32]
  return(result);
 800666c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
 8006670:	2301      	movs	r3, #1
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	f383 8810 	msr	PRIMASK, r3
}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2101      	movs	r1, #1
 8006688:	438a      	bics	r2, r1
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	f383 8810 	msr	PRIMASK, r3
}
 8006696:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2b01      	cmp	r3, #1
 800669e:	d118      	bne.n	80066d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a0:	f3ef 8310 	mrs	r3, PRIMASK
 80066a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066aa:	2301      	movs	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f383 8810 	msr	PRIMASK, r3
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2110      	movs	r1, #16
 80066c2:	438a      	bics	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f383 8810 	msr	PRIMASK, r3
}
 80066d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2280      	movs	r2, #128	; 0x80
 80066d6:	2120      	movs	r1, #32
 80066d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b00e      	add	sp, #56	; 0x38
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	fffffedf 	.word	0xfffffedf

080066f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b094      	sub	sp, #80	; 0x50
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b20      	cmp	r3, #32
 8006708:	d06f      	beq.n	80067ea <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800670a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670c:	225a      	movs	r2, #90	; 0x5a
 800670e:	2100      	movs	r1, #0
 8006710:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	61bb      	str	r3, [r7, #24]
  return(result);
 8006718:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800671a:	64bb      	str	r3, [r7, #72]	; 0x48
 800671c:	2301      	movs	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f383 8810 	msr	PRIMASK, r3
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	493a      	ldr	r1, [pc, #232]	; (800681c <UART_DMAReceiveCplt+0x128>)
 8006734:	400a      	ands	r2, r1
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f383 8810 	msr	PRIMASK, r3
}
 8006742:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006744:	f3ef 8310 	mrs	r3, PRIMASK
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674c:	647b      	str	r3, [r7, #68]	; 0x44
 800674e:	2301      	movs	r3, #1
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	f383 8810 	msr	PRIMASK, r3
}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2101      	movs	r1, #1
 8006766:	438a      	bics	r2, r1
 8006768:	609a      	str	r2, [r3, #8]
 800676a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	f383 8810 	msr	PRIMASK, r3
}
 8006774:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006776:	f3ef 8310 	mrs	r3, PRIMASK
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677e:	643b      	str	r3, [r7, #64]	; 0x40
 8006780:	2301      	movs	r3, #1
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	f383 8810 	msr	PRIMASK, r3
}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2140      	movs	r1, #64	; 0x40
 8006798:	438a      	bics	r2, r1
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	f383 8810 	msr	PRIMASK, r3
}
 80067a6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067aa:	2280      	movs	r2, #128	; 0x80
 80067ac:	2120      	movs	r1, #32
 80067ae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d118      	bne.n	80067ea <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b8:	f3ef 8310 	mrs	r3, PRIMASK
 80067bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80067be:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c2:	2301      	movs	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2110      	movs	r1, #16
 80067da:	438a      	bics	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f383 8810 	msr	PRIMASK, r3
}
 80067e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	2200      	movs	r2, #0
 80067ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d108      	bne.n	800680a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fa:	2258      	movs	r2, #88	; 0x58
 80067fc:	5a9a      	ldrh	r2, [r3, r2]
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	0011      	movs	r1, r2
 8006802:	0018      	movs	r0, r3
 8006804:	f7ff fa94 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006808:	e003      	b.n	8006812 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680c:	0018      	movs	r0, r3
 800680e:	f7fb faf3 	bl	8001df8 <HAL_UART_RxCpltCallback>
}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	46bd      	mov	sp, r7
 8006816:	b014      	add	sp, #80	; 0x50
 8006818:	bd80      	pop	{r7, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	fffffeff 	.word	0xfffffeff

08006820 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006838:	2b01      	cmp	r3, #1
 800683a:	d10a      	bne.n	8006852 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2258      	movs	r2, #88	; 0x58
 8006840:	5a9b      	ldrh	r3, [r3, r2]
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	0011      	movs	r1, r2
 800684a:	0018      	movs	r0, r3
 800684c:	f7ff fa70 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006850:	e003      	b.n	800685a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff fa5b 	bl	8005d10 <HAL_UART_RxHalfCpltCallback>
}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b004      	add	sp, #16
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b086      	sub	sp, #24
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006874:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2280      	movs	r2, #128	; 0x80
 800687a:	589b      	ldr	r3, [r3, r2]
 800687c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2280      	movs	r2, #128	; 0x80
 8006886:	4013      	ands	r3, r2
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d10a      	bne.n	80068a2 <UART_DMAError+0x40>
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b21      	cmp	r3, #33	; 0x21
 8006890:	d107      	bne.n	80068a2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2252      	movs	r2, #82	; 0x52
 8006896:	2100      	movs	r1, #0
 8006898:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	0018      	movs	r0, r3
 800689e:	f7ff fea1 	bl	80065e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2240      	movs	r2, #64	; 0x40
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d10a      	bne.n	80068c6 <UART_DMAError+0x64>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b22      	cmp	r3, #34	; 0x22
 80068b4:	d107      	bne.n	80068c6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	225a      	movs	r2, #90	; 0x5a
 80068ba:	2100      	movs	r1, #0
 80068bc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	0018      	movs	r0, r3
 80068c2:	f7ff feb3 	bl	800662c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2284      	movs	r2, #132	; 0x84
 80068ca:	589b      	ldr	r3, [r3, r2]
 80068cc:	2210      	movs	r2, #16
 80068ce:	431a      	orrs	r2, r3
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2184      	movs	r1, #132	; 0x84
 80068d4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7ff fa21 	bl	8005d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b006      	add	sp, #24
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	225a      	movs	r2, #90	; 0x5a
 80068f8:	2100      	movs	r1, #0
 80068fa:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2252      	movs	r2, #82	; 0x52
 8006900:	2100      	movs	r1, #0
 8006902:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	0018      	movs	r0, r3
 8006908:	f7ff fa0a 	bl	8005d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	46bd      	mov	sp, r7
 8006910:	b004      	add	sp, #16
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800691c:	f3ef 8310 	mrs	r3, PRIMASK
 8006920:	60bb      	str	r3, [r7, #8]
  return(result);
 8006922:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	2301      	movs	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f383 8810 	msr	PRIMASK, r3
}
 8006930:	46c0      	nop			; (mov r8, r8)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2140      	movs	r1, #64	; 0x40
 800693e:	438a      	bics	r2, r1
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f383 8810 	msr	PRIMASK, r3
}
 800694c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f7ff f9cf 	bl	8005d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46bd      	mov	sp, r7
 8006966:	b006      	add	sp, #24
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}

0800697a <memset>:
 800697a:	0003      	movs	r3, r0
 800697c:	1882      	adds	r2, r0, r2
 800697e:	4293      	cmp	r3, r2
 8006980:	d100      	bne.n	8006984 <memset+0xa>
 8006982:	4770      	bx	lr
 8006984:	7019      	strb	r1, [r3, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	e7f9      	b.n	800697e <memset+0x4>

0800698a <strstr>:
 800698a:	780a      	ldrb	r2, [r1, #0]
 800698c:	b530      	push	{r4, r5, lr}
 800698e:	2a00      	cmp	r2, #0
 8006990:	d10c      	bne.n	80069ac <strstr+0x22>
 8006992:	bd30      	pop	{r4, r5, pc}
 8006994:	429a      	cmp	r2, r3
 8006996:	d108      	bne.n	80069aa <strstr+0x20>
 8006998:	2301      	movs	r3, #1
 800699a:	5ccc      	ldrb	r4, [r1, r3]
 800699c:	2c00      	cmp	r4, #0
 800699e:	d0f8      	beq.n	8006992 <strstr+0x8>
 80069a0:	5cc5      	ldrb	r5, [r0, r3]
 80069a2:	42a5      	cmp	r5, r4
 80069a4:	d101      	bne.n	80069aa <strstr+0x20>
 80069a6:	3301      	adds	r3, #1
 80069a8:	e7f7      	b.n	800699a <strstr+0x10>
 80069aa:	3001      	adds	r0, #1
 80069ac:	7803      	ldrb	r3, [r0, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <strstr+0xa>
 80069b2:	0018      	movs	r0, r3
 80069b4:	e7ed      	b.n	8006992 <strstr+0x8>
	...

080069b8 <__libc_init_array>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	2600      	movs	r6, #0
 80069bc:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x38>)
 80069be:	4d0d      	ldr	r5, [pc, #52]	; (80069f4 <__libc_init_array+0x3c>)
 80069c0:	1b64      	subs	r4, r4, r5
 80069c2:	10a4      	asrs	r4, r4, #2
 80069c4:	42a6      	cmp	r6, r4
 80069c6:	d109      	bne.n	80069dc <__libc_init_array+0x24>
 80069c8:	2600      	movs	r6, #0
 80069ca:	f000 f819 	bl	8006a00 <_init>
 80069ce:	4c0a      	ldr	r4, [pc, #40]	; (80069f8 <__libc_init_array+0x40>)
 80069d0:	4d0a      	ldr	r5, [pc, #40]	; (80069fc <__libc_init_array+0x44>)
 80069d2:	1b64      	subs	r4, r4, r5
 80069d4:	10a4      	asrs	r4, r4, #2
 80069d6:	42a6      	cmp	r6, r4
 80069d8:	d105      	bne.n	80069e6 <__libc_init_array+0x2e>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	00b3      	lsls	r3, r6, #2
 80069de:	58eb      	ldr	r3, [r5, r3]
 80069e0:	4798      	blx	r3
 80069e2:	3601      	adds	r6, #1
 80069e4:	e7ee      	b.n	80069c4 <__libc_init_array+0xc>
 80069e6:	00b3      	lsls	r3, r6, #2
 80069e8:	58eb      	ldr	r3, [r5, r3]
 80069ea:	4798      	blx	r3
 80069ec:	3601      	adds	r6, #1
 80069ee:	e7f2      	b.n	80069d6 <__libc_init_array+0x1e>
 80069f0:	08006a9c 	.word	0x08006a9c
 80069f4:	08006a9c 	.word	0x08006a9c
 80069f8:	08006aa0 	.word	0x08006aa0
 80069fc:	08006a9c 	.word	0x08006a9c

08006a00 <_init>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr

08006a0c <_fini>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr
