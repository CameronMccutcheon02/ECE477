
MainMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006abc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bfc  08006bfc  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08006bfc  08006bfc  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bfc  08006bfc  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08006c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000054  08006c58  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006c58  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100d0  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b0  00000000  00000000  0003018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf9  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bc68  00000000  00000000  00033f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d35  00000000  00000000  0004fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aafb0  00000000  00000000  000618e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000386c  00000000  00000000  0010c898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00110104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006b60 	.word	0x08006b60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	08006b60 	.word	0x08006b60

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 fef5 	bl	8001014 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe55 	bl	8000ee0 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 facc 	bl	80007dc <__aeabi_dsub>
 8000244:	f000 fe4c 	bl	8000ee0 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dmul>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4645      	mov	r5, r8
 800025c:	46de      	mov	lr, fp
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	001f      	movs	r7, r3
 8000266:	030b      	lsls	r3, r1, #12
 8000268:	0b1b      	lsrs	r3, r3, #12
 800026a:	469b      	mov	fp, r3
 800026c:	004d      	lsls	r5, r1, #1
 800026e:	0fcb      	lsrs	r3, r1, #31
 8000270:	0004      	movs	r4, r0
 8000272:	4691      	mov	r9, r2
 8000274:	4698      	mov	r8, r3
 8000276:	b087      	sub	sp, #28
 8000278:	0d6d      	lsrs	r5, r5, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x26>
 800027c:	e1cd      	b.n	800061a <__aeabi_dmul+0x3c2>
 800027e:	4bce      	ldr	r3, [pc, #824]	; (80005b8 <__aeabi_dmul+0x360>)
 8000280:	429d      	cmp	r5, r3
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x2e>
 8000284:	e1e9      	b.n	800065a <__aeabi_dmul+0x402>
 8000286:	465a      	mov	r2, fp
 8000288:	0f43      	lsrs	r3, r0, #29
 800028a:	00d2      	lsls	r2, r2, #3
 800028c:	4313      	orrs	r3, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	431a      	orrs	r2, r3
 8000294:	00c3      	lsls	r3, r0, #3
 8000296:	469a      	mov	sl, r3
 8000298:	4bc8      	ldr	r3, [pc, #800]	; (80005bc <__aeabi_dmul+0x364>)
 800029a:	4693      	mov	fp, r2
 800029c:	469c      	mov	ip, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	2600      	movs	r6, #0
 80002a2:	4465      	add	r5, ip
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4648      	mov	r0, r9
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dmul+0x60>
 80002b6:	e189      	b.n	80005cc <__aeabi_dmul+0x374>
 80002b8:	4abf      	ldr	r2, [pc, #764]	; (80005b8 <__aeabi_dmul+0x360>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d019      	beq.n	80002f2 <__aeabi_dmul+0x9a>
 80002be:	0f42      	lsrs	r2, r0, #29
 80002c0:	00e4      	lsls	r4, r4, #3
 80002c2:	4322      	orrs	r2, r4
 80002c4:	2480      	movs	r4, #128	; 0x80
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	4314      	orrs	r4, r2
 80002ca:	4abc      	ldr	r2, [pc, #752]	; (80005bc <__aeabi_dmul+0x364>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4694      	mov	ip, r2
 80002d0:	4642      	mov	r2, r8
 80002d2:	4463      	add	r3, ip
 80002d4:	195b      	adds	r3, r3, r5
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	407a      	eors	r2, r7
 80002dc:	3301      	adds	r3, #1
 80002de:	00c0      	lsls	r0, r0, #3
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2e0a      	cmp	r6, #10
 80002e6:	dd1c      	ble.n	8000322 <__aeabi_dmul+0xca>
 80002e8:	003a      	movs	r2, r7
 80002ea:	2e0b      	cmp	r6, #11
 80002ec:	d05e      	beq.n	80003ac <__aeabi_dmul+0x154>
 80002ee:	4647      	mov	r7, r8
 80002f0:	e056      	b.n	80003a0 <__aeabi_dmul+0x148>
 80002f2:	4649      	mov	r1, r9
 80002f4:	4bb0      	ldr	r3, [pc, #704]	; (80005b8 <__aeabi_dmul+0x360>)
 80002f6:	4321      	orrs	r1, r4
 80002f8:	18eb      	adds	r3, r5, r3
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d12a      	bne.n	8000356 <__aeabi_dmul+0xfe>
 8000300:	2080      	movs	r0, #128	; 0x80
 8000302:	2202      	movs	r2, #2
 8000304:	0100      	lsls	r0, r0, #4
 8000306:	002b      	movs	r3, r5
 8000308:	4684      	mov	ip, r0
 800030a:	4316      	orrs	r6, r2
 800030c:	4642      	mov	r2, r8
 800030e:	4463      	add	r3, ip
 8000310:	407a      	eors	r2, r7
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	2e0a      	cmp	r6, #10
 8000318:	dd00      	ble.n	800031c <__aeabi_dmul+0xc4>
 800031a:	e231      	b.n	8000780 <__aeabi_dmul+0x528>
 800031c:	2000      	movs	r0, #0
 800031e:	2400      	movs	r4, #0
 8000320:	2102      	movs	r1, #2
 8000322:	2e02      	cmp	r6, #2
 8000324:	dc26      	bgt.n	8000374 <__aeabi_dmul+0x11c>
 8000326:	3e01      	subs	r6, #1
 8000328:	2e01      	cmp	r6, #1
 800032a:	d852      	bhi.n	80003d2 <__aeabi_dmul+0x17a>
 800032c:	2902      	cmp	r1, #2
 800032e:	d04c      	beq.n	80003ca <__aeabi_dmul+0x172>
 8000330:	2901      	cmp	r1, #1
 8000332:	d000      	beq.n	8000336 <__aeabi_dmul+0xde>
 8000334:	e118      	b.n	8000568 <__aeabi_dmul+0x310>
 8000336:	2300      	movs	r3, #0
 8000338:	2400      	movs	r4, #0
 800033a:	2500      	movs	r5, #0
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	4323      	orrs	r3, r4
 8000340:	07d2      	lsls	r2, r2, #31
 8000342:	4313      	orrs	r3, r2
 8000344:	0028      	movs	r0, r5
 8000346:	0019      	movs	r1, r3
 8000348:	b007      	add	sp, #28
 800034a:	bcf0      	pop	{r4, r5, r6, r7}
 800034c:	46bb      	mov	fp, r7
 800034e:	46b2      	mov	sl, r6
 8000350:	46a9      	mov	r9, r5
 8000352:	46a0      	mov	r8, r4
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	2203      	movs	r2, #3
 800035a:	0109      	lsls	r1, r1, #4
 800035c:	002b      	movs	r3, r5
 800035e:	468c      	mov	ip, r1
 8000360:	4316      	orrs	r6, r2
 8000362:	4642      	mov	r2, r8
 8000364:	4463      	add	r3, ip
 8000366:	407a      	eors	r2, r7
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2e0a      	cmp	r6, #10
 800036e:	dd00      	ble.n	8000372 <__aeabi_dmul+0x11a>
 8000370:	e228      	b.n	80007c4 <__aeabi_dmul+0x56c>
 8000372:	2103      	movs	r1, #3
 8000374:	2501      	movs	r5, #1
 8000376:	40b5      	lsls	r5, r6
 8000378:	46ac      	mov	ip, r5
 800037a:	26a6      	movs	r6, #166	; 0xa6
 800037c:	4663      	mov	r3, ip
 800037e:	00f6      	lsls	r6, r6, #3
 8000380:	4035      	ands	r5, r6
 8000382:	4233      	tst	r3, r6
 8000384:	d10b      	bne.n	800039e <__aeabi_dmul+0x146>
 8000386:	2690      	movs	r6, #144	; 0x90
 8000388:	00b6      	lsls	r6, r6, #2
 800038a:	4233      	tst	r3, r6
 800038c:	d118      	bne.n	80003c0 <__aeabi_dmul+0x168>
 800038e:	3eb9      	subs	r6, #185	; 0xb9
 8000390:	3eff      	subs	r6, #255	; 0xff
 8000392:	421e      	tst	r6, r3
 8000394:	d01d      	beq.n	80003d2 <__aeabi_dmul+0x17a>
 8000396:	46a3      	mov	fp, r4
 8000398:	4682      	mov	sl, r0
 800039a:	9100      	str	r1, [sp, #0]
 800039c:	e000      	b.n	80003a0 <__aeabi_dmul+0x148>
 800039e:	0017      	movs	r7, r2
 80003a0:	9900      	ldr	r1, [sp, #0]
 80003a2:	003a      	movs	r2, r7
 80003a4:	2902      	cmp	r1, #2
 80003a6:	d010      	beq.n	80003ca <__aeabi_dmul+0x172>
 80003a8:	465c      	mov	r4, fp
 80003aa:	4650      	mov	r0, sl
 80003ac:	2903      	cmp	r1, #3
 80003ae:	d1bf      	bne.n	8000330 <__aeabi_dmul+0xd8>
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	031b      	lsls	r3, r3, #12
 80003b4:	431c      	orrs	r4, r3
 80003b6:	0324      	lsls	r4, r4, #12
 80003b8:	0005      	movs	r5, r0
 80003ba:	4b7f      	ldr	r3, [pc, #508]	; (80005b8 <__aeabi_dmul+0x360>)
 80003bc:	0b24      	lsrs	r4, r4, #12
 80003be:	e7bd      	b.n	800033c <__aeabi_dmul+0xe4>
 80003c0:	2480      	movs	r4, #128	; 0x80
 80003c2:	2200      	movs	r2, #0
 80003c4:	4b7c      	ldr	r3, [pc, #496]	; (80005b8 <__aeabi_dmul+0x360>)
 80003c6:	0324      	lsls	r4, r4, #12
 80003c8:	e7b8      	b.n	800033c <__aeabi_dmul+0xe4>
 80003ca:	2400      	movs	r4, #0
 80003cc:	2500      	movs	r5, #0
 80003ce:	4b7a      	ldr	r3, [pc, #488]	; (80005b8 <__aeabi_dmul+0x360>)
 80003d0:	e7b4      	b.n	800033c <__aeabi_dmul+0xe4>
 80003d2:	4653      	mov	r3, sl
 80003d4:	041e      	lsls	r6, r3, #16
 80003d6:	0c36      	lsrs	r6, r6, #16
 80003d8:	0c1f      	lsrs	r7, r3, #16
 80003da:	0033      	movs	r3, r6
 80003dc:	0c01      	lsrs	r1, r0, #16
 80003de:	0400      	lsls	r0, r0, #16
 80003e0:	0c00      	lsrs	r0, r0, #16
 80003e2:	4343      	muls	r3, r0
 80003e4:	4698      	mov	r8, r3
 80003e6:	0003      	movs	r3, r0
 80003e8:	437b      	muls	r3, r7
 80003ea:	4699      	mov	r9, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	434b      	muls	r3, r1
 80003f0:	469c      	mov	ip, r3
 80003f2:	4643      	mov	r3, r8
 80003f4:	000d      	movs	r5, r1
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	469a      	mov	sl, r3
 80003fa:	437d      	muls	r5, r7
 80003fc:	44cc      	add	ip, r9
 80003fe:	44d4      	add	ip, sl
 8000400:	9500      	str	r5, [sp, #0]
 8000402:	45e1      	cmp	r9, ip
 8000404:	d904      	bls.n	8000410 <__aeabi_dmul+0x1b8>
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	4699      	mov	r9, r3
 800040c:	444d      	add	r5, r9
 800040e:	9500      	str	r5, [sp, #0]
 8000410:	4663      	mov	r3, ip
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	001d      	movs	r5, r3
 8000416:	4663      	mov	r3, ip
 8000418:	041b      	lsls	r3, r3, #16
 800041a:	469c      	mov	ip, r3
 800041c:	4643      	mov	r3, r8
 800041e:	041b      	lsls	r3, r3, #16
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	4698      	mov	r8, r3
 8000424:	4663      	mov	r3, ip
 8000426:	4443      	add	r3, r8
 8000428:	9303      	str	r3, [sp, #12]
 800042a:	0c23      	lsrs	r3, r4, #16
 800042c:	4698      	mov	r8, r3
 800042e:	0033      	movs	r3, r6
 8000430:	0424      	lsls	r4, r4, #16
 8000432:	0c24      	lsrs	r4, r4, #16
 8000434:	4363      	muls	r3, r4
 8000436:	469c      	mov	ip, r3
 8000438:	0023      	movs	r3, r4
 800043a:	437b      	muls	r3, r7
 800043c:	4699      	mov	r9, r3
 800043e:	4643      	mov	r3, r8
 8000440:	435e      	muls	r6, r3
 8000442:	435f      	muls	r7, r3
 8000444:	444e      	add	r6, r9
 8000446:	4663      	mov	r3, ip
 8000448:	46b2      	mov	sl, r6
 800044a:	0c1e      	lsrs	r6, r3, #16
 800044c:	4456      	add	r6, sl
 800044e:	45b1      	cmp	r9, r6
 8000450:	d903      	bls.n	800045a <__aeabi_dmul+0x202>
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	025b      	lsls	r3, r3, #9
 8000456:	4699      	mov	r9, r3
 8000458:	444f      	add	r7, r9
 800045a:	0c33      	lsrs	r3, r6, #16
 800045c:	4699      	mov	r9, r3
 800045e:	003b      	movs	r3, r7
 8000460:	444b      	add	r3, r9
 8000462:	9305      	str	r3, [sp, #20]
 8000464:	4663      	mov	r3, ip
 8000466:	46ac      	mov	ip, r5
 8000468:	041f      	lsls	r7, r3, #16
 800046a:	0c3f      	lsrs	r7, r7, #16
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	19f6      	adds	r6, r6, r7
 8000470:	44b4      	add	ip, r6
 8000472:	4663      	mov	r3, ip
 8000474:	9304      	str	r3, [sp, #16]
 8000476:	465b      	mov	r3, fp
 8000478:	0c1b      	lsrs	r3, r3, #16
 800047a:	469c      	mov	ip, r3
 800047c:	465b      	mov	r3, fp
 800047e:	041f      	lsls	r7, r3, #16
 8000480:	0c3f      	lsrs	r7, r7, #16
 8000482:	003b      	movs	r3, r7
 8000484:	4343      	muls	r3, r0
 8000486:	4699      	mov	r9, r3
 8000488:	4663      	mov	r3, ip
 800048a:	4343      	muls	r3, r0
 800048c:	469a      	mov	sl, r3
 800048e:	464b      	mov	r3, r9
 8000490:	4660      	mov	r0, ip
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	469b      	mov	fp, r3
 8000496:	4348      	muls	r0, r1
 8000498:	4379      	muls	r1, r7
 800049a:	4451      	add	r1, sl
 800049c:	4459      	add	r1, fp
 800049e:	458a      	cmp	sl, r1
 80004a0:	d903      	bls.n	80004aa <__aeabi_dmul+0x252>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	469a      	mov	sl, r3
 80004a8:	4450      	add	r0, sl
 80004aa:	0c0b      	lsrs	r3, r1, #16
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	041b      	lsls	r3, r3, #16
 80004b2:	0c1b      	lsrs	r3, r3, #16
 80004b4:	4699      	mov	r9, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4363      	muls	r3, r4
 80004ba:	0409      	lsls	r1, r1, #16
 80004bc:	4645      	mov	r5, r8
 80004be:	4449      	add	r1, r9
 80004c0:	4699      	mov	r9, r3
 80004c2:	4663      	mov	r3, ip
 80004c4:	435c      	muls	r4, r3
 80004c6:	436b      	muls	r3, r5
 80004c8:	469c      	mov	ip, r3
 80004ca:	464b      	mov	r3, r9
 80004cc:	0c1b      	lsrs	r3, r3, #16
 80004ce:	4698      	mov	r8, r3
 80004d0:	436f      	muls	r7, r5
 80004d2:	193f      	adds	r7, r7, r4
 80004d4:	4447      	add	r7, r8
 80004d6:	4450      	add	r0, sl
 80004d8:	42bc      	cmp	r4, r7
 80004da:	d903      	bls.n	80004e4 <__aeabi_dmul+0x28c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	9b04      	ldr	r3, [sp, #16]
 80004e6:	9d00      	ldr	r5, [sp, #0]
 80004e8:	4698      	mov	r8, r3
 80004ea:	4445      	add	r5, r8
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	41b6      	sbcs	r6, r6
 80004f0:	4273      	negs	r3, r6
 80004f2:	4698      	mov	r8, r3
 80004f4:	464b      	mov	r3, r9
 80004f6:	041e      	lsls	r6, r3, #16
 80004f8:	9b05      	ldr	r3, [sp, #20]
 80004fa:	043c      	lsls	r4, r7, #16
 80004fc:	4699      	mov	r9, r3
 80004fe:	0c36      	lsrs	r6, r6, #16
 8000500:	19a4      	adds	r4, r4, r6
 8000502:	444c      	add	r4, r9
 8000504:	46a1      	mov	r9, r4
 8000506:	4683      	mov	fp, r0
 8000508:	186e      	adds	r6, r5, r1
 800050a:	44c1      	add	r9, r8
 800050c:	428e      	cmp	r6, r1
 800050e:	4189      	sbcs	r1, r1
 8000510:	44cb      	add	fp, r9
 8000512:	465d      	mov	r5, fp
 8000514:	4249      	negs	r1, r1
 8000516:	186d      	adds	r5, r5, r1
 8000518:	429c      	cmp	r4, r3
 800051a:	41a4      	sbcs	r4, r4
 800051c:	45c1      	cmp	r9, r8
 800051e:	419b      	sbcs	r3, r3
 8000520:	4583      	cmp	fp, r0
 8000522:	4180      	sbcs	r0, r0
 8000524:	428d      	cmp	r5, r1
 8000526:	4189      	sbcs	r1, r1
 8000528:	425b      	negs	r3, r3
 800052a:	4264      	negs	r4, r4
 800052c:	431c      	orrs	r4, r3
 800052e:	4240      	negs	r0, r0
 8000530:	9b03      	ldr	r3, [sp, #12]
 8000532:	4249      	negs	r1, r1
 8000534:	4301      	orrs	r1, r0
 8000536:	0270      	lsls	r0, r6, #9
 8000538:	0c3f      	lsrs	r7, r7, #16
 800053a:	4318      	orrs	r0, r3
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	1e47      	subs	r7, r0, #1
 8000540:	41b8      	sbcs	r0, r7
 8000542:	1864      	adds	r4, r4, r1
 8000544:	4464      	add	r4, ip
 8000546:	0df6      	lsrs	r6, r6, #23
 8000548:	0261      	lsls	r1, r4, #9
 800054a:	4330      	orrs	r0, r6
 800054c:	0dec      	lsrs	r4, r5, #23
 800054e:	026e      	lsls	r6, r5, #9
 8000550:	430c      	orrs	r4, r1
 8000552:	4330      	orrs	r0, r6
 8000554:	01c9      	lsls	r1, r1, #7
 8000556:	d400      	bmi.n	800055a <__aeabi_dmul+0x302>
 8000558:	e0f1      	b.n	800073e <__aeabi_dmul+0x4e6>
 800055a:	2101      	movs	r1, #1
 800055c:	0843      	lsrs	r3, r0, #1
 800055e:	4001      	ands	r1, r0
 8000560:	430b      	orrs	r3, r1
 8000562:	07e0      	lsls	r0, r4, #31
 8000564:	4318      	orrs	r0, r3
 8000566:	0864      	lsrs	r4, r4, #1
 8000568:	4915      	ldr	r1, [pc, #84]	; (80005c0 <__aeabi_dmul+0x368>)
 800056a:	9b02      	ldr	r3, [sp, #8]
 800056c:	468c      	mov	ip, r1
 800056e:	4463      	add	r3, ip
 8000570:	2b00      	cmp	r3, #0
 8000572:	dc00      	bgt.n	8000576 <__aeabi_dmul+0x31e>
 8000574:	e097      	b.n	80006a6 <__aeabi_dmul+0x44e>
 8000576:	0741      	lsls	r1, r0, #29
 8000578:	d009      	beq.n	800058e <__aeabi_dmul+0x336>
 800057a:	210f      	movs	r1, #15
 800057c:	4001      	ands	r1, r0
 800057e:	2904      	cmp	r1, #4
 8000580:	d005      	beq.n	800058e <__aeabi_dmul+0x336>
 8000582:	1d01      	adds	r1, r0, #4
 8000584:	4281      	cmp	r1, r0
 8000586:	4180      	sbcs	r0, r0
 8000588:	4240      	negs	r0, r0
 800058a:	1824      	adds	r4, r4, r0
 800058c:	0008      	movs	r0, r1
 800058e:	01e1      	lsls	r1, r4, #7
 8000590:	d506      	bpl.n	80005a0 <__aeabi_dmul+0x348>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	00c9      	lsls	r1, r1, #3
 8000596:	468c      	mov	ip, r1
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <__aeabi_dmul+0x36c>)
 800059a:	401c      	ands	r4, r3
 800059c:	9b02      	ldr	r3, [sp, #8]
 800059e:	4463      	add	r3, ip
 80005a0:	4909      	ldr	r1, [pc, #36]	; (80005c8 <__aeabi_dmul+0x370>)
 80005a2:	428b      	cmp	r3, r1
 80005a4:	dd00      	ble.n	80005a8 <__aeabi_dmul+0x350>
 80005a6:	e710      	b.n	80003ca <__aeabi_dmul+0x172>
 80005a8:	0761      	lsls	r1, r4, #29
 80005aa:	08c5      	lsrs	r5, r0, #3
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	430d      	orrs	r5, r1
 80005b2:	0b24      	lsrs	r4, r4, #12
 80005b4:	0d5b      	lsrs	r3, r3, #21
 80005b6:	e6c1      	b.n	800033c <__aeabi_dmul+0xe4>
 80005b8:	000007ff 	.word	0x000007ff
 80005bc:	fffffc01 	.word	0xfffffc01
 80005c0:	000003ff 	.word	0x000003ff
 80005c4:	feffffff 	.word	0xfeffffff
 80005c8:	000007fe 	.word	0x000007fe
 80005cc:	464b      	mov	r3, r9
 80005ce:	4323      	orrs	r3, r4
 80005d0:	d059      	beq.n	8000686 <__aeabi_dmul+0x42e>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dmul+0x380>
 80005d6:	e0a3      	b.n	8000720 <__aeabi_dmul+0x4c8>
 80005d8:	0020      	movs	r0, r4
 80005da:	f000 fd25 	bl	8001028 <__clzsi2>
 80005de:	0001      	movs	r1, r0
 80005e0:	0003      	movs	r3, r0
 80005e2:	390b      	subs	r1, #11
 80005e4:	221d      	movs	r2, #29
 80005e6:	1a52      	subs	r2, r2, r1
 80005e8:	4649      	mov	r1, r9
 80005ea:	0018      	movs	r0, r3
 80005ec:	40d1      	lsrs	r1, r2
 80005ee:	464a      	mov	r2, r9
 80005f0:	3808      	subs	r0, #8
 80005f2:	4082      	lsls	r2, r0
 80005f4:	4084      	lsls	r4, r0
 80005f6:	0010      	movs	r0, r2
 80005f8:	430c      	orrs	r4, r1
 80005fa:	4a74      	ldr	r2, [pc, #464]	; (80007cc <__aeabi_dmul+0x574>)
 80005fc:	1aeb      	subs	r3, r5, r3
 80005fe:	4694      	mov	ip, r2
 8000600:	4642      	mov	r2, r8
 8000602:	4463      	add	r3, ip
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9b01      	ldr	r3, [sp, #4]
 8000608:	407a      	eors	r2, r7
 800060a:	3301      	adds	r3, #1
 800060c:	2100      	movs	r1, #0
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2e0a      	cmp	r6, #10
 8000614:	dd00      	ble.n	8000618 <__aeabi_dmul+0x3c0>
 8000616:	e667      	b.n	80002e8 <__aeabi_dmul+0x90>
 8000618:	e683      	b.n	8000322 <__aeabi_dmul+0xca>
 800061a:	465b      	mov	r3, fp
 800061c:	4303      	orrs	r3, r0
 800061e:	469a      	mov	sl, r3
 8000620:	d02a      	beq.n	8000678 <__aeabi_dmul+0x420>
 8000622:	465b      	mov	r3, fp
 8000624:	2b00      	cmp	r3, #0
 8000626:	d06d      	beq.n	8000704 <__aeabi_dmul+0x4ac>
 8000628:	4658      	mov	r0, fp
 800062a:	f000 fcfd 	bl	8001028 <__clzsi2>
 800062e:	0001      	movs	r1, r0
 8000630:	0003      	movs	r3, r0
 8000632:	390b      	subs	r1, #11
 8000634:	221d      	movs	r2, #29
 8000636:	1a52      	subs	r2, r2, r1
 8000638:	0021      	movs	r1, r4
 800063a:	0018      	movs	r0, r3
 800063c:	465d      	mov	r5, fp
 800063e:	40d1      	lsrs	r1, r2
 8000640:	3808      	subs	r0, #8
 8000642:	4085      	lsls	r5, r0
 8000644:	000a      	movs	r2, r1
 8000646:	4084      	lsls	r4, r0
 8000648:	432a      	orrs	r2, r5
 800064a:	4693      	mov	fp, r2
 800064c:	46a2      	mov	sl, r4
 800064e:	4d5f      	ldr	r5, [pc, #380]	; (80007cc <__aeabi_dmul+0x574>)
 8000650:	2600      	movs	r6, #0
 8000652:	1aed      	subs	r5, r5, r3
 8000654:	2300      	movs	r3, #0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	e625      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800065a:	465b      	mov	r3, fp
 800065c:	4303      	orrs	r3, r0
 800065e:	469a      	mov	sl, r3
 8000660:	d105      	bne.n	800066e <__aeabi_dmul+0x416>
 8000662:	2300      	movs	r3, #0
 8000664:	469b      	mov	fp, r3
 8000666:	3302      	adds	r3, #2
 8000668:	2608      	movs	r6, #8
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	e61b      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800066e:	2303      	movs	r3, #3
 8000670:	4682      	mov	sl, r0
 8000672:	260c      	movs	r6, #12
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	e616      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000678:	2300      	movs	r3, #0
 800067a:	469b      	mov	fp, r3
 800067c:	3301      	adds	r3, #1
 800067e:	2604      	movs	r6, #4
 8000680:	2500      	movs	r5, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	e60f      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000686:	4642      	mov	r2, r8
 8000688:	3301      	adds	r3, #1
 800068a:	9501      	str	r5, [sp, #4]
 800068c:	431e      	orrs	r6, r3
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	407a      	eors	r2, r7
 8000692:	3301      	adds	r3, #1
 8000694:	2400      	movs	r4, #0
 8000696:	2000      	movs	r0, #0
 8000698:	2101      	movs	r1, #1
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2e0a      	cmp	r6, #10
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_dmul+0x44c>
 80006a2:	e621      	b.n	80002e8 <__aeabi_dmul+0x90>
 80006a4:	e63d      	b.n	8000322 <__aeabi_dmul+0xca>
 80006a6:	2101      	movs	r1, #1
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	2938      	cmp	r1, #56	; 0x38
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_dmul+0x458>
 80006ae:	e642      	b.n	8000336 <__aeabi_dmul+0xde>
 80006b0:	291f      	cmp	r1, #31
 80006b2:	dd47      	ble.n	8000744 <__aeabi_dmul+0x4ec>
 80006b4:	261f      	movs	r6, #31
 80006b6:	0025      	movs	r5, r4
 80006b8:	4276      	negs	r6, r6
 80006ba:	1af3      	subs	r3, r6, r3
 80006bc:	40dd      	lsrs	r5, r3
 80006be:	002b      	movs	r3, r5
 80006c0:	2920      	cmp	r1, #32
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dmul+0x478>
 80006c4:	4942      	ldr	r1, [pc, #264]	; (80007d0 <__aeabi_dmul+0x578>)
 80006c6:	9d02      	ldr	r5, [sp, #8]
 80006c8:	468c      	mov	ip, r1
 80006ca:	4465      	add	r5, ip
 80006cc:	40ac      	lsls	r4, r5
 80006ce:	4320      	orrs	r0, r4
 80006d0:	1e41      	subs	r1, r0, #1
 80006d2:	4188      	sbcs	r0, r1
 80006d4:	4318      	orrs	r0, r3
 80006d6:	2307      	movs	r3, #7
 80006d8:	001d      	movs	r5, r3
 80006da:	2400      	movs	r4, #0
 80006dc:	4005      	ands	r5, r0
 80006de:	4203      	tst	r3, r0
 80006e0:	d04a      	beq.n	8000778 <__aeabi_dmul+0x520>
 80006e2:	230f      	movs	r3, #15
 80006e4:	2400      	movs	r4, #0
 80006e6:	4003      	ands	r3, r0
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d042      	beq.n	8000772 <__aeabi_dmul+0x51a>
 80006ec:	1d03      	adds	r3, r0, #4
 80006ee:	4283      	cmp	r3, r0
 80006f0:	4180      	sbcs	r0, r0
 80006f2:	4240      	negs	r0, r0
 80006f4:	1824      	adds	r4, r4, r0
 80006f6:	0018      	movs	r0, r3
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	d53a      	bpl.n	8000772 <__aeabi_dmul+0x51a>
 80006fc:	2301      	movs	r3, #1
 80006fe:	2400      	movs	r4, #0
 8000700:	2500      	movs	r5, #0
 8000702:	e61b      	b.n	800033c <__aeabi_dmul+0xe4>
 8000704:	f000 fc90 	bl	8001028 <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0003      	movs	r3, r0
 800070c:	3115      	adds	r1, #21
 800070e:	3320      	adds	r3, #32
 8000710:	291c      	cmp	r1, #28
 8000712:	dd8f      	ble.n	8000634 <__aeabi_dmul+0x3dc>
 8000714:	3808      	subs	r0, #8
 8000716:	2200      	movs	r2, #0
 8000718:	4084      	lsls	r4, r0
 800071a:	4692      	mov	sl, r2
 800071c:	46a3      	mov	fp, r4
 800071e:	e796      	b.n	800064e <__aeabi_dmul+0x3f6>
 8000720:	f000 fc82 	bl	8001028 <__clzsi2>
 8000724:	0001      	movs	r1, r0
 8000726:	0003      	movs	r3, r0
 8000728:	3115      	adds	r1, #21
 800072a:	3320      	adds	r3, #32
 800072c:	291c      	cmp	r1, #28
 800072e:	dc00      	bgt.n	8000732 <__aeabi_dmul+0x4da>
 8000730:	e758      	b.n	80005e4 <__aeabi_dmul+0x38c>
 8000732:	0002      	movs	r2, r0
 8000734:	464c      	mov	r4, r9
 8000736:	3a08      	subs	r2, #8
 8000738:	2000      	movs	r0, #0
 800073a:	4094      	lsls	r4, r2
 800073c:	e75d      	b.n	80005fa <__aeabi_dmul+0x3a2>
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	e711      	b.n	8000568 <__aeabi_dmul+0x310>
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <__aeabi_dmul+0x57c>)
 8000746:	0026      	movs	r6, r4
 8000748:	469c      	mov	ip, r3
 800074a:	0003      	movs	r3, r0
 800074c:	9d02      	ldr	r5, [sp, #8]
 800074e:	40cb      	lsrs	r3, r1
 8000750:	4465      	add	r5, ip
 8000752:	40ae      	lsls	r6, r5
 8000754:	431e      	orrs	r6, r3
 8000756:	0003      	movs	r3, r0
 8000758:	40ab      	lsls	r3, r5
 800075a:	1e58      	subs	r0, r3, #1
 800075c:	4183      	sbcs	r3, r0
 800075e:	0030      	movs	r0, r6
 8000760:	4318      	orrs	r0, r3
 8000762:	40cc      	lsrs	r4, r1
 8000764:	0743      	lsls	r3, r0, #29
 8000766:	d0c7      	beq.n	80006f8 <__aeabi_dmul+0x4a0>
 8000768:	230f      	movs	r3, #15
 800076a:	4003      	ands	r3, r0
 800076c:	2b04      	cmp	r3, #4
 800076e:	d1bd      	bne.n	80006ec <__aeabi_dmul+0x494>
 8000770:	e7c2      	b.n	80006f8 <__aeabi_dmul+0x4a0>
 8000772:	0765      	lsls	r5, r4, #29
 8000774:	0264      	lsls	r4, r4, #9
 8000776:	0b24      	lsrs	r4, r4, #12
 8000778:	08c0      	lsrs	r0, r0, #3
 800077a:	2300      	movs	r3, #0
 800077c:	4305      	orrs	r5, r0
 800077e:	e5dd      	b.n	800033c <__aeabi_dmul+0xe4>
 8000780:	2500      	movs	r5, #0
 8000782:	2302      	movs	r3, #2
 8000784:	2e0f      	cmp	r6, #15
 8000786:	d10c      	bne.n	80007a2 <__aeabi_dmul+0x54a>
 8000788:	2480      	movs	r4, #128	; 0x80
 800078a:	465b      	mov	r3, fp
 800078c:	0324      	lsls	r4, r4, #12
 800078e:	4223      	tst	r3, r4
 8000790:	d00e      	beq.n	80007b0 <__aeabi_dmul+0x558>
 8000792:	4221      	tst	r1, r4
 8000794:	d10c      	bne.n	80007b0 <__aeabi_dmul+0x558>
 8000796:	430c      	orrs	r4, r1
 8000798:	0324      	lsls	r4, r4, #12
 800079a:	003a      	movs	r2, r7
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <__aeabi_dmul+0x580>)
 800079e:	0b24      	lsrs	r4, r4, #12
 80007a0:	e5cc      	b.n	800033c <__aeabi_dmul+0xe4>
 80007a2:	2e0b      	cmp	r6, #11
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dmul+0x550>
 80007a6:	e5a2      	b.n	80002ee <__aeabi_dmul+0x96>
 80007a8:	468b      	mov	fp, r1
 80007aa:	46aa      	mov	sl, r5
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	e5f7      	b.n	80003a0 <__aeabi_dmul+0x148>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	465b      	mov	r3, fp
 80007b4:	0324      	lsls	r4, r4, #12
 80007b6:	431c      	orrs	r4, r3
 80007b8:	0324      	lsls	r4, r4, #12
 80007ba:	4642      	mov	r2, r8
 80007bc:	4655      	mov	r5, sl
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <__aeabi_dmul+0x580>)
 80007c0:	0b24      	lsrs	r4, r4, #12
 80007c2:	e5bb      	b.n	800033c <__aeabi_dmul+0xe4>
 80007c4:	464d      	mov	r5, r9
 80007c6:	0021      	movs	r1, r4
 80007c8:	2303      	movs	r3, #3
 80007ca:	e7db      	b.n	8000784 <__aeabi_dmul+0x52c>
 80007cc:	fffffc0d 	.word	0xfffffc0d
 80007d0:	0000043e 	.word	0x0000043e
 80007d4:	0000041e 	.word	0x0000041e
 80007d8:	000007ff 	.word	0x000007ff

080007dc <__aeabi_dsub>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	4657      	mov	r7, sl
 80007e0:	464e      	mov	r6, r9
 80007e2:	4645      	mov	r5, r8
 80007e4:	46de      	mov	lr, fp
 80007e6:	b5e0      	push	{r5, r6, r7, lr}
 80007e8:	000d      	movs	r5, r1
 80007ea:	0004      	movs	r4, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	032b      	lsls	r3, r5, #12
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	0f62      	lsrs	r2, r4, #29
 80007f6:	431a      	orrs	r2, r3
 80007f8:	00e3      	lsls	r3, r4, #3
 80007fa:	030c      	lsls	r4, r1, #12
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0f47      	lsrs	r7, r0, #29
 8000800:	4327      	orrs	r7, r4
 8000802:	4cd0      	ldr	r4, [pc, #832]	; (8000b44 <__aeabi_dsub+0x368>)
 8000804:	006e      	lsls	r6, r5, #1
 8000806:	4691      	mov	r9, r2
 8000808:	b083      	sub	sp, #12
 800080a:	004a      	lsls	r2, r1, #1
 800080c:	00c0      	lsls	r0, r0, #3
 800080e:	4698      	mov	r8, r3
 8000810:	46a2      	mov	sl, r4
 8000812:	0d76      	lsrs	r6, r6, #21
 8000814:	0fed      	lsrs	r5, r5, #31
 8000816:	0d52      	lsrs	r2, r2, #21
 8000818:	0fc9      	lsrs	r1, r1, #31
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	42a2      	cmp	r2, r4
 800081e:	d100      	bne.n	8000822 <__aeabi_dsub+0x46>
 8000820:	e0b9      	b.n	8000996 <__aeabi_dsub+0x1ba>
 8000822:	2401      	movs	r4, #1
 8000824:	4061      	eors	r1, r4
 8000826:	468b      	mov	fp, r1
 8000828:	428d      	cmp	r5, r1
 800082a:	d100      	bne.n	800082e <__aeabi_dsub+0x52>
 800082c:	e08d      	b.n	800094a <__aeabi_dsub+0x16e>
 800082e:	1ab4      	subs	r4, r6, r2
 8000830:	46a4      	mov	ip, r4
 8000832:	2c00      	cmp	r4, #0
 8000834:	dc00      	bgt.n	8000838 <__aeabi_dsub+0x5c>
 8000836:	e0b7      	b.n	80009a8 <__aeabi_dsub+0x1cc>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x62>
 800083c:	e0cb      	b.n	80009d6 <__aeabi_dsub+0x1fa>
 800083e:	4ac1      	ldr	r2, [pc, #772]	; (8000b44 <__aeabi_dsub+0x368>)
 8000840:	4296      	cmp	r6, r2
 8000842:	d100      	bne.n	8000846 <__aeabi_dsub+0x6a>
 8000844:	e186      	b.n	8000b54 <__aeabi_dsub+0x378>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	4317      	orrs	r7, r2
 800084c:	4662      	mov	r2, ip
 800084e:	2a38      	cmp	r2, #56	; 0x38
 8000850:	dd00      	ble.n	8000854 <__aeabi_dsub+0x78>
 8000852:	e1a4      	b.n	8000b9e <__aeabi_dsub+0x3c2>
 8000854:	2a1f      	cmp	r2, #31
 8000856:	dd00      	ble.n	800085a <__aeabi_dsub+0x7e>
 8000858:	e21d      	b.n	8000c96 <__aeabi_dsub+0x4ba>
 800085a:	4661      	mov	r1, ip
 800085c:	2220      	movs	r2, #32
 800085e:	003c      	movs	r4, r7
 8000860:	1a52      	subs	r2, r2, r1
 8000862:	0001      	movs	r1, r0
 8000864:	4090      	lsls	r0, r2
 8000866:	4094      	lsls	r4, r2
 8000868:	1e42      	subs	r2, r0, #1
 800086a:	4190      	sbcs	r0, r2
 800086c:	4662      	mov	r2, ip
 800086e:	46a0      	mov	r8, r4
 8000870:	4664      	mov	r4, ip
 8000872:	40d7      	lsrs	r7, r2
 8000874:	464a      	mov	r2, r9
 8000876:	40e1      	lsrs	r1, r4
 8000878:	4644      	mov	r4, r8
 800087a:	1bd2      	subs	r2, r2, r7
 800087c:	4691      	mov	r9, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	4304      	orrs	r4, r0
 8000882:	1b1c      	subs	r4, r3, r4
 8000884:	42a3      	cmp	r3, r4
 8000886:	4192      	sbcs	r2, r2
 8000888:	464b      	mov	r3, r9
 800088a:	4252      	negs	r2, r2
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	469a      	mov	sl, r3
 8000890:	4653      	mov	r3, sl
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	d400      	bmi.n	8000898 <__aeabi_dsub+0xbc>
 8000896:	e12b      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000898:	4653      	mov	r3, sl
 800089a:	025a      	lsls	r2, r3, #9
 800089c:	0a53      	lsrs	r3, r2, #9
 800089e:	469a      	mov	sl, r3
 80008a0:	4653      	mov	r3, sl
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dsub+0xcc>
 80008a6:	e166      	b.n	8000b76 <__aeabi_dsub+0x39a>
 80008a8:	4650      	mov	r0, sl
 80008aa:	f000 fbbd 	bl	8001028 <__clzsi2>
 80008ae:	0003      	movs	r3, r0
 80008b0:	3b08      	subs	r3, #8
 80008b2:	2220      	movs	r2, #32
 80008b4:	0020      	movs	r0, r4
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4651      	mov	r1, sl
 80008ba:	40d0      	lsrs	r0, r2
 80008bc:	4099      	lsls	r1, r3
 80008be:	0002      	movs	r2, r0
 80008c0:	409c      	lsls	r4, r3
 80008c2:	430a      	orrs	r2, r1
 80008c4:	429e      	cmp	r6, r3
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dsub+0xee>
 80008c8:	e164      	b.n	8000b94 <__aeabi_dsub+0x3b8>
 80008ca:	1b9b      	subs	r3, r3, r6
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	291f      	cmp	r1, #31
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dsub+0xf8>
 80008d2:	e0fe      	b.n	8000ad2 <__aeabi_dsub+0x2f6>
 80008d4:	2320      	movs	r3, #32
 80008d6:	0010      	movs	r0, r2
 80008d8:	0026      	movs	r6, r4
 80008da:	1a5b      	subs	r3, r3, r1
 80008dc:	409c      	lsls	r4, r3
 80008de:	4098      	lsls	r0, r3
 80008e0:	40ce      	lsrs	r6, r1
 80008e2:	40ca      	lsrs	r2, r1
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4330      	orrs	r0, r6
 80008ea:	4692      	mov	sl, r2
 80008ec:	2600      	movs	r6, #0
 80008ee:	4304      	orrs	r4, r0
 80008f0:	0763      	lsls	r3, r4, #29
 80008f2:	d009      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d005      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008fc:	1d23      	adds	r3, r4, #4
 80008fe:	42a3      	cmp	r3, r4
 8000900:	41a4      	sbcs	r4, r4
 8000902:	4264      	negs	r4, r4
 8000904:	44a2      	add	sl, r4
 8000906:	001c      	movs	r4, r3
 8000908:	4653      	mov	r3, sl
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	d400      	bmi.n	8000910 <__aeabi_dsub+0x134>
 800090e:	e0f2      	b.n	8000af6 <__aeabi_dsub+0x31a>
 8000910:	4b8c      	ldr	r3, [pc, #560]	; (8000b44 <__aeabi_dsub+0x368>)
 8000912:	3601      	adds	r6, #1
 8000914:	429e      	cmp	r6, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dsub+0x13e>
 8000918:	e10f      	b.n	8000b3a <__aeabi_dsub+0x35e>
 800091a:	4653      	mov	r3, sl
 800091c:	498a      	ldr	r1, [pc, #552]	; (8000b48 <__aeabi_dsub+0x36c>)
 800091e:	08e4      	lsrs	r4, r4, #3
 8000920:	400b      	ands	r3, r1
 8000922:	0019      	movs	r1, r3
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	4323      	orrs	r3, r4
 8000928:	0572      	lsls	r2, r6, #21
 800092a:	024c      	lsls	r4, r1, #9
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0d52      	lsrs	r2, r2, #21
 8000930:	0512      	lsls	r2, r2, #20
 8000932:	4322      	orrs	r2, r4
 8000934:	07ed      	lsls	r5, r5, #31
 8000936:	432a      	orrs	r2, r5
 8000938:	0018      	movs	r0, r3
 800093a:	0011      	movs	r1, r2
 800093c:	b003      	add	sp, #12
 800093e:	bcf0      	pop	{r4, r5, r6, r7}
 8000940:	46bb      	mov	fp, r7
 8000942:	46b2      	mov	sl, r6
 8000944:	46a9      	mov	r9, r5
 8000946:	46a0      	mov	r8, r4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	1ab4      	subs	r4, r6, r2
 800094c:	46a4      	mov	ip, r4
 800094e:	2c00      	cmp	r4, #0
 8000950:	dd59      	ble.n	8000a06 <__aeabi_dsub+0x22a>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x17c>
 8000956:	e0b0      	b.n	8000aba <__aeabi_dsub+0x2de>
 8000958:	4556      	cmp	r6, sl
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x182>
 800095c:	e0fa      	b.n	8000b54 <__aeabi_dsub+0x378>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0412      	lsls	r2, r2, #16
 8000962:	4317      	orrs	r7, r2
 8000964:	4662      	mov	r2, ip
 8000966:	2a38      	cmp	r2, #56	; 0x38
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x190>
 800096a:	e0d4      	b.n	8000b16 <__aeabi_dsub+0x33a>
 800096c:	2a1f      	cmp	r2, #31
 800096e:	dc00      	bgt.n	8000972 <__aeabi_dsub+0x196>
 8000970:	e1c0      	b.n	8000cf4 <__aeabi_dsub+0x518>
 8000972:	0039      	movs	r1, r7
 8000974:	3a20      	subs	r2, #32
 8000976:	40d1      	lsrs	r1, r2
 8000978:	4662      	mov	r2, ip
 800097a:	2a20      	cmp	r2, #32
 800097c:	d006      	beq.n	800098c <__aeabi_dsub+0x1b0>
 800097e:	4664      	mov	r4, ip
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	1b12      	subs	r2, r2, r4
 8000984:	003c      	movs	r4, r7
 8000986:	4094      	lsls	r4, r2
 8000988:	4304      	orrs	r4, r0
 800098a:	9401      	str	r4, [sp, #4]
 800098c:	9c01      	ldr	r4, [sp, #4]
 800098e:	1e62      	subs	r2, r4, #1
 8000990:	4194      	sbcs	r4, r2
 8000992:	430c      	orrs	r4, r1
 8000994:	e0c3      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000996:	003c      	movs	r4, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	d02b      	beq.n	80009f4 <__aeabi_dsub+0x218>
 800099c:	468b      	mov	fp, r1
 800099e:	428d      	cmp	r5, r1
 80009a0:	d02e      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009a2:	4c6a      	ldr	r4, [pc, #424]	; (8000b4c <__aeabi_dsub+0x370>)
 80009a4:	46a4      	mov	ip, r4
 80009a6:	44b4      	add	ip, r6
 80009a8:	4664      	mov	r4, ip
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d05f      	beq.n	8000a6e <__aeabi_dsub+0x292>
 80009ae:	1b94      	subs	r4, r2, r6
 80009b0:	46a4      	mov	ip, r4
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d000      	beq.n	80009b8 <__aeabi_dsub+0x1dc>
 80009b6:	e120      	b.n	8000bfa <__aeabi_dsub+0x41e>
 80009b8:	464c      	mov	r4, r9
 80009ba:	431c      	orrs	r4, r3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x1e4>
 80009be:	e1c7      	b.n	8000d50 <__aeabi_dsub+0x574>
 80009c0:	4661      	mov	r1, ip
 80009c2:	1e4c      	subs	r4, r1, #1
 80009c4:	2901      	cmp	r1, #1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x1ee>
 80009c8:	e223      	b.n	8000e12 <__aeabi_dsub+0x636>
 80009ca:	4d5e      	ldr	r5, [pc, #376]	; (8000b44 <__aeabi_dsub+0x368>)
 80009cc:	45ac      	cmp	ip, r5
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dsub+0x1f6>
 80009d0:	e1d8      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 80009d2:	46a4      	mov	ip, r4
 80009d4:	e11a      	b.n	8000c0c <__aeabi_dsub+0x430>
 80009d6:	003a      	movs	r2, r7
 80009d8:	4302      	orrs	r2, r0
 80009da:	d100      	bne.n	80009de <__aeabi_dsub+0x202>
 80009dc:	e0e4      	b.n	8000ba8 <__aeabi_dsub+0x3cc>
 80009de:	0022      	movs	r2, r4
 80009e0:	3a01      	subs	r2, #1
 80009e2:	2c01      	cmp	r4, #1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dsub+0x20c>
 80009e6:	e1c3      	b.n	8000d70 <__aeabi_dsub+0x594>
 80009e8:	4956      	ldr	r1, [pc, #344]	; (8000b44 <__aeabi_dsub+0x368>)
 80009ea:	428c      	cmp	r4, r1
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dsub+0x214>
 80009ee:	e0b1      	b.n	8000b54 <__aeabi_dsub+0x378>
 80009f0:	4694      	mov	ip, r2
 80009f2:	e72b      	b.n	800084c <__aeabi_dsub+0x70>
 80009f4:	2401      	movs	r4, #1
 80009f6:	4061      	eors	r1, r4
 80009f8:	468b      	mov	fp, r1
 80009fa:	428d      	cmp	r5, r1
 80009fc:	d000      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009fe:	e716      	b.n	800082e <__aeabi_dsub+0x52>
 8000a00:	4952      	ldr	r1, [pc, #328]	; (8000b4c <__aeabi_dsub+0x370>)
 8000a02:	468c      	mov	ip, r1
 8000a04:	44b4      	add	ip, r6
 8000a06:	4664      	mov	r4, ip
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dsub+0x232>
 8000a0c:	e0d3      	b.n	8000bb6 <__aeabi_dsub+0x3da>
 8000a0e:	1b91      	subs	r1, r2, r6
 8000a10:	468c      	mov	ip, r1
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dsub+0x23c>
 8000a16:	e15e      	b.n	8000cd6 <__aeabi_dsub+0x4fa>
 8000a18:	494a      	ldr	r1, [pc, #296]	; (8000b44 <__aeabi_dsub+0x368>)
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dsub+0x244>
 8000a1e:	e1be      	b.n	8000d9e <__aeabi_dsub+0x5c2>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464c      	mov	r4, r9
 8000a24:	0409      	lsls	r1, r1, #16
 8000a26:	430c      	orrs	r4, r1
 8000a28:	46a1      	mov	r9, r4
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	2938      	cmp	r1, #56	; 0x38
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dsub+0x256>
 8000a30:	e1ba      	b.n	8000da8 <__aeabi_dsub+0x5cc>
 8000a32:	291f      	cmp	r1, #31
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_dsub+0x25c>
 8000a36:	e227      	b.n	8000e88 <__aeabi_dsub+0x6ac>
 8000a38:	2420      	movs	r4, #32
 8000a3a:	1a64      	subs	r4, r4, r1
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	40a1      	lsls	r1, r4
 8000a40:	001e      	movs	r6, r3
 8000a42:	4688      	mov	r8, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	40a3      	lsls	r3, r4
 8000a48:	40ce      	lsrs	r6, r1
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	1e5c      	subs	r4, r3, #1
 8000a4e:	41a3      	sbcs	r3, r4
 8000a50:	4331      	orrs	r1, r6
 8000a52:	4319      	orrs	r1, r3
 8000a54:	000c      	movs	r4, r1
 8000a56:	4663      	mov	r3, ip
 8000a58:	4649      	mov	r1, r9
 8000a5a:	40d9      	lsrs	r1, r3
 8000a5c:	187f      	adds	r7, r7, r1
 8000a5e:	1824      	adds	r4, r4, r0
 8000a60:	4284      	cmp	r4, r0
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	425b      	negs	r3, r3
 8000a66:	469a      	mov	sl, r3
 8000a68:	0016      	movs	r6, r2
 8000a6a:	44ba      	add	sl, r7
 8000a6c:	e05d      	b.n	8000b2a <__aeabi_dsub+0x34e>
 8000a6e:	4c38      	ldr	r4, [pc, #224]	; (8000b50 <__aeabi_dsub+0x374>)
 8000a70:	1c72      	adds	r2, r6, #1
 8000a72:	4222      	tst	r2, r4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dsub+0x29c>
 8000a76:	e0df      	b.n	8000c38 <__aeabi_dsub+0x45c>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dsub+0x2a6>
 8000a80:	e15c      	b.n	8000d3c <__aeabi_dsub+0x560>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dsub+0x2ac>
 8000a86:	e1cf      	b.n	8000e28 <__aeabi_dsub+0x64c>
 8000a88:	003a      	movs	r2, r7
 8000a8a:	4302      	orrs	r2, r0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dsub+0x2b4>
 8000a8e:	e17f      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	464a      	mov	r2, r9
 8000a94:	42a3      	cmp	r3, r4
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	1a52      	subs	r2, r2, r1
 8000a9e:	4692      	mov	sl, r2
 8000aa0:	0212      	lsls	r2, r2, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dsub+0x2ca>
 8000aa4:	e20a      	b.n	8000ebc <__aeabi_dsub+0x6e0>
 8000aa6:	1ac4      	subs	r4, r0, r3
 8000aa8:	42a0      	cmp	r0, r4
 8000aaa:	4180      	sbcs	r0, r0
 8000aac:	464b      	mov	r3, r9
 8000aae:	4240      	negs	r0, r0
 8000ab0:	1aff      	subs	r7, r7, r3
 8000ab2:	1a3b      	subs	r3, r7, r0
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	465d      	mov	r5, fp
 8000ab8:	e71a      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000aba:	003a      	movs	r2, r7
 8000abc:	4302      	orrs	r2, r0
 8000abe:	d073      	beq.n	8000ba8 <__aeabi_dsub+0x3cc>
 8000ac0:	0022      	movs	r2, r4
 8000ac2:	3a01      	subs	r2, #1
 8000ac4:	2c01      	cmp	r4, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2ee>
 8000ac8:	e0cb      	b.n	8000c62 <__aeabi_dsub+0x486>
 8000aca:	4554      	cmp	r4, sl
 8000acc:	d042      	beq.n	8000b54 <__aeabi_dsub+0x378>
 8000ace:	4694      	mov	ip, r2
 8000ad0:	e748      	b.n	8000964 <__aeabi_dsub+0x188>
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	3b1f      	subs	r3, #31
 8000ad6:	40d8      	lsrs	r0, r3
 8000ad8:	2920      	cmp	r1, #32
 8000ada:	d003      	beq.n	8000ae4 <__aeabi_dsub+0x308>
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	4314      	orrs	r4, r2
 8000ae4:	1e63      	subs	r3, r4, #1
 8000ae6:	419c      	sbcs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2600      	movs	r6, #0
 8000aec:	469a      	mov	sl, r3
 8000aee:	4304      	orrs	r4, r0
 8000af0:	0763      	lsls	r3, r4, #29
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dsub+0x31a>
 8000af4:	e6fe      	b.n	80008f4 <__aeabi_dsub+0x118>
 8000af6:	4652      	mov	r2, sl
 8000af8:	08e3      	lsrs	r3, r4, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	4313      	orrs	r3, r2
 8000afe:	4652      	mov	r2, sl
 8000b00:	46b4      	mov	ip, r6
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	490f      	ldr	r1, [pc, #60]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b06:	458c      	cmp	ip, r1
 8000b08:	d02a      	beq.n	8000b60 <__aeabi_dsub+0x384>
 8000b0a:	0312      	lsls	r2, r2, #12
 8000b0c:	0b14      	lsrs	r4, r2, #12
 8000b0e:	4662      	mov	r2, ip
 8000b10:	0552      	lsls	r2, r2, #21
 8000b12:	0d52      	lsrs	r2, r2, #21
 8000b14:	e70c      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b16:	003c      	movs	r4, r7
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	1e62      	subs	r2, r4, #1
 8000b1c:	4194      	sbcs	r4, r2
 8000b1e:	18e4      	adds	r4, r4, r3
 8000b20:	429c      	cmp	r4, r3
 8000b22:	4192      	sbcs	r2, r2
 8000b24:	4252      	negs	r2, r2
 8000b26:	444a      	add	r2, r9
 8000b28:	4692      	mov	sl, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	d5df      	bpl.n	8000af0 <__aeabi_dsub+0x314>
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b32:	3601      	adds	r6, #1
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dsub+0x35e>
 8000b38:	e0a0      	b.n	8000c7c <__aeabi_dsub+0x4a0>
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2400      	movs	r4, #0
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e6f6      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	000007ff 	.word	0x000007ff
 8000b48:	ff7fffff 	.word	0xff7fffff
 8000b4c:	fffff801 	.word	0xfffff801
 8000b50:	000007fe 	.word	0x000007fe
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	0752      	lsls	r2, r2, #29
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	08d2      	lsrs	r2, r2, #3
 8000b60:	0019      	movs	r1, r3
 8000b62:	4311      	orrs	r1, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dsub+0x38c>
 8000b66:	e1b5      	b.n	8000ed4 <__aeabi_dsub+0x6f8>
 8000b68:	2480      	movs	r4, #128	; 0x80
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	0324      	lsls	r4, r4, #12
 8000b70:	4ad5      	ldr	r2, [pc, #852]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000b72:	0b24      	lsrs	r4, r4, #12
 8000b74:	e6dc      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b76:	0020      	movs	r0, r4
 8000b78:	f000 fa56 	bl	8001028 <__clzsi2>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	3318      	adds	r3, #24
 8000b80:	2b1f      	cmp	r3, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x3aa>
 8000b84:	e695      	b.n	80008b2 <__aeabi_dsub+0xd6>
 8000b86:	0022      	movs	r2, r4
 8000b88:	3808      	subs	r0, #8
 8000b8a:	4082      	lsls	r2, r0
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_dsub+0x3b8>
 8000b92:	e69a      	b.n	80008ca <__aeabi_dsub+0xee>
 8000b94:	1af6      	subs	r6, r6, r3
 8000b96:	4bcd      	ldr	r3, [pc, #820]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000b98:	401a      	ands	r2, r3
 8000b9a:	4692      	mov	sl, r2
 8000b9c:	e6a8      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000b9e:	003c      	movs	r4, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1e62      	subs	r2, r4, #1
 8000ba4:	4194      	sbcs	r4, r2
 8000ba6:	e66c      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	0752      	lsls	r2, r2, #29
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	08d2      	lsrs	r2, r2, #3
 8000bb4:	e7a6      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000bb6:	4cc6      	ldr	r4, [pc, #792]	; (8000ed0 <__aeabi_dsub+0x6f4>)
 8000bb8:	1c72      	adds	r2, r6, #1
 8000bba:	4222      	tst	r2, r4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dsub+0x3e4>
 8000bbe:	e0ac      	b.n	8000d1a <__aeabi_dsub+0x53e>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dsub+0x3ee>
 8000bc8:	e105      	b.n	8000dd6 <__aeabi_dsub+0x5fa>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dsub+0x3f4>
 8000bce:	e156      	b.n	8000e7e <__aeabi_dsub+0x6a2>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dsub+0x3fc>
 8000bd6:	e0db      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000bd8:	181c      	adds	r4, r3, r0
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	419b      	sbcs	r3, r3
 8000bde:	444f      	add	r7, r9
 8000be0:	46ba      	mov	sl, r7
 8000be2:	425b      	negs	r3, r3
 8000be4:	449a      	add	sl, r3
 8000be6:	4653      	mov	r3, sl
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dsub+0x412>
 8000bec:	e780      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bee:	4652      	mov	r2, sl
 8000bf0:	4bb6      	ldr	r3, [pc, #728]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000bf2:	2601      	movs	r6, #1
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	4692      	mov	sl, r2
 8000bf8:	e77a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bfa:	4cb3      	ldr	r4, [pc, #716]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dsub+0x426>
 8000c00:	e0c0      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 8000c02:	2480      	movs	r4, #128	; 0x80
 8000c04:	464d      	mov	r5, r9
 8000c06:	0424      	lsls	r4, r4, #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	46a9      	mov	r9, r5
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	2c38      	cmp	r4, #56	; 0x38
 8000c10:	dc53      	bgt.n	8000cba <__aeabi_dsub+0x4de>
 8000c12:	4661      	mov	r1, ip
 8000c14:	2c1f      	cmp	r4, #31
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_dsub+0x43e>
 8000c18:	e0cd      	b.n	8000db6 <__aeabi_dsub+0x5da>
 8000c1a:	2520      	movs	r5, #32
 8000c1c:	001e      	movs	r6, r3
 8000c1e:	1b2d      	subs	r5, r5, r4
 8000c20:	464c      	mov	r4, r9
 8000c22:	40ab      	lsls	r3, r5
 8000c24:	40ac      	lsls	r4, r5
 8000c26:	40ce      	lsrs	r6, r1
 8000c28:	1e5d      	subs	r5, r3, #1
 8000c2a:	41ab      	sbcs	r3, r5
 8000c2c:	4334      	orrs	r4, r6
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	464c      	mov	r4, r9
 8000c32:	40cc      	lsrs	r4, r1
 8000c34:	1b3f      	subs	r7, r7, r4
 8000c36:	e045      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1a1c      	subs	r4, r3, r0
 8000c3c:	1bd1      	subs	r1, r2, r7
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	4192      	sbcs	r2, r2
 8000c42:	4252      	negs	r2, r2
 8000c44:	4692      	mov	sl, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	4651      	mov	r1, sl
 8000c4a:	1a52      	subs	r2, r2, r1
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	0212      	lsls	r2, r2, #8
 8000c50:	d500      	bpl.n	8000c54 <__aeabi_dsub+0x478>
 8000c52:	e083      	b.n	8000d5c <__aeabi_dsub+0x580>
 8000c54:	4653      	mov	r3, sl
 8000c56:	4323      	orrs	r3, r4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dsub+0x480>
 8000c5a:	e621      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2500      	movs	r5, #0
 8000c60:	e753      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000c62:	181c      	adds	r4, r3, r0
 8000c64:	429c      	cmp	r4, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	444f      	add	r7, r9
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	449a      	add	sl, r3
 8000c70:	4653      	mov	r3, sl
 8000c72:	2601      	movs	r6, #1
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dsub+0x49e>
 8000c78:	e73a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000c7a:	2602      	movs	r6, #2
 8000c7c:	4652      	mov	r2, sl
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	401a      	ands	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	4021      	ands	r1, r4
 8000c88:	0862      	lsrs	r2, r4, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	07dc      	lsls	r4, r3, #31
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	469a      	mov	sl, r3
 8000c92:	4314      	orrs	r4, r2
 8000c94:	e62c      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000c96:	0039      	movs	r1, r7
 8000c98:	3a20      	subs	r2, #32
 8000c9a:	40d1      	lsrs	r1, r2
 8000c9c:	4662      	mov	r2, ip
 8000c9e:	2a20      	cmp	r2, #32
 8000ca0:	d006      	beq.n	8000cb0 <__aeabi_dsub+0x4d4>
 8000ca2:	4664      	mov	r4, ip
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	1b12      	subs	r2, r2, r4
 8000ca8:	003c      	movs	r4, r7
 8000caa:	4094      	lsls	r4, r2
 8000cac:	4304      	orrs	r4, r0
 8000cae:	9401      	str	r4, [sp, #4]
 8000cb0:	9c01      	ldr	r4, [sp, #4]
 8000cb2:	1e62      	subs	r2, r4, #1
 8000cb4:	4194      	sbcs	r4, r2
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	e5e3      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4319      	orrs	r1, r3
 8000cbe:	000b      	movs	r3, r1
 8000cc0:	1e5c      	subs	r4, r3, #1
 8000cc2:	41a3      	sbcs	r3, r4
 8000cc4:	1ac4      	subs	r4, r0, r3
 8000cc6:	42a0      	cmp	r0, r4
 8000cc8:	419b      	sbcs	r3, r3
 8000cca:	425b      	negs	r3, r3
 8000ccc:	1afb      	subs	r3, r7, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	465d      	mov	r5, fp
 8000cd2:	0016      	movs	r6, r2
 8000cd4:	e5dc      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	d100      	bne.n	8000cde <__aeabi_dsub+0x502>
 8000cdc:	e0ae      	b.n	8000e3c <__aeabi_dsub+0x660>
 8000cde:	4661      	mov	r1, ip
 8000ce0:	4664      	mov	r4, ip
 8000ce2:	3901      	subs	r1, #1
 8000ce4:	2c01      	cmp	r4, #1
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dsub+0x50e>
 8000ce8:	e0e0      	b.n	8000eac <__aeabi_dsub+0x6d0>
 8000cea:	4c77      	ldr	r4, [pc, #476]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d056      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	e69a      	b.n	8000a2a <__aeabi_dsub+0x24e>
 8000cf4:	4661      	mov	r1, ip
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	003c      	movs	r4, r7
 8000cfa:	1a52      	subs	r2, r2, r1
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	0001      	movs	r1, r0
 8000d00:	4090      	lsls	r0, r2
 8000d02:	46a0      	mov	r8, r4
 8000d04:	4664      	mov	r4, ip
 8000d06:	1e42      	subs	r2, r0, #1
 8000d08:	4190      	sbcs	r0, r2
 8000d0a:	4662      	mov	r2, ip
 8000d0c:	40e1      	lsrs	r1, r4
 8000d0e:	4644      	mov	r4, r8
 8000d10:	40d7      	lsrs	r7, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	4304      	orrs	r4, r0
 8000d16:	44b9      	add	r9, r7
 8000d18:	e701      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000d1a:	496b      	ldr	r1, [pc, #428]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dsub+0x546>
 8000d20:	e70c      	b.n	8000b3c <__aeabi_dsub+0x360>
 8000d22:	1818      	adds	r0, r3, r0
 8000d24:	4298      	cmp	r0, r3
 8000d26:	419b      	sbcs	r3, r3
 8000d28:	444f      	add	r7, r9
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	07dc      	lsls	r4, r3, #31
 8000d30:	0840      	lsrs	r0, r0, #1
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	469a      	mov	sl, r3
 8000d36:	0016      	movs	r6, r2
 8000d38:	4304      	orrs	r4, r0
 8000d3a:	e6d9      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_dsub+0x566>
 8000d40:	e081      	b.n	8000e46 <__aeabi_dsub+0x66a>
 8000d42:	003b      	movs	r3, r7
 8000d44:	4303      	orrs	r3, r0
 8000d46:	d11d      	bne.n	8000d84 <__aeabi_dsub+0x5a8>
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	e70b      	b.n	8000b68 <__aeabi_dsub+0x38c>
 8000d50:	08c0      	lsrs	r0, r0, #3
 8000d52:	077b      	lsls	r3, r7, #29
 8000d54:	465d      	mov	r5, fp
 8000d56:	4303      	orrs	r3, r0
 8000d58:	08fa      	lsrs	r2, r7, #3
 8000d5a:	e6d3      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000d5c:	1ac4      	subs	r4, r0, r3
 8000d5e:	42a0      	cmp	r0, r4
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	464b      	mov	r3, r9
 8000d64:	4240      	negs	r0, r0
 8000d66:	1aff      	subs	r7, r7, r3
 8000d68:	1a3b      	subs	r3, r7, r0
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	465d      	mov	r5, fp
 8000d6e:	e597      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	464a      	mov	r2, r9
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	419b      	sbcs	r3, r3
 8000d78:	1bd7      	subs	r7, r2, r7
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	1afb      	subs	r3, r7, r3
 8000d7e:	469a      	mov	sl, r3
 8000d80:	2601      	movs	r6, #1
 8000d82:	e585      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	077b      	lsls	r3, r7, #29
 8000d88:	465d      	mov	r5, fp
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	08fa      	lsrs	r2, r7, #3
 8000d8e:	e6e7      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000d90:	464a      	mov	r2, r9
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	0752      	lsls	r2, r2, #29
 8000d96:	4313      	orrs	r3, r2
 8000d98:	464a      	mov	r2, r9
 8000d9a:	08d2      	lsrs	r2, r2, #3
 8000d9c:	e6b5      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	077b      	lsls	r3, r7, #29
 8000da2:	4303      	orrs	r3, r0
 8000da4:	08fa      	lsrs	r2, r7, #3
 8000da6:	e6db      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000da8:	4649      	mov	r1, r9
 8000daa:	4319      	orrs	r1, r3
 8000dac:	000b      	movs	r3, r1
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	418b      	sbcs	r3, r1
 8000db2:	001c      	movs	r4, r3
 8000db4:	e653      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000db6:	464d      	mov	r5, r9
 8000db8:	3c20      	subs	r4, #32
 8000dba:	40e5      	lsrs	r5, r4
 8000dbc:	2920      	cmp	r1, #32
 8000dbe:	d005      	beq.n	8000dcc <__aeabi_dsub+0x5f0>
 8000dc0:	2440      	movs	r4, #64	; 0x40
 8000dc2:	1a64      	subs	r4, r4, r1
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	40a1      	lsls	r1, r4
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4643      	mov	r3, r8
 8000dce:	1e5c      	subs	r4, r3, #1
 8000dd0:	41a3      	sbcs	r3, r4
 8000dd2:	432b      	orrs	r3, r5
 8000dd4:	e776      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d0e1      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000dda:	003a      	movs	r2, r7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	4302      	orrs	r2, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dsub+0x608>
 8000de2:	e6b8      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000de4:	464a      	mov	r2, r9
 8000de6:	0752      	lsls	r2, r2, #29
 8000de8:	2480      	movs	r4, #128	; 0x80
 8000dea:	4313      	orrs	r3, r2
 8000dec:	464a      	mov	r2, r9
 8000dee:	0324      	lsls	r4, r4, #12
 8000df0:	08d2      	lsrs	r2, r2, #3
 8000df2:	4222      	tst	r2, r4
 8000df4:	d007      	beq.n	8000e06 <__aeabi_dsub+0x62a>
 8000df6:	08fe      	lsrs	r6, r7, #3
 8000df8:	4226      	tst	r6, r4
 8000dfa:	d104      	bne.n	8000e06 <__aeabi_dsub+0x62a>
 8000dfc:	465d      	mov	r5, fp
 8000dfe:	0032      	movs	r2, r6
 8000e00:	08c3      	lsrs	r3, r0, #3
 8000e02:	077f      	lsls	r7, r7, #29
 8000e04:	433b      	orrs	r3, r7
 8000e06:	0f59      	lsrs	r1, r3, #29
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	0749      	lsls	r1, r1, #29
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	e6a6      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e12:	1ac4      	subs	r4, r0, r3
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	4180      	sbcs	r0, r0
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	1aff      	subs	r7, r7, r3
 8000e1e:	1a3b      	subs	r3, r7, r0
 8000e20:	469a      	mov	sl, r3
 8000e22:	465d      	mov	r5, fp
 8000e24:	2601      	movs	r6, #1
 8000e26:	e533      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000e28:	003b      	movs	r3, r7
 8000e2a:	4303      	orrs	r3, r0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dsub+0x654>
 8000e2e:	e715      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000e30:	08c0      	lsrs	r0, r0, #3
 8000e32:	077b      	lsls	r3, r7, #29
 8000e34:	465d      	mov	r5, fp
 8000e36:	4303      	orrs	r3, r0
 8000e38:	08fa      	lsrs	r2, r7, #3
 8000e3a:	e666      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	077b      	lsls	r3, r7, #29
 8000e40:	4303      	orrs	r3, r0
 8000e42:	08fa      	lsrs	r2, r7, #3
 8000e44:	e65e      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000e46:	003a      	movs	r2, r7
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x674>
 8000e4e:	e682      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000e50:	464a      	mov	r2, r9
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	2480      	movs	r4, #128	; 0x80
 8000e56:	4313      	orrs	r3, r2
 8000e58:	464a      	mov	r2, r9
 8000e5a:	0324      	lsls	r4, r4, #12
 8000e5c:	08d2      	lsrs	r2, r2, #3
 8000e5e:	4222      	tst	r2, r4
 8000e60:	d007      	beq.n	8000e72 <__aeabi_dsub+0x696>
 8000e62:	08fe      	lsrs	r6, r7, #3
 8000e64:	4226      	tst	r6, r4
 8000e66:	d104      	bne.n	8000e72 <__aeabi_dsub+0x696>
 8000e68:	465d      	mov	r5, fp
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	08c3      	lsrs	r3, r0, #3
 8000e6e:	077f      	lsls	r7, r7, #29
 8000e70:	433b      	orrs	r3, r7
 8000e72:	0f59      	lsrs	r1, r3, #29
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0749      	lsls	r1, r1, #29
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	e670      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	077b      	lsls	r3, r7, #29
 8000e82:	4303      	orrs	r3, r0
 8000e84:	08fa      	lsrs	r2, r7, #3
 8000e86:	e640      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e88:	464c      	mov	r4, r9
 8000e8a:	3920      	subs	r1, #32
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4661      	mov	r1, ip
 8000e90:	2920      	cmp	r1, #32
 8000e92:	d006      	beq.n	8000ea2 <__aeabi_dsub+0x6c6>
 8000e94:	4666      	mov	r6, ip
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	1b89      	subs	r1, r1, r6
 8000e9a:	464e      	mov	r6, r9
 8000e9c:	408e      	lsls	r6, r1
 8000e9e:	4333      	orrs	r3, r6
 8000ea0:	4698      	mov	r8, r3
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1e59      	subs	r1, r3, #1
 8000ea6:	418b      	sbcs	r3, r1
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	e5d8      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000eac:	181c      	adds	r4, r3, r0
 8000eae:	4284      	cmp	r4, r0
 8000eb0:	4180      	sbcs	r0, r0
 8000eb2:	444f      	add	r7, r9
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	4482      	add	sl, r0
 8000eba:	e6d9      	b.n	8000c70 <__aeabi_dsub+0x494>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x6e8>
 8000ec2:	e6cb      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000ec4:	e614      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	000007fe 	.word	0x000007fe
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4a01      	ldr	r2, [pc, #4]	; (8000edc <__aeabi_dsub+0x700>)
 8000ed8:	001c      	movs	r4, r3
 8000eda:	e529      	b.n	8000930 <__aeabi_dsub+0x154>
 8000edc:	000007ff 	.word	0x000007ff

08000ee0 <__aeabi_d2iz>:
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	b530      	push	{r4, r5, lr}
 8000ee4:	4c13      	ldr	r4, [pc, #76]	; (8000f34 <__aeabi_d2iz+0x54>)
 8000ee6:	0053      	lsls	r3, r2, #1
 8000ee8:	0309      	lsls	r1, r1, #12
 8000eea:	0005      	movs	r5, r0
 8000eec:	0b09      	lsrs	r1, r1, #12
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	0fd2      	lsrs	r2, r2, #31
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	dd04      	ble.n	8000f02 <__aeabi_d2iz+0x22>
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <__aeabi_d2iz+0x58>)
 8000efa:	4283      	cmp	r3, r0
 8000efc:	dd02      	ble.n	8000f04 <__aeabi_d2iz+0x24>
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <__aeabi_d2iz+0x5c>)
 8000f00:	18d0      	adds	r0, r2, r3
 8000f02:	bd30      	pop	{r4, r5, pc}
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	0340      	lsls	r0, r0, #13
 8000f08:	4301      	orrs	r1, r0
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <__aeabi_d2iz+0x60>)
 8000f0c:	1ac0      	subs	r0, r0, r3
 8000f0e:	281f      	cmp	r0, #31
 8000f10:	dd08      	ble.n	8000f24 <__aeabi_d2iz+0x44>
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <__aeabi_d2iz+0x64>)
 8000f14:	1ac3      	subs	r3, r0, r3
 8000f16:	40d9      	lsrs	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	4258      	negs	r0, r3
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1f0      	bne.n	8000f02 <__aeabi_d2iz+0x22>
 8000f20:	0018      	movs	r0, r3
 8000f22:	e7ee      	b.n	8000f02 <__aeabi_d2iz+0x22>
 8000f24:	4c08      	ldr	r4, [pc, #32]	; (8000f48 <__aeabi_d2iz+0x68>)
 8000f26:	40c5      	lsrs	r5, r0
 8000f28:	46a4      	mov	ip, r4
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4099      	lsls	r1, r3
 8000f2e:	000b      	movs	r3, r1
 8000f30:	432b      	orrs	r3, r5
 8000f32:	e7f2      	b.n	8000f1a <__aeabi_d2iz+0x3a>
 8000f34:	000003fe 	.word	0x000003fe
 8000f38:	0000041d 	.word	0x0000041d
 8000f3c:	7fffffff 	.word	0x7fffffff
 8000f40:	00000433 	.word	0x00000433
 8000f44:	00000413 	.word	0x00000413
 8000f48:	fffffbed 	.word	0xfffffbed

08000f4c <__aeabi_i2d>:
 8000f4c:	b570      	push	{r4, r5, r6, lr}
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d016      	beq.n	8000f80 <__aeabi_i2d+0x34>
 8000f52:	17c3      	asrs	r3, r0, #31
 8000f54:	18c5      	adds	r5, r0, r3
 8000f56:	405d      	eors	r5, r3
 8000f58:	0fc4      	lsrs	r4, r0, #31
 8000f5a:	0028      	movs	r0, r5
 8000f5c:	f000 f864 	bl	8001028 <__clzsi2>
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <__aeabi_i2d+0x5c>)
 8000f62:	1a1b      	subs	r3, r3, r0
 8000f64:	280a      	cmp	r0, #10
 8000f66:	dc16      	bgt.n	8000f96 <__aeabi_i2d+0x4a>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	002e      	movs	r6, r5
 8000f6c:	3215      	adds	r2, #21
 8000f6e:	4096      	lsls	r6, r2
 8000f70:	220b      	movs	r2, #11
 8000f72:	1a12      	subs	r2, r2, r0
 8000f74:	40d5      	lsrs	r5, r2
 8000f76:	055b      	lsls	r3, r3, #21
 8000f78:	032d      	lsls	r5, r5, #12
 8000f7a:	0b2d      	lsrs	r5, r5, #12
 8000f7c:	0d5b      	lsrs	r3, r3, #21
 8000f7e:	e003      	b.n	8000f88 <__aeabi_i2d+0x3c>
 8000f80:	2400      	movs	r4, #0
 8000f82:	2300      	movs	r3, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	2600      	movs	r6, #0
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	432b      	orrs	r3, r5
 8000f8c:	07e4      	lsls	r4, r4, #31
 8000f8e:	4323      	orrs	r3, r4
 8000f90:	0030      	movs	r0, r6
 8000f92:	0019      	movs	r1, r3
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	380b      	subs	r0, #11
 8000f98:	4085      	lsls	r5, r0
 8000f9a:	055b      	lsls	r3, r3, #21
 8000f9c:	032d      	lsls	r5, r5, #12
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	0b2d      	lsrs	r5, r5, #12
 8000fa2:	0d5b      	lsrs	r3, r3, #21
 8000fa4:	e7f0      	b.n	8000f88 <__aeabi_i2d+0x3c>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	0000041e 	.word	0x0000041e

08000fac <__aeabi_cdrcmple>:
 8000fac:	4684      	mov	ip, r0
 8000fae:	0010      	movs	r0, r2
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	4663      	mov	r3, ip
 8000fb8:	e000      	b.n	8000fbc <__aeabi_cdcmpeq>
 8000fba:	46c0      	nop			; (mov r8, r8)

08000fbc <__aeabi_cdcmpeq>:
 8000fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000fbe:	f000 f8f9 	bl	80011b4 <__ledf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d401      	bmi.n	8000fca <__aeabi_cdcmpeq+0xe>
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	42c8      	cmn	r0, r1
 8000fca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fcc <__aeabi_dcmpeq>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	f000 f849 	bl	8001064 <__eqdf2>
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <__aeabi_dcmplt>:
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	f000 f8eb 	bl	80011b4 <__ledf2>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	db01      	blt.n	8000fe6 <__aeabi_dcmplt+0xe>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)

08000fec <__aeabi_dcmple>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	f000 f8e1 	bl	80011b4 <__ledf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	dd01      	ble.n	8000ffa <__aeabi_dcmple+0xe>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	bd10      	pop	{r4, pc}
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)

08001000 <__aeabi_dcmpgt>:
 8001000:	b510      	push	{r4, lr}
 8001002:	f000 f871 	bl	80010e8 <__gedf2>
 8001006:	2800      	cmp	r0, #0
 8001008:	dc01      	bgt.n	800100e <__aeabi_dcmpgt+0xe>
 800100a:	2000      	movs	r0, #0
 800100c:	bd10      	pop	{r4, pc}
 800100e:	2001      	movs	r0, #1
 8001010:	bd10      	pop	{r4, pc}
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__aeabi_dcmpge>:
 8001014:	b510      	push	{r4, lr}
 8001016:	f000 f867 	bl	80010e8 <__gedf2>
 800101a:	2800      	cmp	r0, #0
 800101c:	da01      	bge.n	8001022 <__aeabi_dcmpge+0xe>
 800101e:	2000      	movs	r0, #0
 8001020:	bd10      	pop	{r4, pc}
 8001022:	2001      	movs	r0, #1
 8001024:	bd10      	pop	{r4, pc}
 8001026:	46c0      	nop			; (mov r8, r8)

08001028 <__clzsi2>:
 8001028:	211c      	movs	r1, #28
 800102a:	2301      	movs	r3, #1
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	4298      	cmp	r0, r3
 8001030:	d301      	bcc.n	8001036 <__clzsi2+0xe>
 8001032:	0c00      	lsrs	r0, r0, #16
 8001034:	3910      	subs	r1, #16
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	4298      	cmp	r0, r3
 800103a:	d301      	bcc.n	8001040 <__clzsi2+0x18>
 800103c:	0a00      	lsrs	r0, r0, #8
 800103e:	3908      	subs	r1, #8
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	4298      	cmp	r0, r3
 8001044:	d301      	bcc.n	800104a <__clzsi2+0x22>
 8001046:	0900      	lsrs	r0, r0, #4
 8001048:	3904      	subs	r1, #4
 800104a:	a202      	add	r2, pc, #8	; (adr r2, 8001054 <__clzsi2+0x2c>)
 800104c:	5c10      	ldrb	r0, [r2, r0]
 800104e:	1840      	adds	r0, r0, r1
 8001050:	4770      	bx	lr
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	02020304 	.word	0x02020304
 8001058:	01010101 	.word	0x01010101
	...

08001064 <__eqdf2>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	464e      	mov	r6, r9
 8001068:	4645      	mov	r5, r8
 800106a:	46de      	mov	lr, fp
 800106c:	4657      	mov	r7, sl
 800106e:	4690      	mov	r8, r2
 8001070:	b5e0      	push	{r5, r6, r7, lr}
 8001072:	0017      	movs	r7, r2
 8001074:	031a      	lsls	r2, r3, #12
 8001076:	0b12      	lsrs	r2, r2, #12
 8001078:	0005      	movs	r5, r0
 800107a:	4684      	mov	ip, r0
 800107c:	4819      	ldr	r0, [pc, #100]	; (80010e4 <__eqdf2+0x80>)
 800107e:	030e      	lsls	r6, r1, #12
 8001080:	004c      	lsls	r4, r1, #1
 8001082:	4691      	mov	r9, r2
 8001084:	005a      	lsls	r2, r3, #1
 8001086:	0fdb      	lsrs	r3, r3, #31
 8001088:	469b      	mov	fp, r3
 800108a:	0b36      	lsrs	r6, r6, #12
 800108c:	0d64      	lsrs	r4, r4, #21
 800108e:	0fc9      	lsrs	r1, r1, #31
 8001090:	0d52      	lsrs	r2, r2, #21
 8001092:	4284      	cmp	r4, r0
 8001094:	d019      	beq.n	80010ca <__eqdf2+0x66>
 8001096:	4282      	cmp	r2, r0
 8001098:	d010      	beq.n	80010bc <__eqdf2+0x58>
 800109a:	2001      	movs	r0, #1
 800109c:	4294      	cmp	r4, r2
 800109e:	d10e      	bne.n	80010be <__eqdf2+0x5a>
 80010a0:	454e      	cmp	r6, r9
 80010a2:	d10c      	bne.n	80010be <__eqdf2+0x5a>
 80010a4:	2001      	movs	r0, #1
 80010a6:	45c4      	cmp	ip, r8
 80010a8:	d109      	bne.n	80010be <__eqdf2+0x5a>
 80010aa:	4559      	cmp	r1, fp
 80010ac:	d017      	beq.n	80010de <__eqdf2+0x7a>
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	d105      	bne.n	80010be <__eqdf2+0x5a>
 80010b2:	0030      	movs	r0, r6
 80010b4:	4328      	orrs	r0, r5
 80010b6:	1e43      	subs	r3, r0, #1
 80010b8:	4198      	sbcs	r0, r3
 80010ba:	e000      	b.n	80010be <__eqdf2+0x5a>
 80010bc:	2001      	movs	r0, #1
 80010be:	bcf0      	pop	{r4, r5, r6, r7}
 80010c0:	46bb      	mov	fp, r7
 80010c2:	46b2      	mov	sl, r6
 80010c4:	46a9      	mov	r9, r5
 80010c6:	46a0      	mov	r8, r4
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	0033      	movs	r3, r6
 80010cc:	2001      	movs	r0, #1
 80010ce:	432b      	orrs	r3, r5
 80010d0:	d1f5      	bne.n	80010be <__eqdf2+0x5a>
 80010d2:	42a2      	cmp	r2, r4
 80010d4:	d1f3      	bne.n	80010be <__eqdf2+0x5a>
 80010d6:	464b      	mov	r3, r9
 80010d8:	433b      	orrs	r3, r7
 80010da:	d1f0      	bne.n	80010be <__eqdf2+0x5a>
 80010dc:	e7e2      	b.n	80010a4 <__eqdf2+0x40>
 80010de:	2000      	movs	r0, #0
 80010e0:	e7ed      	b.n	80010be <__eqdf2+0x5a>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	000007ff 	.word	0x000007ff

080010e8 <__gedf2>:
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	4647      	mov	r7, r8
 80010ec:	46ce      	mov	lr, r9
 80010ee:	0004      	movs	r4, r0
 80010f0:	0018      	movs	r0, r3
 80010f2:	0016      	movs	r6, r2
 80010f4:	031b      	lsls	r3, r3, #12
 80010f6:	0b1b      	lsrs	r3, r3, #12
 80010f8:	4d2d      	ldr	r5, [pc, #180]	; (80011b0 <__gedf2+0xc8>)
 80010fa:	004a      	lsls	r2, r1, #1
 80010fc:	4699      	mov	r9, r3
 80010fe:	b580      	push	{r7, lr}
 8001100:	0043      	lsls	r3, r0, #1
 8001102:	030f      	lsls	r7, r1, #12
 8001104:	46a4      	mov	ip, r4
 8001106:	46b0      	mov	r8, r6
 8001108:	0b3f      	lsrs	r7, r7, #12
 800110a:	0d52      	lsrs	r2, r2, #21
 800110c:	0fc9      	lsrs	r1, r1, #31
 800110e:	0d5b      	lsrs	r3, r3, #21
 8001110:	0fc0      	lsrs	r0, r0, #31
 8001112:	42aa      	cmp	r2, r5
 8001114:	d021      	beq.n	800115a <__gedf2+0x72>
 8001116:	42ab      	cmp	r3, r5
 8001118:	d013      	beq.n	8001142 <__gedf2+0x5a>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d122      	bne.n	8001164 <__gedf2+0x7c>
 800111e:	433c      	orrs	r4, r7
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <__gedf2+0x42>
 8001124:	464d      	mov	r5, r9
 8001126:	432e      	orrs	r6, r5
 8001128:	d022      	beq.n	8001170 <__gedf2+0x88>
 800112a:	2c00      	cmp	r4, #0
 800112c:	d010      	beq.n	8001150 <__gedf2+0x68>
 800112e:	4281      	cmp	r1, r0
 8001130:	d022      	beq.n	8001178 <__gedf2+0x90>
 8001132:	2002      	movs	r0, #2
 8001134:	3901      	subs	r1, #1
 8001136:	4008      	ands	r0, r1
 8001138:	3801      	subs	r0, #1
 800113a:	bcc0      	pop	{r6, r7}
 800113c:	46b9      	mov	r9, r7
 800113e:	46b0      	mov	r8, r6
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001142:	464d      	mov	r5, r9
 8001144:	432e      	orrs	r6, r5
 8001146:	d129      	bne.n	800119c <__gedf2+0xb4>
 8001148:	2a00      	cmp	r2, #0
 800114a:	d1f0      	bne.n	800112e <__gedf2+0x46>
 800114c:	433c      	orrs	r4, r7
 800114e:	d1ee      	bne.n	800112e <__gedf2+0x46>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1f2      	bne.n	800113a <__gedf2+0x52>
 8001154:	2001      	movs	r0, #1
 8001156:	4240      	negs	r0, r0
 8001158:	e7ef      	b.n	800113a <__gedf2+0x52>
 800115a:	003d      	movs	r5, r7
 800115c:	4325      	orrs	r5, r4
 800115e:	d11d      	bne.n	800119c <__gedf2+0xb4>
 8001160:	4293      	cmp	r3, r2
 8001162:	d0ee      	beq.n	8001142 <__gedf2+0x5a>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e2      	bne.n	800112e <__gedf2+0x46>
 8001168:	464c      	mov	r4, r9
 800116a:	4326      	orrs	r6, r4
 800116c:	d1df      	bne.n	800112e <__gedf2+0x46>
 800116e:	e7e0      	b.n	8001132 <__gedf2+0x4a>
 8001170:	2000      	movs	r0, #0
 8001172:	2c00      	cmp	r4, #0
 8001174:	d0e1      	beq.n	800113a <__gedf2+0x52>
 8001176:	e7dc      	b.n	8001132 <__gedf2+0x4a>
 8001178:	429a      	cmp	r2, r3
 800117a:	dc0a      	bgt.n	8001192 <__gedf2+0xaa>
 800117c:	dbe8      	blt.n	8001150 <__gedf2+0x68>
 800117e:	454f      	cmp	r7, r9
 8001180:	d8d7      	bhi.n	8001132 <__gedf2+0x4a>
 8001182:	d00e      	beq.n	80011a2 <__gedf2+0xba>
 8001184:	2000      	movs	r0, #0
 8001186:	454f      	cmp	r7, r9
 8001188:	d2d7      	bcs.n	800113a <__gedf2+0x52>
 800118a:	2900      	cmp	r1, #0
 800118c:	d0e2      	beq.n	8001154 <__gedf2+0x6c>
 800118e:	0008      	movs	r0, r1
 8001190:	e7d3      	b.n	800113a <__gedf2+0x52>
 8001192:	4243      	negs	r3, r0
 8001194:	4158      	adcs	r0, r3
 8001196:	0040      	lsls	r0, r0, #1
 8001198:	3801      	subs	r0, #1
 800119a:	e7ce      	b.n	800113a <__gedf2+0x52>
 800119c:	2002      	movs	r0, #2
 800119e:	4240      	negs	r0, r0
 80011a0:	e7cb      	b.n	800113a <__gedf2+0x52>
 80011a2:	45c4      	cmp	ip, r8
 80011a4:	d8c5      	bhi.n	8001132 <__gedf2+0x4a>
 80011a6:	2000      	movs	r0, #0
 80011a8:	45c4      	cmp	ip, r8
 80011aa:	d2c6      	bcs.n	800113a <__gedf2+0x52>
 80011ac:	e7ed      	b.n	800118a <__gedf2+0xa2>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	000007ff 	.word	0x000007ff

080011b4 <__ledf2>:
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	4647      	mov	r7, r8
 80011b8:	46ce      	mov	lr, r9
 80011ba:	0004      	movs	r4, r0
 80011bc:	0018      	movs	r0, r3
 80011be:	0016      	movs	r6, r2
 80011c0:	031b      	lsls	r3, r3, #12
 80011c2:	0b1b      	lsrs	r3, r3, #12
 80011c4:	4d2c      	ldr	r5, [pc, #176]	; (8001278 <__ledf2+0xc4>)
 80011c6:	004a      	lsls	r2, r1, #1
 80011c8:	4699      	mov	r9, r3
 80011ca:	b580      	push	{r7, lr}
 80011cc:	0043      	lsls	r3, r0, #1
 80011ce:	030f      	lsls	r7, r1, #12
 80011d0:	46a4      	mov	ip, r4
 80011d2:	46b0      	mov	r8, r6
 80011d4:	0b3f      	lsrs	r7, r7, #12
 80011d6:	0d52      	lsrs	r2, r2, #21
 80011d8:	0fc9      	lsrs	r1, r1, #31
 80011da:	0d5b      	lsrs	r3, r3, #21
 80011dc:	0fc0      	lsrs	r0, r0, #31
 80011de:	42aa      	cmp	r2, r5
 80011e0:	d00d      	beq.n	80011fe <__ledf2+0x4a>
 80011e2:	42ab      	cmp	r3, r5
 80011e4:	d010      	beq.n	8001208 <__ledf2+0x54>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d127      	bne.n	800123a <__ledf2+0x86>
 80011ea:	433c      	orrs	r4, r7
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d111      	bne.n	8001214 <__ledf2+0x60>
 80011f0:	464d      	mov	r5, r9
 80011f2:	432e      	orrs	r6, r5
 80011f4:	d10e      	bne.n	8001214 <__ledf2+0x60>
 80011f6:	2000      	movs	r0, #0
 80011f8:	2c00      	cmp	r4, #0
 80011fa:	d015      	beq.n	8001228 <__ledf2+0x74>
 80011fc:	e00e      	b.n	800121c <__ledf2+0x68>
 80011fe:	003d      	movs	r5, r7
 8001200:	4325      	orrs	r5, r4
 8001202:	d110      	bne.n	8001226 <__ledf2+0x72>
 8001204:	4293      	cmp	r3, r2
 8001206:	d118      	bne.n	800123a <__ledf2+0x86>
 8001208:	464d      	mov	r5, r9
 800120a:	432e      	orrs	r6, r5
 800120c:	d10b      	bne.n	8001226 <__ledf2+0x72>
 800120e:	2a00      	cmp	r2, #0
 8001210:	d102      	bne.n	8001218 <__ledf2+0x64>
 8001212:	433c      	orrs	r4, r7
 8001214:	2c00      	cmp	r4, #0
 8001216:	d00b      	beq.n	8001230 <__ledf2+0x7c>
 8001218:	4281      	cmp	r1, r0
 800121a:	d014      	beq.n	8001246 <__ledf2+0x92>
 800121c:	2002      	movs	r0, #2
 800121e:	3901      	subs	r1, #1
 8001220:	4008      	ands	r0, r1
 8001222:	3801      	subs	r0, #1
 8001224:	e000      	b.n	8001228 <__ledf2+0x74>
 8001226:	2002      	movs	r0, #2
 8001228:	bcc0      	pop	{r6, r7}
 800122a:	46b9      	mov	r9, r7
 800122c:	46b0      	mov	r8, r6
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f9      	bne.n	8001228 <__ledf2+0x74>
 8001234:	2001      	movs	r0, #1
 8001236:	4240      	negs	r0, r0
 8001238:	e7f6      	b.n	8001228 <__ledf2+0x74>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ec      	bne.n	8001218 <__ledf2+0x64>
 800123e:	464c      	mov	r4, r9
 8001240:	4326      	orrs	r6, r4
 8001242:	d1e9      	bne.n	8001218 <__ledf2+0x64>
 8001244:	e7ea      	b.n	800121c <__ledf2+0x68>
 8001246:	429a      	cmp	r2, r3
 8001248:	dd04      	ble.n	8001254 <__ledf2+0xa0>
 800124a:	4243      	negs	r3, r0
 800124c:	4158      	adcs	r0, r3
 800124e:	0040      	lsls	r0, r0, #1
 8001250:	3801      	subs	r0, #1
 8001252:	e7e9      	b.n	8001228 <__ledf2+0x74>
 8001254:	429a      	cmp	r2, r3
 8001256:	dbeb      	blt.n	8001230 <__ledf2+0x7c>
 8001258:	454f      	cmp	r7, r9
 800125a:	d8df      	bhi.n	800121c <__ledf2+0x68>
 800125c:	d006      	beq.n	800126c <__ledf2+0xb8>
 800125e:	2000      	movs	r0, #0
 8001260:	454f      	cmp	r7, r9
 8001262:	d2e1      	bcs.n	8001228 <__ledf2+0x74>
 8001264:	2900      	cmp	r1, #0
 8001266:	d0e5      	beq.n	8001234 <__ledf2+0x80>
 8001268:	0008      	movs	r0, r1
 800126a:	e7dd      	b.n	8001228 <__ledf2+0x74>
 800126c:	45c4      	cmp	ip, r8
 800126e:	d8d5      	bhi.n	800121c <__ledf2+0x68>
 8001270:	2000      	movs	r0, #0
 8001272:	45c4      	cmp	ip, r8
 8001274:	d2d8      	bcs.n	8001228 <__ledf2+0x74>
 8001276:	e7f5      	b.n	8001264 <__ledf2+0xb0>
 8001278:	000007ff 	.word	0x000007ff

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash inteulace and the Systick. */
  HAL_Init();
 8001280:	f001 fa46 	bl	8002710 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f8a0 	bl	80013c8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 fb44 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f000 fb24 	bl	80018d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001290:	f000 faf2 	bl	8001878 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001294:	f000 f930 	bl	80014f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001298:	f000 fa42 	bl	8001720 <MX_TIM3_Init>
  MX_TIM2_Init();
 800129c:	f000 f9ec 	bl	8001678 <MX_TIM2_Init>
  MX_TIM15_Init();
 80012a0:	f000 fa94 	bl	80017cc <MX_TIM15_Init>

  MX_SPI1_Init();
 80012a4:	f000 f8e8 	bl	8001478 <MX_SPI1_Init>

  HAL_UART_Receive_DMA(&huart2, rxdata, sizeof(rxdata));
 80012a8:	4937      	ldr	r1, [pc, #220]	; (8001388 <main+0x10c>)
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <main+0x110>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	0018      	movs	r0, r3
 80012b0:	f004 fa9e 	bl	80057f0 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim15);
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <main+0x114>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 f8c4 	bl	8004444 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <main+0x118>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f003 f8c0 	bl	8004444 <HAL_TIM_Base_Start_IT>


  HAL_Delay(3000);
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <main+0x11c>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 fa86 	bl	80027d8 <HAL_Delay>
  TIM1->CCR1 = 175;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <main+0x120>)
 80012ce:	22af      	movs	r2, #175	; 0xaf
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR3 = 175;
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <main+0x120>)
 80012d4:	22af      	movs	r2, #175	; 0xaf
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->ARR = 350;
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <main+0x120>)
 80012da:	22af      	movs	r2, #175	; 0xaf
 80012dc:	0052      	lsls	r2, r2, #1
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <main+0x124>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	0018      	movs	r0, r3
 80012e6:	f003 fa3d 	bl	8004764 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <main+0x124>)
 80012ec:	2108      	movs	r1, #8
 80012ee:	0018      	movs	r0, r3
 80012f0:	f003 fa38 	bl	8004764 <HAL_TIM_PWM_Stop>
  HAL_UART_Transmit(&huart2, decel, sizeof(decel), 100);
 80012f4:	492b      	ldr	r1, [pc, #172]	; (80013a4 <main+0x128>)
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <main+0x110>)
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	2214      	movs	r2, #20
 80012fc:	f004 f9d8 	bl	80056b0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, decel, sizeof(decel), 100);
 8001300:	4928      	ldr	r1, [pc, #160]	; (80013a4 <main+0x128>)
 8001302:	4822      	ldr	r0, [pc, #136]	; (800138c <main+0x110>)
 8001304:	2364      	movs	r3, #100	; 0x64
 8001306:	2214      	movs	r2, #20
 8001308:	f004 f9d2 	bl	80056b0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, decel, sizeof(decel), 100);
 800130c:	4925      	ldr	r1, [pc, #148]	; (80013a4 <main+0x128>)
 800130e:	481f      	ldr	r0, [pc, #124]	; (800138c <main+0x110>)
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	2214      	movs	r2, #20
 8001314:	f004 f9cc 	bl	80056b0 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(down_flag){down();}
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <main+0x12c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <main+0xaa>
 8001320:	f000 fc64 	bl	8001bec <down>
 8001324:	e7f8      	b.n	8001318 <main+0x9c>
	  else if(up_flag){up();}
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <main+0x130>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <main+0xb8>
 800132e:	f000 fc8d 	bl	8001c4c <up>
 8001332:	e7f1      	b.n	8001318 <main+0x9c>
	  else if(left_flag){left();}
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <main+0x134>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <main+0xc6>
 800133c:	f000 fcb6 	bl	8001cac <left>
 8001340:	e7ea      	b.n	8001318 <main+0x9c>
	  else if(righ_flag){righ();}
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <main+0x138>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <main+0xd4>
 800134a:	f000 fcd5 	bl	8001cf8 <righ>
 800134e:	e7e3      	b.n	8001318 <main+0x9c>
	  else if(dl_flag){dl();}
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <main+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <main+0xe2>
 8001358:	f000 fcf4 	bl	8001d44 <dl>
 800135c:	e7dc      	b.n	8001318 <main+0x9c>
	  else if(ur_flag){ur();}
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <main+0x140>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <main+0xf0>
 8001366:	f000 fd0b 	bl	8001d80 <ur>
 800136a:	e7d5      	b.n	8001318 <main+0x9c>
	  else if(dr_flag){dr();}
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <main+0x144>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <main+0xfe>
 8001374:	f000 fd22 	bl	8001dbc <dr>
 8001378:	e7ce      	b.n	8001318 <main+0x9c>
	  else if(ul_flag){ul();}
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <main+0x148>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0ca      	beq.n	8001318 <main+0x9c>
 8001382:	f000 fd39 	bl	8001df8 <ul>
	  if(down_flag){down();}
 8001386:	e7c7      	b.n	8001318 <main+0x9c>
 8001388:	200002c0 	.word	0x200002c0
 800138c:	200001f4 	.word	0x200001f4
 8001390:	200001ac 	.word	0x200001ac
 8001394:	20000164 	.word	0x20000164
 8001398:	00000bb8 	.word	0x00000bb8
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	200000d4 	.word	0x200000d4
 80013a4:	20000020 	.word	0x20000020
 80013a8:	200002c4 	.word	0x200002c4
 80013ac:	200002c8 	.word	0x200002c8
 80013b0:	200002cc 	.word	0x200002cc
 80013b4:	200002d0 	.word	0x200002d0
 80013b8:	200002d4 	.word	0x200002d4
 80013bc:	200002d8 	.word	0x200002d8
 80013c0:	200002dc 	.word	0x200002dc
 80013c4:	200002e0 	.word	0x200002e0

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b099      	sub	sp, #100	; 0x64
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	242c      	movs	r4, #44	; 0x2c
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	0018      	movs	r0, r3
 80013d4:	2334      	movs	r3, #52	; 0x34
 80013d6:	001a      	movs	r2, r3
 80013d8:	2100      	movs	r1, #0
 80013da:	f005 fb7e 	bl	8006ada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013de:	231c      	movs	r3, #28
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	0018      	movs	r0, r3
 80013e4:	2310      	movs	r3, #16
 80013e6:	001a      	movs	r2, r3
 80013e8:	2100      	movs	r1, #0
 80013ea:	f005 fb76 	bl	8006ada <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ee:	003b      	movs	r3, r7
 80013f0:	0018      	movs	r0, r3
 80013f2:	231c      	movs	r3, #28
 80013f4:	001a      	movs	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f005 fb6f 	bl	8006ada <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fc:	0021      	movs	r1, r4
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2202      	movs	r2, #2
 8001402:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2201      	movs	r2, #1
 8001408:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2210      	movs	r2, #16
 800140e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001416:	187b      	adds	r3, r7, r1
 8001418:	0018      	movs	r0, r3
 800141a:	f001 fe43 	bl	80030a4 <HAL_RCC_OscConfig>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001422:	f000 ff71 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	211c      	movs	r1, #28
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2207      	movs	r2, #7
 800142c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2100      	movs	r1, #0
 8001444:	0018      	movs	r0, r3
 8001446:	f002 f9b3 	bl	80037b0 <HAL_RCC_ClockConfig>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800144e:	f000 ff5b 	bl	8002308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001452:	003b      	movs	r3, r7
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	003b      	movs	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145e:	003b      	movs	r3, r7
 8001460:	0018      	movs	r0, r3
 8001462:	f002 fb11 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800146a:	f000 ff4d 	bl	8002308 <Error_Handler>
  }
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b019      	add	sp, #100	; 0x64
 8001474:	bd90      	pop	{r4, r7, pc}
	...

08001478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_SPI1_Init+0x78>)
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <MX_SPI1_Init+0x7c>)
 8001480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_SPI1_Init+0x78>)
 8001484:	2282      	movs	r2, #130	; 0x82
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_SPI1_Init+0x78>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	0212      	lsls	r2, r2, #8
 8001490:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_SPI1_Init+0x78>)
 8001494:	22e0      	movs	r2, #224	; 0xe0
 8001496:	00d2      	lsls	r2, r2, #3
 8001498:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_SPI1_Init+0x78>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014b0:	2238      	movs	r2, #56	; 0x38
 80014b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <MX_SPI1_Init+0x78>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f002 fbd4 	bl	8003c88 <HAL_SPI_Init>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80014e4:	f000 ff10 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000070 	.word	0x20000070
 80014f4:	40013000 	.word	0x40013000

080014f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	; 0x58
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	2348      	movs	r3, #72	; 0x48
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	0018      	movs	r0, r3
 8001504:	2310      	movs	r3, #16
 8001506:	001a      	movs	r2, r3
 8001508:	2100      	movs	r1, #0
 800150a:	f005 fae6 	bl	8006ada <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	2340      	movs	r3, #64	; 0x40
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	0018      	movs	r0, r3
 8001514:	2308      	movs	r3, #8
 8001516:	001a      	movs	r2, r3
 8001518:	2100      	movs	r1, #0
 800151a:	f005 fade 	bl	8006ada <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	2324      	movs	r3, #36	; 0x24
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	0018      	movs	r0, r3
 8001524:	231c      	movs	r3, #28
 8001526:	001a      	movs	r2, r3
 8001528:	2100      	movs	r1, #0
 800152a:	f005 fad6 	bl	8006ada <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	0018      	movs	r0, r3
 8001532:	2320      	movs	r3, #32
 8001534:	001a      	movs	r2, r3
 8001536:	2100      	movs	r1, #0
 8001538:	f005 facf 	bl	8006ada <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153c:	4b4c      	ldr	r3, [pc, #304]	; (8001670 <MX_TIM1_Init+0x178>)
 800153e:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <MX_TIM1_Init+0x17c>)
 8001540:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001542:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <MX_TIM1_Init+0x178>)
 8001544:	2207      	movs	r2, #7
 8001546:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b49      	ldr	r3, [pc, #292]	; (8001670 <MX_TIM1_Init+0x178>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800154e:	4b48      	ldr	r3, [pc, #288]	; (8001670 <MX_TIM1_Init+0x178>)
 8001550:	22fa      	movs	r2, #250	; 0xfa
 8001552:	00d2      	lsls	r2, r2, #3
 8001554:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <MX_TIM1_Init+0x178>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <MX_TIM1_Init+0x178>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <MX_TIM1_Init+0x178>)
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <MX_TIM1_Init+0x178>)
 800156a:	0018      	movs	r0, r3
 800156c:	f002 ff1a 	bl	80043a4 <HAL_TIM_Base_Init>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001574:	f000 fec8 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	2148      	movs	r1, #72	; 0x48
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	0152      	lsls	r2, r2, #5
 8001580:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001582:	187a      	adds	r2, r7, r1
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <MX_TIM1_Init+0x178>)
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f003 fb43 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001592:	f000 feb9 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <MX_TIM1_Init+0x178>)
 8001598:	0018      	movs	r0, r3
 800159a:	f002 ffd3 	bl	8004544 <HAL_TIM_PWM_Init>
 800159e:	1e03      	subs	r3, r0, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80015a2:	f000 feb1 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b4:	187a      	adds	r2, r7, r1
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <MX_TIM1_Init+0x178>)
 80015b8:	0011      	movs	r1, r2
 80015ba:	0018      	movs	r0, r3
 80015bc:	f003 ff58 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80015c4:	f000 fea0 	bl	8002308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2124      	movs	r1, #36	; 0x24
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2260      	movs	r2, #96	; 0x60
 80015ce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	22fa      	movs	r2, #250	; 0xfa
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f6:	1879      	adds	r1, r7, r1
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM1_Init+0x178>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	0018      	movs	r0, r3
 80015fe:	f003 fa43 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001606:	f000 fe7f 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800160a:	2324      	movs	r3, #36	; 0x24
 800160c:	18f9      	adds	r1, r7, r3
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM1_Init+0x178>)
 8001610:	2208      	movs	r2, #8
 8001612:	0018      	movs	r0, r3
 8001614:	f003 fa38 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800161c:	f000 fe74 	bl	8002308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	0192      	lsls	r2, r2, #6
 8001644:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800164c:	1d3a      	adds	r2, r7, #4
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_TIM1_Init+0x178>)
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f003 ff6a 	bl	800552c <HAL_TIMEx_ConfigBreakDeadTime>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 800165c:	f000 fe54 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <MX_TIM1_Init+0x178>)
 8001662:	0018      	movs	r0, r3
 8001664:	f000 ff3c 	bl	80024e0 <HAL_TIM_MspPostInit>

}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b016      	add	sp, #88	; 0x58
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200000d4 	.word	0x200000d4
 8001674:	40012c00 	.word	0x40012c00

08001678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	2308      	movs	r3, #8
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	0018      	movs	r0, r3
 8001684:	2310      	movs	r3, #16
 8001686:	001a      	movs	r2, r3
 8001688:	2100      	movs	r1, #0
 800168a:	f005 fa26 	bl	8006ada <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168e:	003b      	movs	r3, r7
 8001690:	0018      	movs	r0, r3
 8001692:	2308      	movs	r3, #8
 8001694:	001a      	movs	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f005 fa1f 	bl	8006ada <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_TIM2_Init+0xa0>)
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	05d2      	lsls	r2, r2, #23
 80016a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016a6:	2207      	movs	r2, #7
 80016a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <MX_TIM2_Init+0xa4>)
 80016b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016c4:	0018      	movs	r0, r3
 80016c6:	f002 fe6d 	bl	80043a4 <HAL_TIM_Base_Init>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016ce:	f000 fe1b 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	2108      	movs	r1, #8
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	0152      	lsls	r2, r2, #5
 80016da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016dc:	187a      	adds	r2, r7, r1
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_TIM2_Init+0xa0>)
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f003 fa96 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016ec:	f000 fe0c 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f0:	003b      	movs	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	003b      	movs	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fc:	003a      	movs	r2, r7
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_TIM2_Init+0xa0>)
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f003 feb4 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800170c:	f000 fdfc 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b006      	add	sp, #24
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000011c 	.word	0x2000011c
 800171c:	00009c40 	.word	0x00009c40

08001720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	2308      	movs	r3, #8
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	0018      	movs	r0, r3
 800172c:	2310      	movs	r3, #16
 800172e:	001a      	movs	r2, r3
 8001730:	2100      	movs	r1, #0
 8001732:	f005 f9d2 	bl	8006ada <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	003b      	movs	r3, r7
 8001738:	0018      	movs	r0, r3
 800173a:	2308      	movs	r3, #8
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f005 f9cb 	bl	8006ada <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_TIM3_Init+0xa0>)
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MX_TIM3_Init+0xa4>)
 8001748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_TIM3_Init+0xa0>)
 800174c:	2207      	movs	r2, #7
 800174e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_TIM3_Init+0xa0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM3_Init+0xa0>)
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <MX_TIM3_Init+0xa8>)
 800175a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM3_Init+0xa0>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_TIM3_Init+0xa0>)
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM3_Init+0xa0>)
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fe1a 	bl	80043a4 <HAL_TIM_Base_Init>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001774:	f000 fdc8 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	2108      	movs	r1, #8
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	0152      	lsls	r2, r2, #5
 8001780:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001782:	187a      	adds	r2, r7, r1
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_TIM3_Init+0xa0>)
 8001786:	0011      	movs	r1, r2
 8001788:	0018      	movs	r0, r3
 800178a:	f003 fa43 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 800178e:	1e03      	subs	r3, r0, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001792:	f000 fdb9 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	003b      	movs	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	003b      	movs	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a2:	003a      	movs	r2, r7
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_TIM3_Init+0xa0>)
 80017a6:	0011      	movs	r1, r2
 80017a8:	0018      	movs	r0, r3
 80017aa:	f003 fe61 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80017b2:	f000 fda9 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b006      	add	sp, #24
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000164 	.word	0x20000164
 80017c4:	40000400 	.word	0x40000400
 80017c8:	00009c40 	.word	0x00009c40

080017cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	2308      	movs	r3, #8
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	0018      	movs	r0, r3
 80017d8:	2310      	movs	r3, #16
 80017da:	001a      	movs	r2, r3
 80017dc:	2100      	movs	r1, #0
 80017de:	f005 f97c 	bl	8006ada <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e2:	003b      	movs	r3, r7
 80017e4:	0018      	movs	r0, r3
 80017e6:	2308      	movs	r3, #8
 80017e8:	001a      	movs	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f005 f975 	bl	8006ada <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_TIM15_Init+0xa4>)
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <MX_TIM15_Init+0xa8>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <MX_TIM15_Init+0xa4>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_TIM15_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200;
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <MX_TIM15_Init+0xa4>)
 8001804:	22c8      	movs	r2, #200	; 0xc8
 8001806:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_TIM15_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_TIM15_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_TIM15_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_TIM15_Init+0xa4>)
 800181c:	0018      	movs	r0, r3
 800181e:	f002 fdc1 	bl	80043a4 <HAL_TIM_Base_Init>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8001826:	f000 fd6f 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182a:	2108      	movs	r1, #8
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0152      	lsls	r2, r2, #5
 8001832:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001834:	187a      	adds	r2, r7, r1
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_TIM15_Init+0xa4>)
 8001838:	0011      	movs	r1, r2
 800183a:	0018      	movs	r0, r3
 800183c:	f003 f9ea 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 8001840:	1e03      	subs	r3, r0, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001844:	f000 fd60 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	003b      	movs	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	003b      	movs	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001854:	003a      	movs	r2, r7
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_TIM15_Init+0xa4>)
 8001858:	0011      	movs	r1, r2
 800185a:	0018      	movs	r0, r3
 800185c:	f003 fe08 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001864:	f000 fd50 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b006      	add	sp, #24
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200001ac 	.word	0x200001ac
 8001874:	40014000 	.word	0x40014000

08001878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <MX_USART2_UART_Init+0x5c>)
 8001880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 8001884:	22e1      	movs	r2, #225	; 0xe1
 8001886:	0252      	lsls	r2, r2, #9
 8001888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018bc:	0018      	movs	r0, r3
 80018be:	f003 fea3 	bl	8005608 <HAL_UART_Init>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018c6:	f000 fd1f 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200001f4 	.word	0x200001f4
 80018d4:	40004400 	.word	0x40004400

080018d8 <MX_DMA_Init>:
static void MX_DMA_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_DMA_Init+0x38>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_DMA_Init+0x38>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_DMA_Init+0x38>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4013      	ands	r3, r2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2009      	movs	r0, #9
 80018fc:	f001 f83c 	bl	8002978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8001900:	2009      	movs	r0, #9
 8001902:	f001 f84e 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	2414      	movs	r4, #20
 800191c:	193b      	adds	r3, r7, r4
 800191e:	0018      	movs	r0, r3
 8001920:	2314      	movs	r3, #20
 8001922:	001a      	movs	r2, r3
 8001924:	2100      	movs	r1, #0
 8001926:	f005 f8d8 	bl	8006ada <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <MX_GPIO_Init+0x248>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4b8b      	ldr	r3, [pc, #556]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0309      	lsls	r1, r1, #12
 8001934:	430a      	orrs	r2, r1
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <MX_GPIO_Init+0x248>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	031b      	lsls	r3, r3, #12
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001946:	4b85      	ldr	r3, [pc, #532]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	4b84      	ldr	r3, [pc, #528]	; (8001b5c <MX_GPIO_Init+0x248>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	03c9      	lsls	r1, r1, #15
 8001950:	430a      	orrs	r2, r1
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	03db      	lsls	r3, r3, #15
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b7e      	ldr	r3, [pc, #504]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	4b7d      	ldr	r3, [pc, #500]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0289      	lsls	r1, r1, #10
 800196c:	430a      	orrs	r2, r1
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	4b7a      	ldr	r3, [pc, #488]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <MX_GPIO_Init+0x248>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	02c9      	lsls	r1, r1, #11
 8001988:	430a      	orrs	r2, r1
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	4b73      	ldr	r3, [pc, #460]	; (8001b5c <MX_GPIO_Init+0x248>)
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	02db      	lsls	r3, r3, #11
 8001994:	4013      	ands	r3, r2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Test_Pin1_Pin|Test_Pin2_Pin|DIR_A_Pin|DIR_B_Pin, GPIO_PIN_RESET);
 800199a:	23ac      	movs	r3, #172	; 0xac
 800199c:	0119      	lsls	r1, r3, #4
 800199e:	2390      	movs	r3, #144	; 0x90
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	2200      	movs	r2, #0
 80019a4:	0018      	movs	r0, r3
 80019a6:	f001 fb43 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_Pin3_Pin|Test_Pin4_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <MX_GPIO_Init+0x24c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	21b0      	movs	r1, #176	; 0xb0
 80019b0:	0018      	movs	r0, r3
 80019b2:	f001 fb3d 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Test_Pin5_Pin|Test_Pin6_Pin|Test_Pin7_Pin|Test_Pin8_Pin
 80019b6:	496b      	ldr	r1, [pc, #428]	; (8001b64 <MX_GPIO_Init+0x250>)
 80019b8:	4b6b      	ldr	r3, [pc, #428]	; (8001b68 <MX_GPIO_Init+0x254>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 fb37 	bl	8003030 <HAL_GPIO_WritePin>
                          |Test_Pin9_Pin|SPI_Latch_Pin|DIR_IC_Pin|EN_A_Pin
                          |EN_B_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Test_Pin1_Pin Test_Pin2_Pin */
  GPIO_InitStruct.Pin = Test_Pin1_Pin|Test_Pin2_Pin;
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	22c0      	movs	r2, #192	; 0xc0
 80019c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	2201      	movs	r2, #1
 80019cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	193a      	adds	r2, r7, r4
 80019dc:	2390      	movs	r3, #144	; 0x90
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f001 f9ac 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin3_Pin Test_Pin4_Pin */
  GPIO_InitStruct.Pin = Test_Pin3_Pin|Test_Pin4_Pin;
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	2201      	movs	r2, #1
 80019f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	2202      	movs	r2, #2
 80019f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <MX_GPIO_Init+0x24c>)
 8001a04:	0019      	movs	r1, r3
 8001a06:	0010      	movs	r0, r2
 8001a08:	f001 f99a 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin5_Pin Test_Pin6_Pin Test_Pin7_Pin Test_Pin8_Pin
                           Test_Pin9_Pin DIR_IC_Pin OE_Pin */
  GPIO_InitStruct.Pin = Test_Pin5_Pin|Test_Pin6_Pin|Test_Pin7_Pin|Test_Pin8_Pin
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	4a57      	ldr	r2, [pc, #348]	; (8001b6c <MX_GPIO_Init+0x258>)
 8001a10:	601a      	str	r2, [r3, #0]
                          |Test_Pin9_Pin|DIR_IC_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	2201      	movs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <MX_GPIO_Init+0x254>)
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f001 f988 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a30:	0021      	movs	r1, r4
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0212      	lsls	r2, r2, #8
 8001a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	000c      	movs	r4, r1
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2202      	movs	r2, #2
 8001a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <MX_GPIO_Init+0x254>)
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f001 f970 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Sensor_IO1_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_IO1_Pin;
 8001a60:	0021      	movs	r1, r4
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2284      	movs	r2, #132	; 0x84
 8001a6c:	0392      	lsls	r2, r2, #14
 8001a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	000c      	movs	r4, r1
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2201      	movs	r2, #1
 8001a76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_Sensor_IO1_GPIO_Port, &GPIO_InitStruct);
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	4a39      	ldr	r2, [pc, #228]	; (8001b60 <MX_GPIO_Init+0x24c>)
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	0010      	movs	r0, r2
 8001a80:	f001 f95e 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	2201      	movs	r2, #1
 8001a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <MX_GPIO_Init+0x24c>)
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	f001 f94c 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_SW1_Pin Limit_SW2_Pin Limit_SW3_Pin Limit_SW4_Pin */
  GPIO_InitStruct.Pin = Limit_SW1_Pin|Limit_SW2_Pin|Limit_SW3_Pin|Limit_SW4_Pin;
 8001aa8:	0021      	movs	r1, r4
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	22f0      	movs	r2, #240	; 0xf0
 8001aae:	0152      	lsls	r2, r2, #5
 8001ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	000c      	movs	r4, r1
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	2202      	movs	r2, #2
 8001abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	193b      	adds	r3, r7, r4
 8001ac2:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <MX_GPIO_Init+0x24c>)
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	f001 f93a 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_A_Pin DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_A_Pin|DIR_B_Pin;
 8001acc:	0021      	movs	r1, r4
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	22a0      	movs	r2, #160	; 0xa0
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	000c      	movs	r4, r1
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2201      	movs	r2, #1
 8001adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	193a      	adds	r2, r7, r4
 8001aec:	2390      	movs	r3, #144	; 0x90
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	0011      	movs	r1, r2
 8001af2:	0018      	movs	r0, r3
 8001af4:	f001 f924 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Latch_Pin */
  GPIO_InitStruct.Pin = SPI_Latch_Pin;
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	2210      	movs	r2, #16
 8001afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	2201      	movs	r2, #1
 8001b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_Latch_GPIO_Port, &GPIO_InitStruct);
 8001b10:	193b      	adds	r3, r7, r4
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <MX_GPIO_Init+0x254>)
 8001b14:	0019      	movs	r1, r3
 8001b16:	0010      	movs	r0, r2
 8001b18:	f001 f912 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8001b1c:	0021      	movs	r1, r4
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	22c0      	movs	r2, #192	; 0xc0
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2201      	movs	r2, #1
 8001b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2201      	movs	r2, #1
 8001b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <MX_GPIO_Init+0x254>)
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	0010      	movs	r0, r2
 8001b40:	f001 f8fe 	bl	8002d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2007      	movs	r0, #7
 8001b4a:	f000 ff15 	bl	8002978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f000 ff27 	bl	80029a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b00b      	add	sp, #44	; 0x2c
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000800 	.word	0x48000800
 8001b64:	00000fd7 	.word	0x00000fd7
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	00000e47 	.word	0x00000e47

08001b70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	0002      	movs	r2, r0
 8001b78:	1dbb      	adds	r3, r7, #6
 8001b7a:	801a      	strh	r2, [r3, #0]
	//we switched timers, update timer used for ir sensors
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == GPIO_PIN_6)
 8001b7c:	1dbb      	adds	r3, r7, #6
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d114      	bne.n	8001bae <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if(segvalue[6] >= 9){
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b86:	799b      	ldrb	r3, [r3, #6]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d909      	bls.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x30>
			segvalue[7] = segvalue[7] + 1;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b8e:	79db      	ldrb	r3, [r3, #7]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b96:	71da      	strb	r2, [r3, #7]
			segvalue[6] = 0;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	719a      	strb	r2, [r3, #6]
		{
		segvalue[4] = segvalue[4] + 1;
		}
	}

}
 8001b9e:	e01e      	b.n	8001bde <HAL_GPIO_EXTI_Callback+0x6e>
		segvalue[6] = segvalue[6] + 1;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001ba2:	799b      	ldrb	r3, [r3, #6]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001baa:	719a      	strb	r2, [r3, #6]
}
 8001bac:	e017      	b.n	8001bde <HAL_GPIO_EXTI_Callback+0x6e>
	else if(GPIO_Pin == GPIO_PIN_7)
 8001bae:	1dbb      	adds	r3, r7, #6
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	2b80      	cmp	r3, #128	; 0x80
 8001bb4:	d113      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x6e>
		if(segvalue[4] >= 9){
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d909      	bls.n	8001bd2 <HAL_GPIO_EXTI_Callback+0x62>
			segvalue[5] = segvalue[5] + 1;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bc0:	795b      	ldrb	r3, [r3, #5]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bc8:	715a      	strb	r2, [r3, #5]
			segvalue[4] = 0;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	711a      	strb	r2, [r3, #4]
}
 8001bd0:	e005      	b.n	8001bde <HAL_GPIO_EXTI_Callback+0x6e>
		segvalue[4] = segvalue[4] + 1;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bd4:	791b      	ldrb	r3, [r3, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bdc:	711a      	strb	r2, [r3, #4]
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	200002e4 	.word	0x200002e4

08001bec <down>:
	arr_value = (((speed_data - 0) * arr_range) / speed_data_range);
	return(arr_value);
}

void down()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <down+0x58>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f002 fdb5 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <down+0x58>)
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f002 fdb0 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	0099      	lsls	r1, r3, #2
 8001c08:	2390      	movs	r3, #144	; 0x90
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f001 fa0e 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), SET);
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	0119      	lsls	r1, r3, #4
 8001c18:	2390      	movs	r3, #144	; 0x90
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f001 fa06 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <down+0x58>)
 8001c26:	2100      	movs	r1, #0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f002 fce3 	bl	80045f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <down+0x58>)
 8001c30:	2108      	movs	r1, #8
 8001c32:	0018      	movs	r0, r3
 8001c34:	f002 fcde 	bl	80045f4 <HAL_TIM_PWM_Start>
	down_flag=0;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <down+0x5c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
	//uint32_t time = pulses * .4; // * 0.4 * 1000;	//time in s

}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200000d4 	.word	0x200000d4
 8001c48:	200002c4 	.word	0x200002c4

08001c4c <up>:

void up()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <up+0x58>)
 8001c52:	2100      	movs	r1, #0
 8001c54:	0018      	movs	r0, r3
 8001c56:	f002 fd85 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <up+0x58>)
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f002 fd80 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	0099      	lsls	r1, r3, #2
 8001c68:	2390      	movs	r3, #144	; 0x90
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 f9de 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), RESET);
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	0119      	lsls	r1, r3, #4
 8001c78:	2390      	movs	r3, #144	; 0x90
 8001c7a:	05db      	lsls	r3, r3, #23
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f001 f9d6 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <up+0x58>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f002 fcb3 	bl	80045f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <up+0x58>)
 8001c90:	2108      	movs	r1, #8
 8001c92:	0018      	movs	r0, r3
 8001c94:	f002 fcae 	bl	80045f4 <HAL_TIM_PWM_Start>
	up_flag=0;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <up+0x5c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
	//uint32_t time = pulses * .4; // * 0.4 * 1000;	//time in s
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200000d4 	.word	0x200000d4
 8001ca8:	200002c8 	.word	0x200002c8

08001cac <left>:

void left()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	2390      	movs	r3, #144	; 0x90
 8001cb6:	05db      	lsls	r3, r3, #23
 8001cb8:	2201      	movs	r2, #1
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f001 f9b8 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), RESET);
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	0119      	lsls	r1, r3, #4
 8001cc4:	2390      	movs	r3, #144	; 0x90
 8001cc6:	05db      	lsls	r3, r3, #23
 8001cc8:	2200      	movs	r2, #0
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f001 f9b0 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <left+0x44>)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f002 fc8d 	bl	80045f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <left+0x44>)
 8001cdc:	2108      	movs	r1, #8
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f002 fc88 	bl	80045f4 <HAL_TIM_PWM_Start>
	left_flag=0;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <left+0x48>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200000d4 	.word	0x200000d4
 8001cf4:	200002cc 	.word	0x200002cc

08001cf8 <righ>:

void righ()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	2390      	movs	r3, #144	; 0x90
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	2200      	movs	r2, #0
 8001d06:	0018      	movs	r0, r3
 8001d08:	f001 f992 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), SET);
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	0119      	lsls	r1, r3, #4
 8001d10:	2390      	movs	r3, #144	; 0x90
 8001d12:	05db      	lsls	r3, r3, #23
 8001d14:	2201      	movs	r2, #1
 8001d16:	0018      	movs	r0, r3
 8001d18:	f001 f98a 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <righ+0x44>)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	0018      	movs	r0, r3
 8001d22:	f002 fc67 	bl	80045f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <righ+0x44>)
 8001d28:	2108      	movs	r1, #8
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f002 fc62 	bl	80045f4 <HAL_TIM_PWM_Start>
	righ_flag=0;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <righ+0x48>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200000d4 	.word	0x200000d4
 8001d40:	200002d0 	.word	0x200002d0

08001d44 <dl>:

void dl()
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <dl+0x34>)
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f002 fd09 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	0099      	lsls	r1, r3, #2
 8001d56:	2390      	movs	r3, #144	; 0x90
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f001 f967 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <dl+0x34>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	0018      	movs	r0, r3
 8001d68:	f002 fc44 	bl	80045f4 <HAL_TIM_PWM_Start>
	dl_flag=0;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <dl+0x38>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200000d4 	.word	0x200000d4
 8001d7c:	200002d4 	.word	0x200002d4

08001d80 <ur>:

void ur()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <ur+0x34>)
 8001d86:	2108      	movs	r1, #8
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f002 fceb 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	0099      	lsls	r1, r3, #2
 8001d92:	2390      	movs	r3, #144	; 0x90
 8001d94:	05db      	lsls	r3, r3, #23
 8001d96:	2200      	movs	r2, #0
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f001 f949 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <ur+0x34>)
 8001da0:	2100      	movs	r1, #0
 8001da2:	0018      	movs	r0, r3
 8001da4:	f002 fc26 	bl	80045f4 <HAL_TIM_PWM_Start>
	ur_flag=0;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <ur+0x38>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200000d4 	.word	0x200000d4
 8001db8:	200002d8 	.word	0x200002d8

08001dbc <dr>:

void dr()
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <dr+0x34>)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f002 fccd 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), SET);
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	0119      	lsls	r1, r3, #4
 8001dce:	2390      	movs	r3, #144	; 0x90
 8001dd0:	05db      	lsls	r3, r3, #23
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f001 f92b 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <dr+0x34>)
 8001ddc:	2108      	movs	r1, #8
 8001dde:	0018      	movs	r0, r3
 8001de0:	f002 fc08 	bl	80045f4 <HAL_TIM_PWM_Start>
	dr_flag=0;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <dr+0x38>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200000d4 	.word	0x200000d4
 8001df4:	200002dc 	.word	0x200002dc

08001df8 <ul>:

void ul()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <ul+0x34>)
 8001dfe:	2100      	movs	r1, #0
 8001e00:	0018      	movs	r0, r3
 8001e02:	f002 fcaf 	bl	8004764 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_11), RESET);
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	0119      	lsls	r1, r3, #4
 8001e0a:	2390      	movs	r3, #144	; 0x90
 8001e0c:	05db      	lsls	r3, r3, #23
 8001e0e:	2200      	movs	r2, #0
 8001e10:	0018      	movs	r0, r3
 8001e12:	f001 f90d 	bl	8003030 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <ul+0x34>)
 8001e18:	2108      	movs	r1, #8
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f002 fbea 	bl	80045f4 <HAL_TIM_PWM_Start>
	ul_flag=0;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <ul+0x38>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200000d4 	.word	0x200000d4
 8001e30:	200002e0 	.word	0x200002e0

08001e34 <reset_and_accelerate>:

void reset_and_accelerate()
{
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Start_IT(&htim2);
	starting_ccr = 350;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <reset_and_accelerate+0x64>)
 8001e3a:	22af      	movs	r2, #175	; 0xaf
 8001e3c:	0052      	lsls	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
	TIM1->CCR1 = (0.5) * starting_ccr;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <reset_and_accelerate+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff f881 	bl	8000f4c <__aeabi_i2d>
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <reset_and_accelerate+0x68>)
 8001e4e:	f7fe fa03 	bl	8000258 <__aeabi_dmul>
 8001e52:	0002      	movs	r2, r0
 8001e54:	000b      	movs	r3, r1
 8001e56:	4c12      	ldr	r4, [pc, #72]	; (8001ea0 <reset_and_accelerate+0x6c>)
 8001e58:	0010      	movs	r0, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	f7fe f9de 	bl	800021c <__aeabi_d2uiz>
 8001e60:	0003      	movs	r3, r0
 8001e62:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR3 = (0.5) * starting_ccr;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <reset_and_accelerate+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff f86f 	bl	8000f4c <__aeabi_i2d>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <reset_and_accelerate+0x68>)
 8001e72:	f7fe f9f1 	bl	8000258 <__aeabi_dmul>
 8001e76:	0002      	movs	r2, r0
 8001e78:	000b      	movs	r3, r1
 8001e7a:	4c09      	ldr	r4, [pc, #36]	; (8001ea0 <reset_and_accelerate+0x6c>)
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	f7fe f9cc 	bl	800021c <__aeabi_d2uiz>
 8001e84:	0003      	movs	r3, r0
 8001e86:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM1->ARR = starting_ccr;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <reset_and_accelerate+0x64>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <reset_and_accelerate+0x6c>)
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	3fe00000 	.word	0x3fe00000
 8001ea0:	40012c00 	.word	0x40012c00

08001ea4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//rx transfer completed caldrack
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	HAL_UART_Transmit(&huart2, rxdata, sizeof(rxdata), 100);
 8001eac:	4959      	ldr	r1, [pc, #356]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001eae:	485a      	ldr	r0, [pc, #360]	; (8002018 <HAL_UART_RxCpltCallback+0x174>)
 8001eb0:	2364      	movs	r3, #100	; 0x64
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	f003 fbfc 	bl	80056b0 <HAL_UART_Transmit>
	reset_and_accelerate();
 8001eb8:	f7ff ffbc 	bl	8001e34 <reset_and_accelerate>
	if(strstr(rxdata, "down")){
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_UART_RxCpltCallback+0x178>)
 8001ebe:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f004 fe11 	bl	8006aea <strstr>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_UART_RxCpltCallback+0x40>
		down_flag=1;
 8001ecc:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_UART_RxCpltCallback+0x17c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f002 fb07 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001edc:	0018      	movs	r0, r3
 8001ede:	f002 fab1 	bl	8004444 <HAL_TIM_Base_Start_IT>
//		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
//		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
		HAL_TIM_Base_Start_IT(&htim2);
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}
 8001ee2:	e093      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "up00")){
 8001ee4:	4a51      	ldr	r2, [pc, #324]	; (800202c <HAL_UART_RxCpltCallback+0x188>)
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001ee8:	0011      	movs	r1, r2
 8001eea:	0018      	movs	r0, r3
 8001eec:	f004 fdfd 	bl	8006aea <strstr>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d00b      	beq.n	8001f0c <HAL_UART_RxCpltCallback+0x68>
		up_flag=1;
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_UART_RxCpltCallback+0x18c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001efa:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001efc:	0018      	movs	r0, r3
 8001efe:	f002 faf3 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001f04:	0018      	movs	r0, r3
 8001f06:	f002 fa9d 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001f0a:	e07f      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "left")){
 8001f0c:	4a49      	ldr	r2, [pc, #292]	; (8002034 <HAL_UART_RxCpltCallback+0x190>)
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001f10:	0011      	movs	r1, r2
 8001f12:	0018      	movs	r0, r3
 8001f14:	f004 fde9 	bl	8006aea <strstr>
 8001f18:	1e03      	subs	r3, r0, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_UART_RxCpltCallback+0x90>
		left_flag=1;
 8001f1c:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_UART_RxCpltCallback+0x194>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f22:	4b40      	ldr	r3, [pc, #256]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f002 fadf 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f002 fa89 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001f32:	e06b      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "righ")){
 8001f34:	4a41      	ldr	r2, [pc, #260]	; (800203c <HAL_UART_RxCpltCallback+0x198>)
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f004 fdd5 	bl	8006aea <strstr>
 8001f40:	1e03      	subs	r3, r0, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0xb8>
		righ_flag=1;
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_UART_RxCpltCallback+0x19c>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f002 facb 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f002 fa75 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001f5a:	e057      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "dl00")){
 8001f5c:	4a39      	ldr	r2, [pc, #228]	; (8002044 <HAL_UART_RxCpltCallback+0x1a0>)
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f004 fdc1 	bl	8006aea <strstr>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_UART_RxCpltCallback+0xe0>
		dl_flag=1;
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <HAL_UART_RxCpltCallback+0x1a4>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001f74:	0018      	movs	r0, r3
 8001f76:	f002 fab7 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f002 fa61 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001f82:	e043      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "ul00")){
 8001f84:	4a31      	ldr	r2, [pc, #196]	; (800204c <HAL_UART_RxCpltCallback+0x1a8>)
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001f88:	0011      	movs	r1, r2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f004 fdad 	bl	8006aea <strstr>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d00b      	beq.n	8001fac <HAL_UART_RxCpltCallback+0x108>
		ul_flag=1;
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_UART_RxCpltCallback+0x1ac>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f002 faa3 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f002 fa4d 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001faa:	e02f      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "dr00")){
 8001fac:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_UART_RxCpltCallback+0x1b0>)
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001fb0:	0011      	movs	r1, r2
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f004 fd99 	bl	8006aea <strstr>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_UART_RxCpltCallback+0x130>
		dr_flag=1;
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_UART_RxCpltCallback+0x1b4>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f002 fa8f 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f002 fa39 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001fd2:	e01b      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
	else if(strstr(rxdata, "ur00")){
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <HAL_UART_RxCpltCallback+0x1b8>)
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_UART_RxCpltCallback+0x170>)
 8001fd8:	0011      	movs	r1, r2
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f004 fd85 	bl	8006aea <strstr>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_UART_RxCpltCallback+0x158>
		ur_flag=1;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_UART_RxCpltCallback+0x1bc>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001fec:	0018      	movs	r0, r3
 8001fee:	f002 fa7b 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f002 fa25 	bl	8004444 <HAL_TIM_Base_Start_IT>
}
 8001ffa:	e007      	b.n	800200c <HAL_UART_RxCpltCallback+0x168>
		HAL_TIM_Base_Start_IT(&htim2);
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_UART_RxCpltCallback+0x180>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f002 fa20 	bl	8004444 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim3);
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_UART_RxCpltCallback+0x184>)
 8002006:	0018      	movs	r0, r3
 8002008:	f002 fa6e 	bl	80044e8 <HAL_TIM_Base_Stop_IT>
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200002c0 	.word	0x200002c0
 8002018:	200001f4 	.word	0x200001f4
 800201c:	08006b78 	.word	0x08006b78
 8002020:	200002c4 	.word	0x200002c4
 8002024:	2000011c 	.word	0x2000011c
 8002028:	20000164 	.word	0x20000164
 800202c:	08006b80 	.word	0x08006b80
 8002030:	200002c8 	.word	0x200002c8
 8002034:	08006b88 	.word	0x08006b88
 8002038:	200002cc 	.word	0x200002cc
 800203c:	08006b90 	.word	0x08006b90
 8002040:	200002d0 	.word	0x200002d0
 8002044:	08006b98 	.word	0x08006b98
 8002048:	200002d4 	.word	0x200002d4
 800204c:	08006ba0 	.word	0x08006ba0
 8002050:	200002e0 	.word	0x200002e0
 8002054:	08006ba8 	.word	0x08006ba8
 8002058:	200002dc 	.word	0x200002dc
 800205c:	08006bb0 	.word	0x08006bb0
 8002060:	200002d8 	.word	0x200002d8

08002064 <TranslateDigit>:

uint8_t TranslateDigit(int digit) {
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    uint8_t segments[10] = {0xfc, 0x60, 0xda, 0xf2, 0x66, 0xb6, 0xbe, 0xe0, 0xfe, 0xf6};
 800206c:	240c      	movs	r4, #12
 800206e:	193b      	adds	r3, r7, r4
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <TranslateDigit+0x38>)
 8002072:	ca03      	ldmia	r2!, {r0, r1}
 8002074:	c303      	stmia	r3!, {r0, r1}
 8002076:	8812      	ldrh	r2, [r2, #0]
 8002078:	801a      	strh	r2, [r3, #0]
    if (digit >= 0 && digit <= 9) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db07      	blt.n	8002090 <TranslateDigit+0x2c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b09      	cmp	r3, #9
 8002084:	dc04      	bgt.n	8002090 <TranslateDigit+0x2c>
        return segments[digit];
 8002086:	193a      	adds	r2, r7, r4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	18d3      	adds	r3, r2, r3
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	e000      	b.n	8002092 <TranslateDigit+0x2e>
    } else {
        // Return 0xFF for an invalid digit (all segments off)
        return 0xff;
 8002090:	23ff      	movs	r3, #255	; 0xff
    }
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b007      	add	sp, #28
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	08006bb8 	.word	0x08006bb8

080020a0 <HAL_TIM_PeriodElapsedCallback>:
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2)
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d15b      	bne.n	8002168 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{
	  if (starting_ccr < target_ccr_dec)
 80020b0:	4b80      	ldr	r3, [pc, #512]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	da3f      	bge.n	800213c <HAL_TIM_PeriodElapsedCallback+0x9c>
	  {
		  HAL_UART_Transmit(&huart2, decel, sizeof(decel), 100);
 80020bc:	497f      	ldr	r1, [pc, #508]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80020be:	4880      	ldr	r0, [pc, #512]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80020c0:	2364      	movs	r3, #100	; 0x64
 80020c2:	2214      	movs	r2, #20
 80020c4:	f003 faf4 	bl	80056b0 <HAL_UART_Transmit>
		  starting_ccr = starting_ccr * 1.1;
 80020c8:	4b7a      	ldr	r3, [pc, #488]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe ff3d 	bl	8000f4c <__aeabi_i2d>
 80020d2:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80020d4:	4b7c      	ldr	r3, [pc, #496]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80020d6:	f7fe f8bf 	bl	8000258 <__aeabi_dmul>
 80020da:	0002      	movs	r2, r0
 80020dc:	000b      	movs	r3, r1
 80020de:	0010      	movs	r0, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	f7fe fefd 	bl	8000ee0 <__aeabi_d2iz>
 80020e6:	0002      	movs	r2, r0
 80020e8:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020ea:	601a      	str	r2, [r3, #0]
		  TIM1->CCR1 = (0.5) * starting_ccr;
 80020ec:	4b71      	ldr	r3, [pc, #452]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7fe ff2b 	bl	8000f4c <__aeabi_i2d>
 80020f6:	2200      	movs	r2, #0
 80020f8:	4b74      	ldr	r3, [pc, #464]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80020fa:	f7fe f8ad 	bl	8000258 <__aeabi_dmul>
 80020fe:	0002      	movs	r2, r0
 8002100:	000b      	movs	r3, r1
 8002102:	4c73      	ldr	r4, [pc, #460]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002104:	0010      	movs	r0, r2
 8002106:	0019      	movs	r1, r3
 8002108:	f7fe f888 	bl	800021c <__aeabi_d2uiz>
 800210c:	0003      	movs	r3, r0
 800210e:	6363      	str	r3, [r4, #52]	; 0x34
		  TIM1->CCR3 = (0.5) * starting_ccr;
 8002110:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0018      	movs	r0, r3
 8002116:	f7fe ff19 	bl	8000f4c <__aeabi_i2d>
 800211a:	2200      	movs	r2, #0
 800211c:	4b6b      	ldr	r3, [pc, #428]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800211e:	f7fe f89b 	bl	8000258 <__aeabi_dmul>
 8002122:	0002      	movs	r2, r0
 8002124:	000b      	movs	r3, r1
 8002126:	4c6a      	ldr	r4, [pc, #424]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002128:	0010      	movs	r0, r2
 800212a:	0019      	movs	r1, r3
 800212c:	f7fe f876 	bl	800021c <__aeabi_d2uiz>
 8002130:	0003      	movs	r3, r0
 8002132:	63e3      	str	r3, [r4, #60]	; 0x3c
		  TIM1->ARR = starting_ccr;
 8002134:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
	  if (starting_ccr >= target_ccr_dec)
 800213c:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	db0f      	blt.n	8002168 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  {
		  HAL_UART_Transmit(&huart2, stopping, sizeof(stopping), 100);
 8002148:	4962      	ldr	r1, [pc, #392]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800214a:	485d      	ldr	r0, [pc, #372]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800214c:	2364      	movs	r3, #100	; 0x64
 800214e:	2214      	movs	r2, #20
 8002150:	f003 faae 	bl	80056b0 <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002154:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002156:	2100      	movs	r1, #0
 8002158:	0018      	movs	r0, r3
 800215a:	f002 fb03 	bl	8004764 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800215e:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002160:	2108      	movs	r1, #8
 8002162:	0018      	movs	r0, r3
 8002164:	f002 fafe 	bl	8004764 <HAL_TIM_PWM_Stop>
	  }
	}
	if (htim == &htim3)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800216c:	429a      	cmp	r2, r3
 800216e:	d145      	bne.n	80021fc <HAL_TIM_PeriodElapsedCallback+0x15c>
	{
		if(starting_ccr > target_ccr_acc)
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	dd3f      	ble.n	80021fc <HAL_TIM_PeriodElapsedCallback+0x15c>
		{
			HAL_UART_Transmit(&huart2, accel, sizeof(accel), 100);
 800217c:	4959      	ldr	r1, [pc, #356]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800217e:	4850      	ldr	r0, [pc, #320]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	2214      	movs	r2, #20
 8002184:	f003 fa94 	bl	80056b0 <HAL_UART_Transmit>

			starting_ccr = starting_ccr * .9;
 8002188:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe fedd 	bl	8000f4c <__aeabi_i2d>
 8002192:	4a55      	ldr	r2, [pc, #340]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002194:	4b55      	ldr	r3, [pc, #340]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002196:	f7fe f85f 	bl	8000258 <__aeabi_dmul>
 800219a:	0002      	movs	r2, r0
 800219c:	000b      	movs	r3, r1
 800219e:	0010      	movs	r0, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	f7fe fe9d 	bl	8000ee0 <__aeabi_d2iz>
 80021a6:	0002      	movs	r2, r0
 80021a8:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80021aa:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = (0.5) * starting_ccr;
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe fecb 	bl	8000f4c <__aeabi_i2d>
 80021b6:	2200      	movs	r2, #0
 80021b8:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80021ba:	f7fe f84d 	bl	8000258 <__aeabi_dmul>
 80021be:	0002      	movs	r2, r0
 80021c0:	000b      	movs	r3, r1
 80021c2:	4c43      	ldr	r4, [pc, #268]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021c4:	0010      	movs	r0, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	f7fe f828 	bl	800021c <__aeabi_d2uiz>
 80021cc:	0003      	movs	r3, r0
 80021ce:	6363      	str	r3, [r4, #52]	; 0x34
			TIM1->CCR3 = (0.5) * starting_ccr;
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fe feb9 	bl	8000f4c <__aeabi_i2d>
 80021da:	2200      	movs	r2, #0
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80021de:	f7fe f83b 	bl	8000258 <__aeabi_dmul>
 80021e2:	0002      	movs	r2, r0
 80021e4:	000b      	movs	r3, r1
 80021e6:	4c3a      	ldr	r4, [pc, #232]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021e8:	0010      	movs	r0, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	f7fe f816 	bl	800021c <__aeabi_d2uiz>
 80021f0:	0003      	movs	r3, r0
 80021f2:	63e3      	str	r3, [r4, #60]	; 0x3c
			TIM1->ARR = starting_ccr;
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	if(htim == &htim15){
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002200:	429a      	cmp	r2, r3
 8002202:	d151      	bne.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x208>
		HAL_GPIO_WritePin(GPIOB, latchPin, GPIO_PIN_SET);	// pull latch pin HIGH
 8002204:	2310      	movs	r3, #16
 8002206:	b29b      	uxth	r3, r3
 8002208:	483a      	ldr	r0, [pc, #232]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800220a:	2201      	movs	r2, #1
 800220c:	0019      	movs	r1, r3
 800220e:	f000 ff0f 	bl	8003030 <HAL_GPIO_WritePin>
		uint8_t segment;
		segment = TranslateDigit(segvalue[display_select]);
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	001a      	movs	r2, r3
 8002218:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	250f      	movs	r5, #15
 800221e:	197c      	adds	r4, r7, r5
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ff1f 	bl	8002064 <TranslateDigit>
 8002226:	0003      	movs	r3, r0
 8002228:	7023      	strb	r3, [r4, #0]
		segment = ~segment;
 800222a:	0029      	movs	r1, r5
 800222c:	187b      	adds	r3, r7, r1
 800222e:	187a      	adds	r2, r7, r1
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	43d2      	mvns	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

		uint8_t tx_data[2];

		tx_data[0] = segment;
 8002236:	200c      	movs	r0, #12
 8002238:	183b      	adds	r3, r7, r0
 800223a:	187a      	adds	r2, r7, r1
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	701a      	strb	r2, [r3, #0]
		tx_data[1] = (0x01 << display_select);
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	001a      	movs	r2, r3
 8002246:	2301      	movs	r3, #1
 8002248:	4093      	lsls	r3, r2
 800224a:	b2da      	uxtb	r2, r3
 800224c:	183b      	adds	r3, r7, r0
 800224e:	705a      	strb	r2, [r3, #1]

		HAL_SPI_Transmit(&hspi1, tx_data, 2, 100);
 8002250:	1839      	adds	r1, r7, r0
 8002252:	482b      	ldr	r0, [pc, #172]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002254:	2364      	movs	r3, #100	; 0x64
 8002256:	2202      	movs	r2, #2
 8002258:	f001 fdce 	bl	8003df8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, latchPin, GPIO_PIN_RESET);	// pull latch pin HIGH
 800225c:	2310      	movs	r3, #16
 800225e:	b29b      	uxth	r3, r3
 8002260:	4824      	ldr	r0, [pc, #144]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002262:	2200      	movs	r2, #0
 8002264:	0019      	movs	r1, r3
 8002266:	f000 fee3 	bl	8003030 <HAL_GPIO_WritePin>

		if ((display_select > 3) && (hold < HOLDING_CYCLES)) {
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d90a      	bls.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d806      	bhi.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x1e8>
			hold++;
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002284:	701a      	strb	r2, [r3, #0]
			}
			hold = 0;
		}
	}

}
 8002286:	e00f      	b.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x208>
			display_select++;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002292:	701a      	strb	r2, [r3, #0]
			if (display_select == 8) {
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d102      	bne.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x202>
			  display_select = 0;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
			hold = 0;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b004      	add	sp, #16
 80022ae:	bdb0      	pop	{r4, r5, r7, pc}
 80022b0:	2000011c 	.word	0x2000011c
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000004 	.word	0x20000004
 80022bc:	20000020 	.word	0x20000020
 80022c0:	200001f4 	.word	0x200001f4
 80022c4:	9999999a 	.word	0x9999999a
 80022c8:	3ff19999 	.word	0x3ff19999
 80022cc:	3fe00000 	.word	0x3fe00000
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	20000034 	.word	0x20000034
 80022d8:	200000d4 	.word	0x200000d4
 80022dc:	20000164 	.word	0x20000164
 80022e0:	20000000 	.word	0x20000000
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	cccccccd 	.word	0xcccccccd
 80022ec:	3feccccc 	.word	0x3feccccc
 80022f0:	200001ac 	.word	0x200001ac
 80022f4:	48000400 	.word	0x48000400
 80022f8:	200002ec 	.word	0x200002ec
 80022fc:	200002e4 	.word	0x200002e4
 8002300:	20000070 	.word	0x20000070
 8002304:	200002ed 	.word	0x200002ed

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x44>)
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_MspInit+0x44>)
 8002320:	2101      	movs	r1, #1
 8002322:	430a      	orrs	r2, r1
 8002324:	619a      	str	r2, [r3, #24]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_MspInit+0x44>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_MspInit+0x44>)
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_MspInit+0x44>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0549      	lsls	r1, r1, #21
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_MspInit+0x44>)
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	055b      	lsls	r3, r3, #21
 8002348:	4013      	ands	r3, r2
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b08b      	sub	sp, #44	; 0x2c
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	2414      	movs	r4, #20
 8002366:	193b      	adds	r3, r7, r4
 8002368:	0018      	movs	r0, r3
 800236a:	2314      	movs	r3, #20
 800236c:	001a      	movs	r2, r3
 800236e:	2100      	movs	r1, #0
 8002370:	f004 fbb3 	bl	8006ada <memset>
  if(hspi->Instance==SPI1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_SPI_MspInit+0x90>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d131      	bne.n	80023e2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_SPI_MspInit+0x94>)
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_SPI_MspInit+0x94>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0149      	lsls	r1, r1, #5
 8002388:	430a      	orrs	r2, r1
 800238a:	619a      	str	r2, [r3, #24]
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_SPI_MspInit+0x94>)
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_SPI_MspInit+0x94>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_SPI_MspInit+0x94>)
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	02c9      	lsls	r1, r1, #11
 80023a4:	430a      	orrs	r2, r1
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_SPI_MspInit+0x94>)
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	02db      	lsls	r3, r3, #11
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80023b6:	0021      	movs	r1, r4
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	2228      	movs	r2, #40	; 0x28
 80023bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	2202      	movs	r2, #2
 80023c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	2203      	movs	r2, #3
 80023ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_SPI_MspInit+0x98>)
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f000 fcaf 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b00b      	add	sp, #44	; 0x2c
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40013000 	.word	0x40013000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	48000400 	.word	0x48000400

080023f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_TIM_Base_MspInit+0xd8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0109      	lsls	r1, r1, #4
 8002414:	430a      	orrs	r2, r1
 8002416:	619a      	str	r2, [r3, #24]
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002426:	e04f      	b.n	80024c8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	429a      	cmp	r2, r3
 8002432:	d114      	bne.n	800245e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 800243a:	2101      	movs	r1, #1
 800243c:	430a      	orrs	r2, r1
 800243e:	61da      	str	r2, [r3, #28]
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	200f      	movs	r0, #15
 8002452:	f000 fa91 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002456:	200f      	movs	r0, #15
 8002458:	f000 faa3 	bl	80029a2 <HAL_NVIC_EnableIRQ>
}
 800245c:	e034      	b.n	80024c8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_TIM_Base_MspInit+0xe0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d114      	bne.n	8002492 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 800246e:	2102      	movs	r1, #2
 8002470:	430a      	orrs	r2, r1
 8002472:	61da      	str	r2, [r3, #28]
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2010      	movs	r0, #16
 8002486:	f000 fa77 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800248a:	2010      	movs	r0, #16
 800248c:	f000 fa89 	bl	80029a2 <HAL_NVIC_EnableIRQ>
}
 8002490:	e01a      	b.n	80024c8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM15)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_TIM_Base_MspInit+0xe4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d115      	bne.n	80024c8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	0249      	lsls	r1, r1, #9
 80024a6:	430a      	orrs	r2, r1
 80024a8:	619a      	str	r2, [r3, #24]
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_TIM_Base_MspInit+0xdc>)
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4013      	ands	r3, r2
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2014      	movs	r0, #20
 80024be:	f000 fa5b 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80024c2:	2014      	movs	r0, #20
 80024c4:	f000 fa6d 	bl	80029a2 <HAL_NVIC_EnableIRQ>
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40014000 	.word	0x40014000

080024e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	240c      	movs	r4, #12
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	0018      	movs	r0, r3
 80024ee:	2314      	movs	r3, #20
 80024f0:	001a      	movs	r2, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	f004 faf1 	bl	8006ada <memset>
  if(htim->Instance==TIM1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_TIM_MspPostInit+0x78>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d125      	bne.n	800254e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_TIM_MspPostInit+0x7c>)
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_TIM_MspPostInit+0x7c>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0289      	lsls	r1, r1, #10
 800250c:	430a      	orrs	r2, r1
 800250e:	615a      	str	r2, [r3, #20]
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_TIM_MspPostInit+0x7c>)
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	029b      	lsls	r3, r3, #10
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_A_Pin|PUL_B_Pin;
 800251e:	193b      	adds	r3, r7, r4
 8002520:	22a0      	movs	r2, #160	; 0xa0
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	0021      	movs	r1, r4
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2202      	movs	r2, #2
 800252c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2202      	movs	r2, #2
 800253e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	187a      	adds	r2, r7, r1
 8002542:	2390      	movs	r3, #144	; 0x90
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	0011      	movs	r1, r2
 8002548:	0018      	movs	r0, r3
 800254a:	f000 fbf9 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b009      	add	sp, #36	; 0x24
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b08b      	sub	sp, #44	; 0x2c
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	2414      	movs	r4, #20
 800256a:	193b      	adds	r3, r7, r4
 800256c:	0018      	movs	r0, r3
 800256e:	2314      	movs	r3, #20
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f004 fab1 	bl	8006ada <memset>
  if(huart->Instance==USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_UART_MspInit+0x90>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d132      	bne.n	80025e8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_UART_MspInit+0x94>)
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_UART_MspInit+0x94>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0289      	lsls	r1, r1, #10
 800258c:	430a      	orrs	r2, r1
 800258e:	61da      	str	r2, [r3, #28]
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_UART_MspInit+0x94>)
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	029b      	lsls	r3, r3, #10
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_UART_MspInit+0x94>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_UART_MspInit+0x94>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0289      	lsls	r1, r1, #10
 80025a8:	430a      	orrs	r2, r1
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_UART_MspInit+0x94>)
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ba:	0021      	movs	r1, r4
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	220c      	movs	r2, #12
 80025c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2202      	movs	r2, #2
 80025c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2203      	movs	r2, #3
 80025d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2201      	movs	r2, #1
 80025d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	187a      	adds	r2, r7, r1
 80025dc:	2390      	movs	r3, #144	; 0x90
 80025de:	05db      	lsls	r3, r3, #23
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fbac 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b00b      	add	sp, #44	; 0x2c
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	40004400 	.word	0x40004400
 80025f4:	40021000 	.word	0x40021000

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <NMI_Handler+0x4>

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f000 f8c0 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_IO1_Pin);
 800262a:	2040      	movs	r0, #64	; 0x40
 800262c:	f000 fd1e 	bl	800306c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <TIM2_IRQHandler+0x14>)
 800263e:	0018      	movs	r0, r3
 8002640:	f002 f90c 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	2000011c 	.word	0x2000011c

08002650 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <TIM3_IRQHandler+0x14>)
 8002656:	0018      	movs	r0, r3
 8002658:	f002 f900 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	20000164 	.word	0x20000164

08002668 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <TIM15_IRQHandler+0x14>)
 800266e:	0018      	movs	r0, r3
 8002670:	f002 f8f4 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	200001ac 	.word	0x200001ac

08002680 <DMA1_Ch1_IRQHandler>:


void DMA1_Ch1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <DMA1_Ch1_IRQHandler+0x14>)
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fa8b 	bl	8002ba2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	2000027c 	.word	0x2000027c

08002698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <USART2_IRQHandler+0x14>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f003 f8fe 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	200001f4 	.word	0x200001f4

080026b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c0:	f7ff fff6 	bl	80026b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ea:	f004 fa15 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ee:	f7fe fdc5 	bl	800127c <main>

080026f2 <LoopForever>:

LoopForever:
    b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
  ldr   r0, =_estack
 80026f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002700:	08006c04 	.word	0x08006c04
  ldr r2, =_sbss
 8002704:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002708:	200002f4 	.word	0x200002f4

0800270c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC1_COMP_IRQHandler>
	...

08002710 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_Init+0x24>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_Init+0x24>)
 800271a:	2110      	movs	r1, #16
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002720:	2003      	movs	r0, #3
 8002722:	f000 f809 	bl	8002738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002726:	f7ff fdf5 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40022000 	.word	0x40022000

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_InitTick+0x5c>)
 8002742:	681c      	ldr	r4, [r3, #0]
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_InitTick+0x60>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	0019      	movs	r1, r3
 800274a:	23fa      	movs	r3, #250	; 0xfa
 800274c:	0098      	lsls	r0, r3, #2
 800274e:	f7fd fcd9 	bl	8000104 <__udivsi3>
 8002752:	0003      	movs	r3, r0
 8002754:	0019      	movs	r1, r3
 8002756:	0020      	movs	r0, r4
 8002758:	f7fd fcd4 	bl	8000104 <__udivsi3>
 800275c:	0003      	movs	r3, r0
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f92f 	bl	80029c2 <HAL_SYSTICK_Config>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e00f      	b.n	800278c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d80b      	bhi.n	800278a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	2301      	movs	r3, #1
 8002776:	425b      	negs	r3, r3
 8002778:	2200      	movs	r2, #0
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f8fc 	bl	8002978 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_InitTick+0x64>)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b003      	add	sp, #12
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	20000048 	.word	0x20000048
 8002798:	20000050 	.word	0x20000050
 800279c:	2000004c 	.word	0x2000004c

080027a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_IncTick+0x1c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	001a      	movs	r2, r3
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_IncTick+0x20>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	18d2      	adds	r2, r2, r3
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_IncTick+0x20>)
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	20000050 	.word	0x20000050
 80027c0:	200002f0 	.word	0x200002f0

080027c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b02      	ldr	r3, [pc, #8]	; (80027d4 <HAL_GetTick+0x10>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	200002f0 	.word	0x200002f0

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	001a      	movs	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	f7ff ffe0 	bl	80027c4 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	20000050 	.word	0x20000050

08002820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	0002      	movs	r2, r0
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800282c:	1dfb      	adds	r3, r7, #7
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b7f      	cmp	r3, #127	; 0x7f
 8002832:	d809      	bhi.n	8002848 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	001a      	movs	r2, r3
 800283a:	231f      	movs	r3, #31
 800283c:	401a      	ands	r2, r3
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_EnableIRQ+0x30>)
 8002840:	2101      	movs	r1, #1
 8002842:	4091      	lsls	r1, r2
 8002844:	000a      	movs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	0002      	movs	r2, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b7f      	cmp	r3, #127	; 0x7f
 8002868:	d828      	bhi.n	80028bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800286a:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <__NVIC_SetPriority+0xd4>)
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	33c0      	adds	r3, #192	; 0xc0
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	589b      	ldr	r3, [r3, r2]
 800287a:	1dfa      	adds	r2, r7, #7
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	0011      	movs	r1, r2
 8002880:	2203      	movs	r2, #3
 8002882:	400a      	ands	r2, r1
 8002884:	00d2      	lsls	r2, r2, #3
 8002886:	21ff      	movs	r1, #255	; 0xff
 8002888:	4091      	lsls	r1, r2
 800288a:	000a      	movs	r2, r1
 800288c:	43d2      	mvns	r2, r2
 800288e:	401a      	ands	r2, r3
 8002890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	22ff      	movs	r2, #255	; 0xff
 8002898:	401a      	ands	r2, r3
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	0018      	movs	r0, r3
 80028a0:	2303      	movs	r3, #3
 80028a2:	4003      	ands	r3, r0
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a8:	481f      	ldr	r0, [pc, #124]	; (8002928 <__NVIC_SetPriority+0xd4>)
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b25b      	sxtb	r3, r3
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	430a      	orrs	r2, r1
 80028b4:	33c0      	adds	r3, #192	; 0xc0
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028ba:	e031      	b.n	8002920 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <__NVIC_SetPriority+0xd8>)
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	0019      	movs	r1, r3
 80028c4:	230f      	movs	r3, #15
 80028c6:	400b      	ands	r3, r1
 80028c8:	3b08      	subs	r3, #8
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3306      	adds	r3, #6
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	18d3      	adds	r3, r2, r3
 80028d2:	3304      	adds	r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1dfa      	adds	r2, r7, #7
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	0011      	movs	r1, r2
 80028dc:	2203      	movs	r2, #3
 80028de:	400a      	ands	r2, r1
 80028e0:	00d2      	lsls	r2, r2, #3
 80028e2:	21ff      	movs	r1, #255	; 0xff
 80028e4:	4091      	lsls	r1, r2
 80028e6:	000a      	movs	r2, r1
 80028e8:	43d2      	mvns	r2, r2
 80028ea:	401a      	ands	r2, r3
 80028ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	401a      	ands	r2, r3
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	2303      	movs	r3, #3
 80028fe:	4003      	ands	r3, r0
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002904:	4809      	ldr	r0, [pc, #36]	; (800292c <__NVIC_SetPriority+0xd8>)
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	001c      	movs	r4, r3
 800290c:	230f      	movs	r3, #15
 800290e:	4023      	ands	r3, r4
 8002910:	3b08      	subs	r3, #8
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	430a      	orrs	r2, r1
 8002916:	3306      	adds	r3, #6
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	18c3      	adds	r3, r0, r3
 800291c:	3304      	adds	r3, #4
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b003      	add	sp, #12
 8002926:	bd90      	pop	{r4, r7, pc}
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	045b      	lsls	r3, r3, #17
 8002940:	429a      	cmp	r2, r3
 8002942:	d301      	bcc.n	8002948 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002944:	2301      	movs	r3, #1
 8002946:	e010      	b.n	800296a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <SysTick_Config+0x44>)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	3a01      	subs	r2, #1
 800294e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002950:	2301      	movs	r3, #1
 8002952:	425b      	negs	r3, r3
 8002954:	2103      	movs	r1, #3
 8002956:	0018      	movs	r0, r3
 8002958:	f7ff ff7c 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <SysTick_Config+0x44>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SysTick_Config+0x44>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	e000e010 	.word	0xe000e010

08002978 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	210f      	movs	r1, #15
 8002984:	187b      	adds	r3, r7, r1
 8002986:	1c02      	adds	r2, r0, #0
 8002988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	187b      	adds	r3, r7, r1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b25b      	sxtb	r3, r3
 8002992:	0011      	movs	r1, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f7ff ff5d 	bl	8002854 <__NVIC_SetPriority>
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	0002      	movs	r2, r0
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7ff ff33 	bl	8002820 <__NVIC_EnableIRQ>
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff ffaf 	bl	8002930 <SysTick_Config>
 80029d2:	0003      	movs	r3, r0
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2317      	movs	r3, #23
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Start_IT+0x24>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e04f      	b.n	8002aa0 <HAL_DMA_Start_IT+0xc4>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	2101      	movs	r1, #1
 8002a06:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2221      	movs	r2, #33	; 0x21
 8002a0c:	5c9b      	ldrb	r3, [r3, r2]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d13a      	bne.n	8002a8a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2221      	movs	r2, #33	; 0x21
 8002a18:	2102      	movs	r1, #2
 8002a1a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	438a      	bics	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f954 	bl	8002ce6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	210e      	movs	r1, #14
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00f      	b.n	8002a78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	210a      	movs	r1, #10
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2104      	movs	r1, #4
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2101      	movs	r1, #1
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e007      	b.n	8002a9a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a92:	2317      	movs	r3, #23
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	2202      	movs	r2, #2
 8002a98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002a9a:	2317      	movs	r3, #23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2221      	movs	r2, #33	; 0x21
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d008      	beq.n	8002ace <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e020      	b.n	8002b10 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	210e      	movs	r1, #14
 8002ada:	438a      	bics	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	438a      	bics	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	2101      	movs	r1, #1
 8002af8:	4091      	lsls	r1, r2
 8002afa:	000a      	movs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2221      	movs	r2, #33	; 0x21
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	210f      	movs	r1, #15
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2221      	movs	r2, #33	; 0x21
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d006      	beq.n	8002b42 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2204      	movs	r2, #4
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e028      	b.n	8002b94 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	210e      	movs	r1, #14
 8002b4e:	438a      	bics	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	438a      	bics	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4091      	lsls	r1, r2
 8002b6e:	000a      	movs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2221      	movs	r2, #33	; 0x21
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	0010      	movs	r0, r2
 8002b92:	4798      	blx	r3
    }
  }
  return status;
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d024      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x72>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d020      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d107      	bne.n	8002bee <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2104      	movs	r1, #4
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d100      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x66>
 8002c06:	e06a      	b.n	8002cde <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	0010      	movs	r0, r2
 8002c10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c12:	e064      	b.n	8002cde <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2202      	movs	r2, #2
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	d02b      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xda>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d027      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	d10b      	bne.n	8002c50 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	210a      	movs	r1, #10
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4091      	lsls	r1, r2
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	0010      	movs	r0, r2
 8002c78:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c7a:	e030      	b.n	8002cde <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2208      	movs	r2, #8
 8002c82:	409a      	lsls	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d028      	beq.n	8002cde <HAL_DMA_IRQHandler+0x13c>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	4013      	ands	r3, r2
 8002c92:	d024      	beq.n	8002cde <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	210e      	movs	r1, #14
 8002ca0:	438a      	bics	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	2101      	movs	r1, #1
 8002cae:	4091      	lsls	r1, r2
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	0010      	movs	r0, r2
 8002cda:	4798      	blx	r3
    }
  }
}
 8002cdc:	e7ff      	b.n	8002cde <HAL_DMA_IRQHandler+0x13c>
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4091      	lsls	r1, r2
 8002d00:	000a      	movs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d108      	bne.n	8002d26 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d24:	e007      	b.n	8002d36 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	60da      	str	r2, [r3, #12]
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4e:	e155      	b.n	8002ffc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4091      	lsls	r1, r2
 8002d5a:	000a      	movs	r2, r1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d100      	bne.n	8002d68 <HAL_GPIO_Init+0x28>
 8002d66:	e146      	b.n	8002ff6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d005      	beq.n	8002d80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d130      	bne.n	8002de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	0013      	movs	r3, r2
 8002d90:	43da      	mvns	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	409a      	lsls	r2, r3
 8002da2:	0013      	movs	r3, r2
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db6:	2201      	movs	r2, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	2201      	movs	r2, #1
 8002dce:	401a      	ands	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2203      	movs	r2, #3
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d017      	beq.n	8002e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	0013      	movs	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2203      	movs	r2, #3
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d123      	bne.n	8002e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	58d3      	ldr	r3, [r2, r3]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2107      	movs	r1, #7
 8002e56:	400b      	ands	r3, r1
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	6939      	ldr	r1, [r7, #16]
 8002e70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	43da      	mvns	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	401a      	ands	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	23c0      	movs	r3, #192	; 0xc0
 8002eac:	029b      	lsls	r3, r3, #10
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d100      	bne.n	8002eb4 <HAL_GPIO_Init+0x174>
 8002eb2:	e0a0      	b.n	8002ff6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb4:	4b57      	ldr	r3, [pc, #348]	; (8003014 <HAL_GPIO_Init+0x2d4>)
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	4b56      	ldr	r3, [pc, #344]	; (8003014 <HAL_GPIO_Init+0x2d4>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	619a      	str	r2, [r3, #24]
 8002ec0:	4b54      	ldr	r3, [pc, #336]	; (8003014 <HAL_GPIO_Init+0x2d4>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_GPIO_Init+0x2d8>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	589b      	ldr	r3, [r3, r2]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2203      	movs	r2, #3
 8002ede:	4013      	ands	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	0013      	movs	r3, r2
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	2390      	movs	r3, #144	; 0x90
 8002ef4:	05db      	lsls	r3, r3, #23
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x1ee>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a47      	ldr	r2, [pc, #284]	; (800301c <HAL_GPIO_Init+0x2dc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x1ea>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a46      	ldr	r2, [pc, #280]	; (8003020 <HAL_GPIO_Init+0x2e0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x1e6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a45      	ldr	r2, [pc, #276]	; (8003024 <HAL_GPIO_Init+0x2e4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x1e2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a44      	ldr	r2, [pc, #272]	; (8003028 <HAL_GPIO_Init+0x2e8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x1de>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x1f0>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x1f0>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x1f0>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x1f0>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x1f0>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	2103      	movs	r1, #3
 8002f34:	400a      	ands	r2, r1
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <HAL_GPIO_Init+0x2d8>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b37      	ldr	r3, [pc, #220]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	035b      	lsls	r3, r3, #13
 8002f66:	4013      	ands	r3, r2
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	039b      	lsls	r3, r3, #14
 8002f90:	4013      	ands	r3, r2
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f9c:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fc6:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002fcc:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	025b      	lsls	r3, r3, #9
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_GPIO_Init+0x2ec>)
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	40da      	lsrs	r2, r3
 8003004:	1e13      	subs	r3, r2, #0
 8003006:	d000      	beq.n	800300a <HAL_GPIO_Init+0x2ca>
 8003008:	e6a2      	b.n	8002d50 <HAL_GPIO_Init+0x10>
  } 
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b006      	add	sp, #24
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	48001000 	.word	0x48001000
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	0008      	movs	r0, r1
 800303a:	0011      	movs	r1, r2
 800303c:	1cbb      	adds	r3, r7, #2
 800303e:	1c02      	adds	r2, r0, #0
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	1c7b      	adds	r3, r7, #1
 8003044:	1c0a      	adds	r2, r1, #0
 8003046:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003048:	1c7b      	adds	r3, r7, #1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003050:	1cbb      	adds	r3, r7, #2
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003058:	e003      	b.n	8003062 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800305a:	1cbb      	adds	r3, r7, #2
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	0002      	movs	r2, r0
 8003074:	1dbb      	adds	r3, r7, #6
 8003076:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	1dba      	adds	r2, r7, #6
 800307e:	8812      	ldrh	r2, [r2, #0]
 8003080:	4013      	ands	r3, r2
 8003082:	d008      	beq.n	8003096 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003086:	1dba      	adds	r2, r7, #6
 8003088:	8812      	ldrh	r2, [r2, #0]
 800308a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	0018      	movs	r0, r3
 8003092:	f7fe fd6d 	bl	8001b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	40010400 	.word	0x40010400

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f000 fb76 	bl	80037a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d100      	bne.n	80030c4 <HAL_RCC_OscConfig+0x20>
 80030c2:	e08e      	b.n	80031e2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030c4:	4bc5      	ldr	r3, [pc, #788]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	220c      	movs	r2, #12
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d00e      	beq.n	80030ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d0:	4bc2      	ldr	r3, [pc, #776]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	220c      	movs	r2, #12
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d117      	bne.n	800310c <HAL_RCC_OscConfig+0x68>
 80030dc:	4bbf      	ldr	r3, [pc, #764]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	23c0      	movs	r3, #192	; 0xc0
 80030e2:	025b      	lsls	r3, r3, #9
 80030e4:	401a      	ands	r2, r3
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	025b      	lsls	r3, r3, #9
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d10e      	bne.n	800310c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	4bbb      	ldr	r3, [pc, #748]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	029b      	lsls	r3, r3, #10
 80030f6:	4013      	ands	r3, r2
 80030f8:	d100      	bne.n	80030fc <HAL_RCC_OscConfig+0x58>
 80030fa:	e071      	b.n	80031e0 <HAL_RCC_OscConfig+0x13c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d000      	beq.n	8003106 <HAL_RCC_OscConfig+0x62>
 8003104:	e06c      	b.n	80031e0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	f000 fb4c 	bl	80037a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x80>
 8003114:	4bb1      	ldr	r3, [pc, #708]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4bb0      	ldr	r3, [pc, #704]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	0249      	lsls	r1, r1, #9
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e02f      	b.n	8003184 <HAL_RCC_OscConfig+0xe0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0xa2>
 800312c:	4bab      	ldr	r3, [pc, #684]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4baa      	ldr	r3, [pc, #680]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003132:	49ab      	ldr	r1, [pc, #684]	; (80033e0 <HAL_RCC_OscConfig+0x33c>)
 8003134:	400a      	ands	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	4ba8      	ldr	r3, [pc, #672]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4ba7      	ldr	r3, [pc, #668]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800313e:	49a9      	ldr	r1, [pc, #676]	; (80033e4 <HAL_RCC_OscConfig+0x340>)
 8003140:	400a      	ands	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e01e      	b.n	8003184 <HAL_RCC_OscConfig+0xe0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10e      	bne.n	800316c <HAL_RCC_OscConfig+0xc8>
 800314e:	4ba3      	ldr	r3, [pc, #652]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4ba2      	ldr	r3, [pc, #648]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	02c9      	lsls	r1, r1, #11
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	4b9f      	ldr	r3, [pc, #636]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0249      	lsls	r1, r1, #9
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0xe0>
 800316c:	4b9b      	ldr	r3, [pc, #620]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b9a      	ldr	r3, [pc, #616]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003172:	499b      	ldr	r1, [pc, #620]	; (80033e0 <HAL_RCC_OscConfig+0x33c>)
 8003174:	400a      	ands	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	4b98      	ldr	r3, [pc, #608]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b97      	ldr	r3, [pc, #604]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800317e:	4999      	ldr	r1, [pc, #612]	; (80033e4 <HAL_RCC_OscConfig+0x340>)
 8003180:	400a      	ands	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d014      	beq.n	80031b6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7ff fb1a 	bl	80027c4 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003196:	f7ff fb15 	bl	80027c4 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b64      	cmp	r3, #100	; 0x64
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e2fd      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a8:	4b8c      	ldr	r3, [pc, #560]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	029b      	lsls	r3, r3, #10
 80031b0:	4013      	ands	r3, r2
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0xf2>
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7ff fb05 	bl	80027c4 <HAL_GetTick>
 80031ba:	0003      	movs	r3, r0
 80031bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff fb00 	bl	80027c4 <HAL_GetTick>
 80031c4:	0002      	movs	r2, r0
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e2e8      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b82      	ldr	r3, [pc, #520]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	029b      	lsls	r3, r3, #10
 80031da:	4013      	ands	r3, r2
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x11c>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d100      	bne.n	80031ee <HAL_RCC_OscConfig+0x14a>
 80031ec:	e06c      	b.n	80032c8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031ee:	4b7b      	ldr	r3, [pc, #492]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	220c      	movs	r2, #12
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031f8:	4b78      	ldr	r3, [pc, #480]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	220c      	movs	r2, #12
 80031fe:	4013      	ands	r3, r2
 8003200:	2b08      	cmp	r3, #8
 8003202:	d11f      	bne.n	8003244 <HAL_RCC_OscConfig+0x1a0>
 8003204:	4b75      	ldr	r3, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	23c0      	movs	r3, #192	; 0xc0
 800320a:	025b      	lsls	r3, r3, #9
 800320c:	401a      	ands	r2, r3
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	429a      	cmp	r2, r3
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b71      	ldr	r3, [pc, #452]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2202      	movs	r2, #2
 800321c:	4013      	ands	r3, r2
 800321e:	d005      	beq.n	800322c <HAL_RCC_OscConfig+0x188>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e2bb      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b6b      	ldr	r3, [pc, #428]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	22f8      	movs	r2, #248	; 0xf8
 8003232:	4393      	bics	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00da      	lsls	r2, r3, #3
 800323c:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e041      	b.n	80032c8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d024      	beq.n	8003296 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003252:	2101      	movs	r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff fab4 	bl	80027c4 <HAL_GetTick>
 800325c:	0003      	movs	r3, r0
 800325e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003262:	f7ff faaf 	bl	80027c4 <HAL_GetTick>
 8003266:	0002      	movs	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e297      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2202      	movs	r2, #2
 800327a:	4013      	ands	r3, r2
 800327c:	d0f1      	beq.n	8003262 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	22f8      	movs	r2, #248	; 0xf8
 8003284:	4393      	bics	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	00da      	lsls	r2, r3, #3
 800328e:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e018      	b.n	80032c8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b51      	ldr	r3, [pc, #324]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 800329c:	2101      	movs	r1, #1
 800329e:	438a      	bics	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7ff fa8f 	bl	80027c4 <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ac:	f7ff fa8a 	bl	80027c4 <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e272      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2202      	movs	r2, #2
 80032c4:	4013      	ands	r3, r2
 80032c6:	d1f1      	bne.n	80032ac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2208      	movs	r2, #8
 80032ce:	4013      	ands	r3, r2
 80032d0:	d036      	beq.n	8003340 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d019      	beq.n	800330e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	4b40      	ldr	r3, [pc, #256]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80032dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7ff fa6d 	bl	80027c4 <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f0:	f7ff fa68 	bl	80027c4 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e250      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	d0f1      	beq.n	80032f0 <HAL_RCC_OscConfig+0x24c>
 800330c:	e018      	b.n	8003340 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003312:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003314:	2101      	movs	r1, #1
 8003316:	438a      	bics	r2, r1
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7ff fa53 	bl	80027c4 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003324:	f7ff fa4e 	bl	80027c4 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e236      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003336:	4b29      	ldr	r3, [pc, #164]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d1f1      	bne.n	8003324 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2204      	movs	r2, #4
 8003346:	4013      	ands	r3, r2
 8003348:	d100      	bne.n	800334c <HAL_RCC_OscConfig+0x2a8>
 800334a:	e0b5      	b.n	80034b8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334c:	201f      	movs	r0, #31
 800334e:	183b      	adds	r3, r7, r0
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	055b      	lsls	r3, r3, #21
 800335c:	4013      	ands	r3, r2
 800335e:	d110      	bne.n	8003382 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0549      	lsls	r1, r1, #21
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	055b      	lsls	r3, r3, #21
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800337c:	183b      	adds	r3, r7, r0
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_OscConfig+0x344>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d11a      	bne.n	80033c4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <HAL_RCC_OscConfig+0x344>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_RCC_OscConfig+0x344>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	0049      	lsls	r1, r1, #1
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339c:	f7ff fa12 	bl	80027c4 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7ff fa0d 	bl	80027c4 <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b64      	cmp	r3, #100	; 0x64
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1f5      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x344>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4013      	ands	r3, r2
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10f      	bne.n	80033ec <HAL_RCC_OscConfig+0x348>
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <HAL_RCC_OscConfig+0x338>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	430a      	orrs	r2, r1
 80033d6:	621a      	str	r2, [r3, #32]
 80033d8:	e036      	b.n	8003448 <HAL_RCC_OscConfig+0x3a4>
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40021000 	.word	0x40021000
 80033e0:	fffeffff 	.word	0xfffeffff
 80033e4:	fffbffff 	.word	0xfffbffff
 80033e8:	40007000 	.word	0x40007000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10c      	bne.n	800340e <HAL_RCC_OscConfig+0x36a>
 80033f4:	4bca      	ldr	r3, [pc, #808]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	4bc9      	ldr	r3, [pc, #804]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	438a      	bics	r2, r1
 80033fe:	621a      	str	r2, [r3, #32]
 8003400:	4bc7      	ldr	r3, [pc, #796]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	4bc6      	ldr	r3, [pc, #792]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003406:	2104      	movs	r1, #4
 8003408:	438a      	bics	r2, r1
 800340a:	621a      	str	r2, [r3, #32]
 800340c:	e01c      	b.n	8003448 <HAL_RCC_OscConfig+0x3a4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b05      	cmp	r3, #5
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x38c>
 8003416:	4bc2      	ldr	r3, [pc, #776]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	4bc1      	ldr	r3, [pc, #772]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800341c:	2104      	movs	r1, #4
 800341e:	430a      	orrs	r2, r1
 8003420:	621a      	str	r2, [r3, #32]
 8003422:	4bbf      	ldr	r3, [pc, #764]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	4bbe      	ldr	r3, [pc, #760]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003428:	2101      	movs	r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	621a      	str	r2, [r3, #32]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0x3a4>
 8003430:	4bbb      	ldr	r3, [pc, #748]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	4bba      	ldr	r3, [pc, #744]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	621a      	str	r2, [r3, #32]
 800343c:	4bb8      	ldr	r3, [pc, #736]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	4bb7      	ldr	r3, [pc, #732]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003442:	2104      	movs	r1, #4
 8003444:	438a      	bics	r2, r1
 8003446:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7ff f9b8 	bl	80027c4 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e009      	b.n	800346e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7ff f9b3 	bl	80027c4 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4aaf      	ldr	r2, [pc, #700]	; (8003724 <HAL_RCC_OscConfig+0x680>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e19a      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	4bac      	ldr	r3, [pc, #688]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	2202      	movs	r2, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x3b6>
 8003478:	e013      	b.n	80034a2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7ff f9a3 	bl	80027c4 <HAL_GetTick>
 800347e:	0003      	movs	r3, r0
 8003480:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003482:	e009      	b.n	8003498 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7ff f99e 	bl	80027c4 <HAL_GetTick>
 8003488:	0002      	movs	r2, r0
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4aa5      	ldr	r2, [pc, #660]	; (8003724 <HAL_RCC_OscConfig+0x680>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e185      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4ba1      	ldr	r3, [pc, #644]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	2202      	movs	r2, #2
 800349e:	4013      	ands	r3, r2
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b9c      	ldr	r3, [pc, #624]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	4b9b      	ldr	r3, [pc, #620]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80034b2:	499d      	ldr	r1, [pc, #628]	; (8003728 <HAL_RCC_OscConfig+0x684>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2210      	movs	r2, #16
 80034be:	4013      	ands	r3, r2
 80034c0:	d063      	beq.n	800358a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d12a      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034ca:	4b95      	ldr	r3, [pc, #596]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80034cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ce:	4b94      	ldr	r3, [pc, #592]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80034d0:	2104      	movs	r1, #4
 80034d2:	430a      	orrs	r2, r1
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80034d6:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80034d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034da:	4b91      	ldr	r3, [pc, #580]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80034dc:	2101      	movs	r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7ff f96f 	bl	80027c4 <HAL_GetTick>
 80034e6:	0003      	movs	r3, r0
 80034e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034ec:	f7ff f96a 	bl	80027c4 <HAL_GetTick>
 80034f0:	0002      	movs	r2, r0
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e152      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	2202      	movs	r2, #2
 8003504:	4013      	ands	r3, r2
 8003506:	d0f1      	beq.n	80034ec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003508:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	22f8      	movs	r2, #248	; 0xf8
 800350e:	4393      	bics	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	00da      	lsls	r2, r3, #3
 8003518:	4b81      	ldr	r3, [pc, #516]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800351a:	430a      	orrs	r2, r1
 800351c:	635a      	str	r2, [r3, #52]	; 0x34
 800351e:	e034      	b.n	800358a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	3305      	adds	r3, #5
 8003526:	d111      	bne.n	800354c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003528:	4b7d      	ldr	r3, [pc, #500]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800352a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352c:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800352e:	2104      	movs	r1, #4
 8003530:	438a      	bics	r2, r1
 8003532:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003534:	4b7a      	ldr	r3, [pc, #488]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	22f8      	movs	r2, #248	; 0xf8
 800353a:	4393      	bics	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	00da      	lsls	r2, r3, #3
 8003544:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003546:	430a      	orrs	r2, r1
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
 800354a:	e01e      	b.n	800358a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800354c:	4b74      	ldr	r3, [pc, #464]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800354e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003550:	4b73      	ldr	r3, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003552:	2104      	movs	r1, #4
 8003554:	430a      	orrs	r2, r1
 8003556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003558:	4b71      	ldr	r3, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800355a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355c:	4b70      	ldr	r3, [pc, #448]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003564:	f7ff f92e 	bl	80027c4 <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800356e:	f7ff f929 	bl	80027c4 <HAL_GetTick>
 8003572:	0002      	movs	r2, r0
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e111      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003580:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	2202      	movs	r2, #2
 8003586:	4013      	ands	r3, r2
 8003588:	d1f1      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2220      	movs	r2, #32
 8003590:	4013      	ands	r3, r2
 8003592:	d05c      	beq.n	800364e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	220c      	movs	r2, #12
 800359a:	4013      	ands	r3, r2
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d00e      	beq.n	80035be <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035a0:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	220c      	movs	r2, #12
 80035a6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d114      	bne.n	80035d6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035ac:	4b5c      	ldr	r3, [pc, #368]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	025b      	lsls	r3, r3, #9
 80035b4:	401a      	ands	r2, r3
 80035b6:	23c0      	movs	r3, #192	; 0xc0
 80035b8:	025b      	lsls	r3, r3, #9
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035be:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80035c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	029b      	lsls	r3, r3, #10
 80035c6:	4013      	ands	r3, r2
 80035c8:	d040      	beq.n	800364c <HAL_RCC_OscConfig+0x5a8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d03c      	beq.n	800364c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e6      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01b      	beq.n	8003616 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80035de:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0249      	lsls	r1, r1, #9
 80035e8:	430a      	orrs	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7ff f8ea 	bl	80027c4 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f6:	f7ff f8e5 	bl	80027c4 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0cd      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003608:	4b45      	ldr	r3, [pc, #276]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	4013      	ands	r3, r2
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x552>
 8003614:	e01b      	b.n	800364e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003616:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800361c:	4943      	ldr	r1, [pc, #268]	; (800372c <HAL_RCC_OscConfig+0x688>)
 800361e:	400a      	ands	r2, r1
 8003620:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7ff f8cf 	bl	80027c4 <HAL_GetTick>
 8003626:	0003      	movs	r3, r0
 8003628:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800362c:	f7ff f8ca 	bl	80027c4 <HAL_GetTick>
 8003630:	0002      	movs	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e0b2      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	4013      	ands	r3, r2
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x588>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800364c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d100      	bne.n	8003658 <HAL_RCC_OscConfig+0x5b4>
 8003656:	e0a4      	b.n	80037a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	220c      	movs	r2, #12
 800365e:	4013      	ands	r3, r2
 8003660:	2b08      	cmp	r3, #8
 8003662:	d100      	bne.n	8003666 <HAL_RCC_OscConfig+0x5c2>
 8003664:	e078      	b.n	8003758 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b02      	cmp	r3, #2
 800366c:	d14c      	bne.n	8003708 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003674:	492e      	ldr	r1, [pc, #184]	; (8003730 <HAL_RCC_OscConfig+0x68c>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7ff f8a3 	bl	80027c4 <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7ff f89e 	bl	80027c4 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e086      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	049b      	lsls	r3, r3, #18
 800369e:	4013      	ands	r3, r2
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a2:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	220f      	movs	r2, #15
 80036a8:	4393      	bics	r3, r2
 80036aa:	0019      	movs	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036b2:	430a      	orrs	r2, r1
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <HAL_RCC_OscConfig+0x690>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	431a      	orrs	r2, r3
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	0449      	lsls	r1, r1, #17
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7ff f871 	bl	80027c4 <HAL_GetTick>
 80036e2:	0003      	movs	r3, r0
 80036e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7ff f86c 	bl	80027c4 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e054      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	049b      	lsls	r3, r3, #18
 8003702:	4013      	ands	r3, r2
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x644>
 8003706:	e04c      	b.n	80037a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_OscConfig+0x67c>)
 800370e:	4908      	ldr	r1, [pc, #32]	; (8003730 <HAL_RCC_OscConfig+0x68c>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7ff f856 	bl	80027c4 <HAL_GetTick>
 8003718:	0003      	movs	r3, r0
 800371a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371c:	e015      	b.n	800374a <HAL_RCC_OscConfig+0x6a6>
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	00001388 	.word	0x00001388
 8003728:	efffffff 	.word	0xefffffff
 800372c:	fffeffff 	.word	0xfffeffff
 8003730:	feffffff 	.word	0xfeffffff
 8003734:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003738:	f7ff f844 	bl	80027c4 <HAL_GetTick>
 800373c:	0002      	movs	r2, r0
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e02c      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <HAL_RCC_OscConfig+0x708>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	049b      	lsls	r3, r3, #18
 8003752:	4013      	ands	r3, r2
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x694>
 8003756:	e024      	b.n	80037a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e01f      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_RCC_OscConfig+0x708>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_RCC_OscConfig+0x708>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	23c0      	movs	r3, #192	; 0xc0
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	401a      	ands	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	429a      	cmp	r2, r3
 800377e:	d10e      	bne.n	800379e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	220f      	movs	r2, #15
 8003784:	401a      	ands	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d107      	bne.n	800379e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	23f0      	movs	r3, #240	; 0xf0
 8003792:	039b      	lsls	r3, r3, #14
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b008      	add	sp, #32
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000

080037b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0bf      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	4013      	ands	r3, r2
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d911      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	4393      	bics	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	4013      	ands	r3, r2
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0a6      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d015      	beq.n	800382c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2204      	movs	r2, #4
 8003806:	4013      	ands	r3, r2
 8003808:	d006      	beq.n	8003818 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800380a:	4b51      	ldr	r3, [pc, #324]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003810:	21e0      	movs	r1, #224	; 0xe0
 8003812:	00c9      	lsls	r1, r1, #3
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	22f0      	movs	r2, #240	; 0xf0
 800381e:	4393      	bics	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	d04c      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b44      	ldr	r3, [pc, #272]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	029b      	lsls	r3, r3, #10
 8003846:	4013      	ands	r3, r2
 8003848:	d120      	bne.n	800388c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07a      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	049b      	lsls	r3, r3, #18
 800385e:	4013      	ands	r3, r2
 8003860:	d114      	bne.n	800388c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06e      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	029b      	lsls	r3, r3, #10
 8003876:	4013      	ands	r3, r2
 8003878:	d108      	bne.n	800388c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e062      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2202      	movs	r2, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e05b      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388c:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	4393      	bics	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a0:	f7fe ff90 	bl	80027c4 <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a8:	e009      	b.n	80038be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038aa:	f7fe ff8b 	bl	80027c4 <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <HAL_RCC_ClockConfig+0x1a4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e042      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	220c      	movs	r2, #12
 80038c4:	401a      	ands	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1ec      	bne.n	80038aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d211      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x19c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e020      	b.n	8003944 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2204      	movs	r2, #4
 8003908:	4013      	ands	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_RCC_ClockConfig+0x1a8>)
 8003912:	4013      	ands	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003920:	f000 f820 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003924:	0001      	movs	r1, r0
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1a0>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	220f      	movs	r2, #15
 800392e:	4013      	ands	r3, r2
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x1ac>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	000a      	movs	r2, r1
 8003936:	40da      	lsrs	r2, r3
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1b0>)
 800393a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800393c:	2003      	movs	r0, #3
 800393e:	f7fe fefb 	bl	8002738 <HAL_InitTick>
  
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40022000 	.word	0x40022000
 8003950:	40021000 	.word	0x40021000
 8003954:	00001388 	.word	0x00001388
 8003958:	fffff8ff 	.word	0xfffff8ff
 800395c:	08006bc4 	.word	0x08006bc4
 8003960:	20000048 	.word	0x20000048

08003964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	220c      	movs	r2, #12
 8003988:	4013      	ands	r3, r2
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d046      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0xb8>
 800398e:	d848      	bhi.n	8003a22 <HAL_RCC_GetSysClockFreq+0xbe>
 8003990:	2b04      	cmp	r3, #4
 8003992:	d002      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x36>
 8003994:	2b08      	cmp	r3, #8
 8003996:	d003      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x3c>
 8003998:	e043      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800399a:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 800399c:	613b      	str	r3, [r7, #16]
      break;
 800399e:	e043      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	220f      	movs	r2, #15
 80039a6:	4013      	ands	r3, r2
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xd8>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	220f      	movs	r2, #15
 80039b4:	4013      	ands	r3, r2
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xdc>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	23c0      	movs	r3, #192	; 0xc0
 80039c0:	025b      	lsls	r3, r3, #9
 80039c2:	401a      	ands	r2, r3
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	025b      	lsls	r3, r3, #9
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d109      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	481a      	ldr	r0, [pc, #104]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039d0:	f7fc fb98 	bl	8000104 <__udivsi3>
 80039d4:	0003      	movs	r3, r0
 80039d6:	001a      	movs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4353      	muls	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e01a      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	23c0      	movs	r3, #192	; 0xc0
 80039e4:	025b      	lsls	r3, r3, #9
 80039e6:	401a      	ands	r2, r3
 80039e8:	23c0      	movs	r3, #192	; 0xc0
 80039ea:	025b      	lsls	r3, r3, #9
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4814      	ldr	r0, [pc, #80]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xe0>)
 80039f4:	f7fc fb86 	bl	8000104 <__udivsi3>
 80039f8:	0003      	movs	r3, r0
 80039fa:	001a      	movs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4353      	muls	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	480c      	ldr	r0, [pc, #48]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a08:	f7fc fb7c 	bl	8000104 <__udivsi3>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4353      	muls	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	613b      	str	r3, [r7, #16]
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a1e:	613b      	str	r3, [r7, #16]
      break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a24:	613b      	str	r3, [r7, #16]
      break;
 8003a26:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a28:	693b      	ldr	r3, [r7, #16]
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b006      	add	sp, #24
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	08006bdc 	.word	0x08006bdc
 8003a40:	08006bec 	.word	0x08006bec
 8003a44:	02dc6c00 	.word	0x02dc6c00

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000048 	.word	0x20000048

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	0001      	movs	r1, r0
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	4013      	ands	r3, r2
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	40d9      	lsrs	r1, r3
 8003a76:	000b      	movs	r3, r1
}    
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	40021000 	.word	0x40021000
 8003a84:	08006bd4 	.word	0x08006bd4

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	025b      	lsls	r3, r3, #9
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003aa4:	e08e      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2017      	movs	r0, #23
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b6e      	ldr	r3, [pc, #440]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	055b      	lsls	r3, r3, #21
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d110      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b6b      	ldr	r3, [pc, #428]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	0549      	lsls	r1, r1, #21
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	61da      	str	r2, [r3, #28]
 8003ac8:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	055b      	lsls	r3, r3, #21
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	183b      	adds	r3, r7, r0
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d11a      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae8:	4b60      	ldr	r3, [pc, #384]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0049      	lsls	r1, r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fe65 	bl	80027c4 <HAL_GetTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fe fe60 	bl	80027c4 <HAL_GetTick>
 8003b04:	0002      	movs	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0a6      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b1e:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	23c0      	movs	r3, #192	; 0xc0
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d034      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	23c0      	movs	r3, #192	; 0xc0
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d02c      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4a4a      	ldr	r2, [pc, #296]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	0249      	lsls	r1, r1, #9
 8003b54:	430a      	orrs	r2, r1
 8003b56:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b5e:	4945      	ldr	r1, [pc, #276]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003b60:	400a      	ands	r2, r1
 8003b62:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fe27 	bl	80027c4 <HAL_GetTick>
 8003b76:	0003      	movs	r3, r0
 8003b78:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e009      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fe22 	bl	80027c4 <HAL_GetTick>
 8003b80:	0002      	movs	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	4a3c      	ldr	r2, [pc, #240]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e067      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	2202      	movs	r2, #2
 8003b96:	4013      	ands	r3, r2
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a34      	ldr	r2, [pc, #208]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003baa:	430a      	orrs	r2, r1
 8003bac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bae:	2317      	movs	r3, #23
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bbe:	492f      	ldr	r1, [pc, #188]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	02db      	lsls	r3, r3, #11
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c0c:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2220      	movs	r2, #32
 8003c26:	4013      	ands	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	2210      	movs	r2, #16
 8003c30:	4393      	bics	r3, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4013      	ands	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	4393      	bics	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b006      	add	sp, #24
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	fffffcff 	.word	0xfffffcff
 8003c74:	fffeffff 	.word	0xfffeffff
 8003c78:	00001388 	.word	0x00001388
 8003c7c:	efffffff 	.word	0xefffffff
 8003c80:	fffcffff 	.word	0xfffcffff
 8003c84:	fff3ffff 	.word	0xfff3ffff

08003c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0a8      	b.n	8003dec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	2382      	movs	r3, #130	; 0x82
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d009      	beq.n	8003cc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	61da      	str	r2, [r3, #28]
 8003cb4:	e005      	b.n	8003cc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	225d      	movs	r2, #93	; 0x5d
 8003ccc:	5c9b      	ldrb	r3, [r3, r2]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	225c      	movs	r2, #92	; 0x5c
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7fe fb3c 	bl	800235c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	225d      	movs	r2, #93	; 0x5d
 8003ce8:	2102      	movs	r1, #2
 8003cea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	23e0      	movs	r3, #224	; 0xe0
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d902      	bls.n	8003d0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e002      	b.n	8003d14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	015b      	lsls	r3, r3, #5
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	23f0      	movs	r3, #240	; 0xf0
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d008      	beq.n	8003d32 <HAL_SPI_Init+0xaa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	23e0      	movs	r3, #224	; 0xe0
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2382      	movs	r3, #130	; 0x82
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6899      	ldr	r1, [r3, #8]
 8003d40:	2384      	movs	r3, #132	; 0x84
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	400b      	ands	r3, r1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	400b      	ands	r3, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2101      	movs	r1, #1
 8003d58:	400b      	ands	r3, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6999      	ldr	r1, [r3, #24]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	400b      	ands	r3, r1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2138      	movs	r1, #56	; 0x38
 8003d6e:	400b      	ands	r3, r1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	400b      	ands	r3, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	0011      	movs	r1, r2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	019b      	lsls	r3, r3, #6
 8003d86:	401a      	ands	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	2204      	movs	r2, #4
 8003d98:	401a      	ands	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2110      	movs	r1, #16
 8003da0:	400b      	ands	r3, r1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	2108      	movs	r1, #8
 8003daa:	400b      	ands	r3, r1
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	23f0      	movs	r3, #240	; 0xf0
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	400b      	ands	r3, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	0011      	movs	r1, r2
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4907      	ldr	r1, [pc, #28]	; (8003df4 <HAL_SPI_Init+0x16c>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	225d      	movs	r2, #93	; 0x5d
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b004      	add	sp, #16
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	fffff7ff 	.word	0xfffff7ff

08003df8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	1dbb      	adds	r3, r7, #6
 8003e06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e08:	231f      	movs	r3, #31
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	225c      	movs	r2, #92	; 0x5c
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_SPI_Transmit+0x26>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e147      	b.n	80040ae <HAL_SPI_Transmit+0x2b6>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	225c      	movs	r2, #92	; 0x5c
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e26:	f7fe fccd 	bl	80027c4 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e2e:	2316      	movs	r3, #22
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	1dba      	adds	r2, r7, #6
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	225d      	movs	r2, #93	; 0x5d
 8003e3c:	5c9b      	ldrb	r3, [r3, r2]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d004      	beq.n	8003e4e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e44:	231f      	movs	r3, #31
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e4c:	e128      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_SPI_Transmit+0x64>
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003e5c:	231f      	movs	r3, #31
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e64:	e11c      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	225d      	movs	r2, #93	; 0x5d
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1dba      	adds	r2, r7, #6
 8003e7e:	8812      	ldrh	r2, [r2, #0]
 8003e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1dba      	adds	r2, r7, #6
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2244      	movs	r2, #68	; 0x44
 8003e94:	2100      	movs	r1, #0
 8003e96:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2246      	movs	r2, #70	; 0x46
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d110      	bne.n	8003eda <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2140      	movs	r1, #64	; 0x40
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	01c9      	lsls	r1, r1, #7
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2240      	movs	r2, #64	; 0x40
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d007      	beq.n	8003ef8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	23e0      	movs	r3, #224	; 0xe0
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d952      	bls.n	8003faa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_SPI_Transmit+0x11e>
 8003f0c:	2316      	movs	r3, #22
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d143      	bne.n	8003f9e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f3a:	e030      	b.n	8003f9e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d112      	bne.n	8003f70 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	881a      	ldrh	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	1c9a      	adds	r2, r3, #2
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f6e:	e016      	b.n	8003f9e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f70:	f7fe fc28 	bl	80027c4 <HAL_GetTick>
 8003f74:	0002      	movs	r2, r0
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d802      	bhi.n	8003f86 <HAL_SPI_Transmit+0x18e>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_SPI_Transmit+0x194>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d108      	bne.n	8003f9e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003f8c:	231f      	movs	r3, #31
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2203      	movs	r2, #3
 8003f92:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	225d      	movs	r2, #93	; 0x5d
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f9c:	e080      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1c9      	bne.n	8003f3c <HAL_SPI_Transmit+0x144>
 8003fa8:	e053      	b.n	8004052 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_SPI_Transmit+0x1c4>
 8003fb2:	2316      	movs	r3, #22
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d145      	bne.n	8004048 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003fe2:	e031      	b.n	8004048 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d113      	bne.n	800401a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004018:	e016      	b.n	8004048 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401a:	f7fe fbd3 	bl	80027c4 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d802      	bhi.n	8004030 <HAL_SPI_Transmit+0x238>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	d102      	bne.n	8004036 <HAL_SPI_Transmit+0x23e>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004036:	231f      	movs	r3, #31
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	2203      	movs	r2, #3
 800403c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	225d      	movs	r2, #93	; 0x5d
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
          goto error;
 8004046:	e02b      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1c8      	bne.n	8003fe4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 f95d 	bl	8004318 <SPI_EndRxTxTransaction>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800408e:	231f      	movs	r3, #31
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e003      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	225d      	movs	r2, #93	; 0x5d
 800409c:	2101      	movs	r1, #1
 800409e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	225c      	movs	r2, #92	; 0x5c
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040a8:	231f      	movs	r3, #31
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b008      	add	sp, #32
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	1dfb      	adds	r3, r7, #7
 80040c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040c8:	f7fe fb7c 	bl	80027c4 <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040d8:	f7fe fb74 	bl	80027c4 <HAL_GetTick>
 80040dc:	0003      	movs	r3, r0
 80040de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040e0:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	015b      	lsls	r3, r3, #5
 80040e6:	0d1b      	lsrs	r3, r3, #20
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4353      	muls	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ee:	e058      	b.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	d055      	beq.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040f6:	f7fe fb65 	bl	80027c4 <HAL_GetTick>
 80040fa:	0002      	movs	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	429a      	cmp	r2, r3
 8004104:	d902      	bls.n	800410c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d142      	bne.n	8004192 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	21e0      	movs	r1, #224	; 0xe0
 8004118:	438a      	bics	r2, r1
 800411a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	2382      	movs	r3, #130	; 0x82
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	429a      	cmp	r2, r3
 8004126:	d113      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	429a      	cmp	r2, r3
 8004132:	d005      	beq.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2140      	movs	r1, #64	; 0x40
 800414c:	438a      	bics	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	019b      	lsls	r3, r3, #6
 8004158:	429a      	cmp	r2, r3
 800415a:	d110      	bne.n	800417e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	491a      	ldr	r1, [pc, #104]	; (80041d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2180      	movs	r1, #128	; 0x80
 8004178:	0189      	lsls	r1, r1, #6
 800417a:	430a      	orrs	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	225d      	movs	r2, #93	; 0x5d
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	225c      	movs	r2, #92	; 0x5c
 800418a:	2100      	movs	r1, #0
 800418c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e017      	b.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3b01      	subs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	425a      	negs	r2, r3
 80041b2:	4153      	adcs	r3, r2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	001a      	movs	r2, r3
 80041b8:	1dfb      	adds	r3, r7, #7
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d197      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b008      	add	sp, #32
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	20000048 	.word	0x20000048
 80041d0:	ffffdfff 	.word	0xffffdfff

080041d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041e2:	2317      	movs	r3, #23
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041ea:	f7fe faeb 	bl	80027c4 <HAL_GetTick>
 80041ee:	0002      	movs	r2, r0
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80041fa:	f7fe fae3 	bl	80027c4 <HAL_GetTick>
 80041fe:	0003      	movs	r3, r0
 8004200:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800420a:	4b41      	ldr	r3, [pc, #260]	; (8004310 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	0013      	movs	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	189b      	adds	r3, r3, r2
 8004214:	00da      	lsls	r2, r3, #3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	0d1b      	lsrs	r3, r3, #20
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	4353      	muls	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004220:	e068      	b.n	80042f4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	23c0      	movs	r3, #192	; 0xc0
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	429a      	cmp	r2, r3
 800422a:	d10a      	bne.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	2117      	movs	r1, #23
 800423a:	187b      	adds	r3, r7, r1
 800423c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800423e:	187b      	adds	r3, r7, r1
 8004240:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	d055      	beq.n	80042f4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004248:	f7fe fabc 	bl	80027c4 <HAL_GetTick>
 800424c:	0002      	movs	r2, r0
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	429a      	cmp	r2, r3
 8004256:	d902      	bls.n	800425e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d142      	bne.n	80042e4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	21e0      	movs	r1, #224	; 0xe0
 800426a:	438a      	bics	r2, r1
 800426c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	2382      	movs	r3, #130	; 0x82
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	429a      	cmp	r2, r3
 8004278:	d113      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	429a      	cmp	r2, r3
 8004284:	d005      	beq.n	8004292 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	429a      	cmp	r2, r3
 8004290:	d107      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2140      	movs	r1, #64	; 0x40
 800429e:	438a      	bics	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	019b      	lsls	r3, r3, #6
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d110      	bne.n	80042d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4916      	ldr	r1, [pc, #88]	; (8004314 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	0189      	lsls	r1, r1, #6
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	225d      	movs	r2, #93	; 0x5d
 80042d4:	2101      	movs	r1, #1
 80042d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	225c      	movs	r2, #92	; 0x5c
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e010      	b.n	8004306 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d18e      	bne.n	8004222 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b00a      	add	sp, #40	; 0x28
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	20000048 	.word	0x20000048
 8004314:	ffffdfff 	.word	0xffffdfff

08004318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	23c0      	movs	r3, #192	; 0xc0
 8004328:	0159      	lsls	r1, r3, #5
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	0013      	movs	r3, r2
 8004332:	2200      	movs	r2, #0
 8004334:	f7ff ff4e 	bl	80041d4 <SPI_WaitFifoStateUntilTimeout>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d007      	beq.n	800434c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004340:	2220      	movs	r2, #32
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e027      	b.n	800439c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	0013      	movs	r3, r2
 8004356:	2200      	movs	r2, #0
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	f7ff fead 	bl	80040b8 <SPI_WaitFlagStateUntilTimeout>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d007      	beq.n	8004372 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	2220      	movs	r2, #32
 8004368:	431a      	orrs	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e014      	b.n	800439c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	23c0      	movs	r3, #192	; 0xc0
 8004376:	00d9      	lsls	r1, r3, #3
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	0013      	movs	r3, r2
 8004380:	2200      	movs	r2, #0
 8004382:	f7ff ff27 	bl	80041d4 <SPI_WaitFifoStateUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d007      	beq.n	800439a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	2220      	movs	r2, #32
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e000      	b.n	800439c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e042      	b.n	800443c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	223d      	movs	r2, #61	; 0x3d
 80043ba:	5c9b      	ldrb	r3, [r3, r2]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223c      	movs	r2, #60	; 0x3c
 80043c6:	2100      	movs	r1, #0
 80043c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fe f813 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	223d      	movs	r2, #61	; 0x3d
 80043d6:	2102      	movs	r1, #2
 80043d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	0019      	movs	r1, r3
 80043e4:	0010      	movs	r0, r2
 80043e6:	f000 fd09 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2246      	movs	r2, #70	; 0x46
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	223e      	movs	r2, #62	; 0x3e
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223f      	movs	r2, #63	; 0x3f
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2241      	movs	r2, #65	; 0x41
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2242      	movs	r2, #66	; 0x42
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2243      	movs	r2, #67	; 0x43
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2244      	movs	r2, #68	; 0x44
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2245      	movs	r2, #69	; 0x45
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223d      	movs	r2, #61	; 0x3d
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	223d      	movs	r2, #61	; 0x3d
 8004450:	5c9b      	ldrb	r3, [r3, r2]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d001      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e03b      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	223d      	movs	r2, #61	; 0x3d
 8004460:	2102      	movs	r1, #2
 8004462:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2101      	movs	r1, #1
 8004470:	430a      	orrs	r2, r1
 8004472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_TIM_Base_Start_IT+0x98>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <HAL_TIM_Base_Start_IT+0x5a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	05db      	lsls	r3, r3, #23
 8004486:	429a      	cmp	r2, r3
 8004488:	d009      	beq.n	800449e <HAL_TIM_Base_Start_IT+0x5a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIM_Base_Start_IT+0x5a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d111      	bne.n	80044c2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2207      	movs	r2, #7
 80044a6:	4013      	ands	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d010      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2101      	movs	r1, #1
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	e007      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	430a      	orrs	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40014000 	.word	0x40014000

080044e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	438a      	bics	r2, r1
 80044fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	4a0d      	ldr	r2, [pc, #52]	; (800453c <HAL_TIM_Base_Stop_IT+0x54>)
 8004508:	4013      	ands	r3, r2
 800450a:	d10d      	bne.n	8004528 <HAL_TIM_Base_Stop_IT+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <HAL_TIM_Base_Stop_IT+0x58>)
 8004514:	4013      	ands	r3, r2
 8004516:	d107      	bne.n	8004528 <HAL_TIM_Base_Stop_IT+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	438a      	bics	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223d      	movs	r2, #61	; 0x3d
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b002      	add	sp, #8
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	00001111 	.word	0x00001111
 8004540:	00000444 	.word	0x00000444

08004544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e042      	b.n	80045dc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	223d      	movs	r2, #61	; 0x3d
 800455a:	5c9b      	ldrb	r3, [r3, r2]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	223c      	movs	r2, #60	; 0x3c
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f000 f839 	bl	80045e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	223d      	movs	r2, #61	; 0x3d
 8004576:	2102      	movs	r1, #2
 8004578:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	0019      	movs	r1, r3
 8004584:	0010      	movs	r0, r2
 8004586:	f000 fc39 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2246      	movs	r2, #70	; 0x46
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	223e      	movs	r2, #62	; 0x3e
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	223f      	movs	r2, #63	; 0x3f
 800459e:	2101      	movs	r1, #1
 80045a0:	5499      	strb	r1, [r3, r2]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2240      	movs	r2, #64	; 0x40
 80045a6:	2101      	movs	r1, #1
 80045a8:	5499      	strb	r1, [r3, r2]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2241      	movs	r2, #65	; 0x41
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2242      	movs	r2, #66	; 0x42
 80045b6:	2101      	movs	r1, #1
 80045b8:	5499      	strb	r1, [r3, r2]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2243      	movs	r2, #67	; 0x43
 80045be:	2101      	movs	r1, #1
 80045c0:	5499      	strb	r1, [r3, r2]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2244      	movs	r2, #68	; 0x44
 80045c6:	2101      	movs	r1, #1
 80045c8:	5499      	strb	r1, [r3, r2]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2245      	movs	r2, #69	; 0x45
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	223d      	movs	r2, #61	; 0x3d
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <HAL_TIM_PWM_Start+0x22>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	223e      	movs	r2, #62	; 0x3e
 8004608:	5c9b      	ldrb	r3, [r3, r2]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	4193      	sbcs	r3, r2
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e01f      	b.n	8004656 <HAL_TIM_PWM_Start+0x62>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d108      	bne.n	800462e <HAL_TIM_PWM_Start+0x3a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	223f      	movs	r2, #63	; 0x3f
 8004620:	5c9b      	ldrb	r3, [r3, r2]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	1e5a      	subs	r2, r3, #1
 8004628:	4193      	sbcs	r3, r2
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e013      	b.n	8004656 <HAL_TIM_PWM_Start+0x62>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d108      	bne.n	8004646 <HAL_TIM_PWM_Start+0x52>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	4193      	sbcs	r3, r2
 8004642:	b2db      	uxtb	r3, r3
 8004644:	e007      	b.n	8004656 <HAL_TIM_PWM_Start+0x62>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2241      	movs	r2, #65	; 0x41
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	1e5a      	subs	r2, r3, #1
 8004652:	4193      	sbcs	r3, r2
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e074      	b.n	8004748 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0x7a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	223e      	movs	r2, #62	; 0x3e
 8004668:	2102      	movs	r1, #2
 800466a:	5499      	strb	r1, [r3, r2]
 800466c:	e013      	b.n	8004696 <HAL_TIM_PWM_Start+0xa2>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0x8a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	223f      	movs	r2, #63	; 0x3f
 8004678:	2102      	movs	r1, #2
 800467a:	5499      	strb	r1, [r3, r2]
 800467c:	e00b      	b.n	8004696 <HAL_TIM_PWM_Start+0xa2>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0x9a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	2102      	movs	r1, #2
 800468a:	5499      	strb	r1, [r3, r2]
 800468c:	e003      	b.n	8004696 <HAL_TIM_PWM_Start+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2241      	movs	r2, #65	; 0x41
 8004692:	2102      	movs	r1, #2
 8004694:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	2201      	movs	r2, #1
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 fec2 	bl	8005428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_TIM_PWM_Start+0x15c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_TIM_PWM_Start+0xd8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a28      	ldr	r2, [pc, #160]	; (8004754 <HAL_TIM_PWM_Start+0x160>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_TIM_PWM_Start+0xd8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a26      	ldr	r2, [pc, #152]	; (8004758 <HAL_TIM_PWM_Start+0x164>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIM_PWM_Start+0xd8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a25      	ldr	r2, [pc, #148]	; (800475c <HAL_TIM_PWM_Start+0x168>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_PWM_Start+0xdc>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_TIM_PWM_Start+0xde>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	0209      	lsls	r1, r1, #8
 80046e4:	430a      	orrs	r2, r1
 80046e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_TIM_PWM_Start+0x15c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <HAL_TIM_PWM_Start+0x11e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	05db      	lsls	r3, r3, #23
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d009      	beq.n	8004712 <HAL_TIM_PWM_Start+0x11e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_TIM_PWM_Start+0x16c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_TIM_PWM_Start+0x11e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <HAL_TIM_PWM_Start+0x160>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d111      	bne.n	8004736 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2207      	movs	r2, #7
 800471a:	4013      	ands	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d010      	beq.n	8004746 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	e007      	b.n	8004746 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b004      	add	sp, #16
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800
 8004760:	40000400 	.word	0x40000400

08004764 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	0018      	movs	r0, r3
 8004778:	f000 fe56 	bl	8005428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <HAL_TIM_PWM_Stop+0xdc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_TIM_PWM_Stop+0x40>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2e      	ldr	r2, [pc, #184]	; (8004844 <HAL_TIM_PWM_Stop+0xe0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIM_PWM_Stop+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2c      	ldr	r2, [pc, #176]	; (8004848 <HAL_TIM_PWM_Stop+0xe4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_PWM_Stop+0x40>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2b      	ldr	r2, [pc, #172]	; (800484c <HAL_TIM_PWM_Stop+0xe8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_PWM_Stop+0x44>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_TIM_PWM_Stop+0x46>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a26      	ldr	r2, [pc, #152]	; (8004850 <HAL_TIM_PWM_Stop+0xec>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	d10d      	bne.n	80047d6 <HAL_TIM_PWM_Stop+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4a24      	ldr	r2, [pc, #144]	; (8004854 <HAL_TIM_PWM_Stop+0xf0>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	d107      	bne.n	80047d6 <HAL_TIM_PWM_Stop+0x72>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4921      	ldr	r1, [pc, #132]	; (8004858 <HAL_TIM_PWM_Stop+0xf4>)
 80047d2:	400a      	ands	r2, r1
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_TIM_PWM_Stop+0xec>)
 80047de:	4013      	ands	r3, r2
 80047e0:	d10d      	bne.n	80047fe <HAL_TIM_PWM_Stop+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_TIM_PWM_Stop+0xf0>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	d107      	bne.n	80047fe <HAL_TIM_PWM_Stop+0x9a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2101      	movs	r1, #1
 80047fa:	438a      	bics	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Stop+0xaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	223e      	movs	r2, #62	; 0x3e
 8004808:	2101      	movs	r1, #1
 800480a:	5499      	strb	r1, [r3, r2]
 800480c:	e013      	b.n	8004836 <HAL_TIM_PWM_Stop+0xd2>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Stop+0xba>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	223f      	movs	r2, #63	; 0x3f
 8004818:	2101      	movs	r1, #1
 800481a:	5499      	strb	r1, [r3, r2]
 800481c:	e00b      	b.n	8004836 <HAL_TIM_PWM_Stop+0xd2>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Stop+0xca>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	2101      	movs	r1, #1
 800482a:	5499      	strb	r1, [r3, r2]
 800482c:	e003      	b.n	8004836 <HAL_TIM_PWM_Stop+0xd2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2241      	movs	r2, #65	; 0x41
 8004832:	2101      	movs	r1, #1
 8004834:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800
 8004850:	00001111 	.word	0x00001111
 8004854:	00000444 	.word	0x00000444
 8004858:	ffff7fff 	.word	0xffff7fff

0800485c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2202      	movs	r2, #2
 800486c:	4013      	ands	r3, r2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d124      	bne.n	80048bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2202      	movs	r2, #2
 800487a:	4013      	ands	r3, r2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11d      	bne.n	80048bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2203      	movs	r2, #3
 8004886:	4252      	negs	r2, r2
 8004888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2203      	movs	r2, #3
 8004898:	4013      	ands	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0018      	movs	r0, r3
 80048a0:	f000 fa94 	bl	8004dcc <HAL_TIM_IC_CaptureCallback>
 80048a4:	e007      	b.n	80048b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 fa87 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f000 fa93 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2204      	movs	r2, #4
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d125      	bne.n	8004916 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2204      	movs	r2, #4
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11e      	bne.n	8004916 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2205      	movs	r2, #5
 80048de:	4252      	negs	r2, r2
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	23c0      	movs	r3, #192	; 0xc0
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4013      	ands	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 fa67 	bl	8004dcc <HAL_TIM_IC_CaptureCallback>
 80048fe:	e007      	b.n	8004910 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0018      	movs	r0, r3
 8004904:	f000 fa5a 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0018      	movs	r0, r3
 800490c:	f000 fa66 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2208      	movs	r2, #8
 800491e:	4013      	ands	r3, r2
 8004920:	2b08      	cmp	r3, #8
 8004922:	d124      	bne.n	800496e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2208      	movs	r2, #8
 800492c:	4013      	ands	r3, r2
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11d      	bne.n	800496e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2209      	movs	r2, #9
 8004938:	4252      	negs	r2, r2
 800493a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2204      	movs	r2, #4
 8004940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2203      	movs	r2, #3
 800494a:	4013      	ands	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 fa3b 	bl	8004dcc <HAL_TIM_IC_CaptureCallback>
 8004956:	e007      	b.n	8004968 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fa2e 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	0018      	movs	r0, r3
 8004964:	f000 fa3a 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2210      	movs	r2, #16
 8004976:	4013      	ands	r3, r2
 8004978:	2b10      	cmp	r3, #16
 800497a:	d125      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2210      	movs	r2, #16
 8004984:	4013      	ands	r3, r2
 8004986:	2b10      	cmp	r3, #16
 8004988:	d11e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2211      	movs	r2, #17
 8004990:	4252      	negs	r2, r2
 8004992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2208      	movs	r2, #8
 8004998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	23c0      	movs	r3, #192	; 0xc0
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4013      	ands	r3, r2
 80049a6:	d004      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fa0e 	bl	8004dcc <HAL_TIM_IC_CaptureCallback>
 80049b0:	e007      	b.n	80049c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 fa01 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 fa0d 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2201      	movs	r2, #1
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10f      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	4013      	ands	r3, r2
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d108      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2202      	movs	r2, #2
 80049ea:	4252      	negs	r2, r2
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fd fb55 	bl	80020a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d10f      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d108      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2281      	movs	r2, #129	; 0x81
 8004a18:	4252      	negs	r2, r2
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 fdea 	bl	80055f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d10f      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2240      	movs	r2, #64	; 0x40
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d108      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2241      	movs	r2, #65	; 0x41
 8004a46:	4252      	negs	r2, r2
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 f9cd 	bl	8004dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d10f      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d108      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2221      	movs	r2, #33	; 0x21
 8004a74:	4252      	negs	r2, r2
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 fdb4 	bl	80055e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2317      	movs	r3, #23
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	223c      	movs	r2, #60	; 0x3c
 8004aa0:	5c9b      	ldrb	r3, [r3, r2]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x22>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ad      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	223c      	movs	r2, #60	; 0x3c
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d100      	bne.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x32>
 8004ab8:	e076      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d900      	bls.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004ac0:	e095      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x166>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d04e      	beq.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d900      	bls.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004ace:	e08e      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x166>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x56>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d021      	beq.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004adc:	e087      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0011      	movs	r1, r2
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 fa08 	bl	8004efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2108      	movs	r1, #8
 8004af8:	430a      	orrs	r2, r1
 8004afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2104      	movs	r1, #4
 8004b08:	438a      	bics	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	619a      	str	r2, [r3, #24]
      break;
 8004b1e:	e06b      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	0011      	movs	r1, r2
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 fa6f 	bl	800500c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	0109      	lsls	r1, r1, #4
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4931      	ldr	r1, [pc, #196]	; (8004c10 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	021a      	lsls	r2, r3, #8
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	619a      	str	r2, [r3, #24]
      break;
 8004b64:	e048      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 fad0 	bl	8005114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2108      	movs	r1, #8
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2104      	movs	r1, #4
 8004b90:	438a      	bics	r2, r1
 8004b92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69d9      	ldr	r1, [r3, #28]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	61da      	str	r2, [r3, #28]
      break;
 8004ba6:	e027      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	0011      	movs	r1, r2
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 fb35 	bl	8005220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	0109      	lsls	r1, r1, #4
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	490f      	ldr	r1, [pc, #60]	; (8004c10 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69d9      	ldr	r1, [r3, #28]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	61da      	str	r2, [r3, #28]
      break;
 8004bec:	e004      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004bee:	2317      	movs	r3, #23
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
      break;
 8004bf6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	223c      	movs	r2, #60	; 0x3c
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

  return status;
 8004c00:	2317      	movs	r3, #23
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	781b      	ldrb	r3, [r3, #0]
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b006      	add	sp, #24
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	fffffbff 	.word	0xfffffbff

08004c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	230f      	movs	r3, #15
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	223c      	movs	r2, #60	; 0x3c
 8004c2a:	5c9b      	ldrb	r3, [r3, r2]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_ConfigClockSource+0x20>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e0bc      	b.n	8004dae <HAL_TIM_ConfigClockSource+0x19a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	223c      	movs	r2, #60	; 0x3c
 8004c38:	2101      	movs	r1, #1
 8004c3a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	223d      	movs	r2, #61	; 0x3d
 8004c40:	2102      	movs	r1, #2
 8004c42:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2277      	movs	r2, #119	; 0x77
 8004c50:	4393      	bics	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	0192      	lsls	r2, r2, #6
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xde>
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	0192      	lsls	r2, r2, #6
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d900      	bls.n	8004c7a <HAL_TIM_ConfigClockSource+0x66>
 8004c78:	e088      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	0152      	lsls	r2, r2, #5
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d100      	bne.n	8004c84 <HAL_TIM_ConfigClockSource+0x70>
 8004c82:	e088      	b.n	8004d96 <HAL_TIM_ConfigClockSource+0x182>
 8004c84:	2280      	movs	r2, #128	; 0x80
 8004c86:	0152      	lsls	r2, r2, #5
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d900      	bls.n	8004c8e <HAL_TIM_ConfigClockSource+0x7a>
 8004c8c:	e07e      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004c8e:	2b70      	cmp	r3, #112	; 0x70
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0xb0>
 8004c92:	d900      	bls.n	8004c96 <HAL_TIM_ConfigClockSource+0x82>
 8004c94:	e07a      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004c96:	2b60      	cmp	r3, #96	; 0x60
 8004c98:	d04f      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x126>
 8004c9a:	d900      	bls.n	8004c9e <HAL_TIM_ConfigClockSource+0x8a>
 8004c9c:	e076      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004c9e:	2b50      	cmp	r3, #80	; 0x50
 8004ca0:	d03b      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x106>
 8004ca2:	d900      	bls.n	8004ca6 <HAL_TIM_ConfigClockSource+0x92>
 8004ca4:	e072      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d057      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x146>
 8004caa:	d900      	bls.n	8004cae <HAL_TIM_ConfigClockSource+0x9a>
 8004cac:	e06e      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004cae:	2b30      	cmp	r3, #48	; 0x30
 8004cb0:	d063      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x166>
 8004cb2:	d86b      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d060      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x166>
 8004cb8:	d868      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d05d      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x166>
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d05b      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x166>
 8004cc2:	e063      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd4:	f000 fb88 	bl	80053e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2277      	movs	r2, #119	; 0x77
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e052      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d02:	f000 fb71 	bl	80053e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	01c9      	lsls	r1, r1, #7
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
      break;
 8004d18:	e03e      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	001a      	movs	r2, r3
 8004d28:	f000 fae4 	bl	80052f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2150      	movs	r1, #80	; 0x50
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 fb3e 	bl	80053b4 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e02e      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d46:	001a      	movs	r2, r3
 8004d48:	f000 fb02 	bl	8005350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2160      	movs	r1, #96	; 0x60
 8004d52:	0018      	movs	r0, r3
 8004d54:	f000 fb2e 	bl	80053b4 <TIM_ITRx_SetConfig>
      break;
 8004d58:	e01e      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	001a      	movs	r2, r3
 8004d68:	f000 fac4 	bl	80052f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2140      	movs	r1, #64	; 0x40
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 fb1e 	bl	80053b4 <TIM_ITRx_SetConfig>
      break;
 8004d78:	e00e      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	0019      	movs	r1, r3
 8004d84:	0010      	movs	r0, r2
 8004d86:	f000 fb15 	bl	80053b4 <TIM_ITRx_SetConfig>
      break;
 8004d8a:	e005      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004d8c:	230f      	movs	r3, #15
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
      break;
 8004d94:	e000      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004d96:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	223d      	movs	r2, #61	; 0x3d
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	223c      	movs	r2, #60	; 0x3c
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

  return status;
 8004da8:	230f      	movs	r3, #15
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	781b      	ldrb	r3, [r3, #0]
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	ffff00ff 	.word	0xffff00ff

08004dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b002      	add	sp, #8
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <TIM_Base_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d008      	beq.n	8004e26 <TIM_Base_SetConfig+0x2a>
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x2a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <TIM_Base_SetConfig+0xe8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2270      	movs	r2, #112	; 0x70
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <TIM_Base_SetConfig+0xe4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <TIM_Base_SetConfig+0x76>
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	05db      	lsls	r3, r3, #23
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d013      	beq.n	8004e72 <TIM_Base_SetConfig+0x76>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <TIM_Base_SetConfig+0xe8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00f      	beq.n	8004e72 <TIM_Base_SetConfig+0x76>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <TIM_Base_SetConfig+0xec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <TIM_Base_SetConfig+0x76>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	; (8004eec <TIM_Base_SetConfig+0xf0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <TIM_Base_SetConfig+0x76>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <TIM_Base_SetConfig+0xf4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d003      	beq.n	8004e72 <TIM_Base_SetConfig+0x76>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <TIM_Base_SetConfig+0xf8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <TIM_Base_SetConfig+0xfc>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	4393      	bics	r3, r2
 8004e8a:	001a      	movs	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0xce>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <TIM_Base_SetConfig+0xf0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0xce>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <TIM_Base_SetConfig+0xf4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0xce>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a0b      	ldr	r2, [pc, #44]	; (8004ef4 <TIM_Base_SetConfig+0xf8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d103      	bne.n	8004ed2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	615a      	str	r2, [r3, #20]
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b004      	add	sp, #16
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40002000 	.word	0x40002000
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	fffffcff 	.word	0xfffffcff

08004efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4393      	bics	r3, r2
 8004f0e:	001a      	movs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2270      	movs	r2, #112	; 0x70
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2203      	movs	r2, #3
 8004f32:	4393      	bics	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2202      	movs	r2, #2
 8004f44:	4393      	bics	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <TIM_OC1_SetConfig+0xf8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_OC1_SetConfig+0x76>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <TIM_OC1_SetConfig+0xfc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_OC1_SetConfig+0x76>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <TIM_OC1_SetConfig+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_OC1_SetConfig+0x76>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <TIM_OC1_SetConfig+0x104>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10c      	bne.n	8004f8c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2208      	movs	r2, #8
 8004f76:	4393      	bics	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2204      	movs	r2, #4
 8004f88:	4393      	bics	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <TIM_OC1_SetConfig+0xf8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_OC1_SetConfig+0xb0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <TIM_OC1_SetConfig+0xfc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_OC1_SetConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <TIM_OC1_SetConfig+0x100>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC1_SetConfig+0xb0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a16      	ldr	r2, [pc, #88]	; (8005000 <TIM_OC1_SetConfig+0x104>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d111      	bne.n	8004fd0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <TIM_OC1_SetConfig+0x108>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <TIM_OC1_SetConfig+0x10c>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b006      	add	sp, #24
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800
 8005004:	fffffeff 	.word	0xfffffeff
 8005008:	fffffdff 	.word	0xfffffdff

0800500c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	2210      	movs	r2, #16
 800501c:	4393      	bics	r3, r2
 800501e:	001a      	movs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <TIM_OC2_SetConfig+0xe8>)
 800503a:	4013      	ands	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <TIM_OC2_SetConfig+0xec>)
 8005042:	4013      	ands	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2220      	movs	r2, #32
 8005056:	4393      	bics	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a24      	ldr	r2, [pc, #144]	; (80050fc <TIM_OC2_SetConfig+0xf0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10d      	bne.n	800508a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	4393      	bics	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2240      	movs	r2, #64	; 0x40
 8005086:	4393      	bics	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1b      	ldr	r2, [pc, #108]	; (80050fc <TIM_OC2_SetConfig+0xf0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_OC2_SetConfig+0x9e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1a      	ldr	r2, [pc, #104]	; (8005100 <TIM_OC2_SetConfig+0xf4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_OC2_SetConfig+0x9e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a19      	ldr	r2, [pc, #100]	; (8005104 <TIM_OC2_SetConfig+0xf8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC2_SetConfig+0x9e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <TIM_OC2_SetConfig+0xfc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <TIM_OC2_SetConfig+0x100>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4a16      	ldr	r2, [pc, #88]	; (8005110 <TIM_OC2_SetConfig+0x104>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b006      	add	sp, #24
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	ffff8fff 	.word	0xffff8fff
 80050f8:	fffffcff 	.word	0xfffffcff
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800
 800510c:	fffffbff 	.word	0xfffffbff
 8005110:	fffff7ff 	.word	0xfffff7ff

08005114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	4a35      	ldr	r2, [pc, #212]	; (80051f8 <TIM_OC3_SetConfig+0xe4>)
 8005124:	401a      	ands	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2270      	movs	r2, #112	; 0x70
 8005140:	4393      	bics	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2203      	movs	r2, #3
 8005148:	4393      	bics	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <TIM_OC3_SetConfig+0xe8>)
 800515a:	4013      	ands	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a24      	ldr	r2, [pc, #144]	; (8005200 <TIM_OC3_SetConfig+0xec>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10d      	bne.n	800518e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4a23      	ldr	r2, [pc, #140]	; (8005204 <TIM_OC3_SetConfig+0xf0>)
 8005176:	4013      	ands	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <TIM_OC3_SetConfig+0xf4>)
 800518a:	4013      	ands	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC3_SetConfig+0xec>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_OC3_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <TIM_OC3_SetConfig+0xf8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC3_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <TIM_OC3_SetConfig+0xfc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC3_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <TIM_OC3_SetConfig+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d113      	bne.n	80051d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <TIM_OC3_SetConfig+0x104>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4a18      	ldr	r2, [pc, #96]	; (800521c <TIM_OC3_SetConfig+0x108>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b006      	add	sp, #24
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	fffffeff 	.word	0xfffffeff
 80051fc:	fffffdff 	.word	0xfffffdff
 8005200:	40012c00 	.word	0x40012c00
 8005204:	fffff7ff 	.word	0xfffff7ff
 8005208:	fffffbff 	.word	0xfffffbff
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800
 8005218:	ffffefff 	.word	0xffffefff
 800521c:	ffffdfff 	.word	0xffffdfff

08005220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	4a28      	ldr	r2, [pc, #160]	; (80052d0 <TIM_OC4_SetConfig+0xb0>)
 8005230:	401a      	ands	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <TIM_OC4_SetConfig+0xb4>)
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <TIM_OC4_SetConfig+0xb8>)
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <TIM_OC4_SetConfig+0xbc>)
 8005268:	4013      	ands	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <TIM_OC4_SetConfig+0xc0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00b      	beq.n	8005298 <TIM_OC4_SetConfig+0x78>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_OC4_SetConfig+0xc4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <TIM_OC4_SetConfig+0x78>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <TIM_OC4_SetConfig+0xc8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC4_SetConfig+0x78>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <TIM_OC4_SetConfig+0xcc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d109      	bne.n	80052ac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <TIM_OC4_SetConfig+0xd0>)
 800529c:	4013      	ands	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	019b      	lsls	r3, r3, #6
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b006      	add	sp, #24
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	ffffefff 	.word	0xffffefff
 80052d4:	ffff8fff 	.word	0xffff8fff
 80052d8:	fffffcff 	.word	0xfffffcff
 80052dc:	ffffdfff 	.word	0xffffdfff
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	ffffbfff 	.word	0xffffbfff

080052f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	2201      	movs	r2, #1
 800530c:	4393      	bics	r3, r2
 800530e:	001a      	movs	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	22f0      	movs	r2, #240	; 0xf0
 800531e:	4393      	bics	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	220a      	movs	r2, #10
 8005330:	4393      	bics	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b006      	add	sp, #24
 800534e:	bd80      	pop	{r7, pc}

08005350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	2210      	movs	r2, #16
 8005362:	4393      	bics	r3, r2
 8005364:	001a      	movs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <TIM_TI2_ConfigInputStage+0x60>)
 800537a:	4013      	ands	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	031b      	lsls	r3, r3, #12
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	22a0      	movs	r2, #160	; 0xa0
 800538c:	4393      	bics	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b006      	add	sp, #24
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	ffff0fff 	.word	0xffff0fff

080053b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2270      	movs	r2, #112	; 0x70
 80053c8:	4393      	bics	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	2207      	movs	r2, #7
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	609a      	str	r2, [r3, #8]
}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b004      	add	sp, #16
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <TIM_ETR_SetConfig+0x3c>)
 8005400:	4013      	ands	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	431a      	orrs	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	b006      	add	sp, #24
 8005422:	bd80      	pop	{r7, pc}
 8005424:	ffff00ff 	.word	0xffff00ff

08005428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	221f      	movs	r2, #31
 8005438:	4013      	ands	r3, r2
 800543a:	2201      	movs	r2, #1
 800543c:	409a      	lsls	r2, r3
 800543e:	0013      	movs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	43d2      	mvns	r2, r2
 800544a:	401a      	ands	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	211f      	movs	r1, #31
 8005458:	400b      	ands	r3, r1
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4099      	lsls	r1, r3
 800545e:	000b      	movs	r3, r1
 8005460:	431a      	orrs	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	b006      	add	sp, #24
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	223c      	movs	r2, #60	; 0x3c
 800547e:	5c9b      	ldrb	r3, [r3, r2]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e047      	b.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	223c      	movs	r2, #60	; 0x3c
 800548c:	2101      	movs	r1, #1
 800548e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	223d      	movs	r2, #61	; 0x3d
 8005494:	2102      	movs	r1, #2
 8005496:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2270      	movs	r2, #112	; 0x70
 80054ac:	4393      	bics	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00f      	beq.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	05db      	lsls	r3, r3, #23
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d009      	beq.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a11      	ldr	r2, [pc, #68]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a10      	ldr	r2, [pc, #64]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10c      	bne.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	4393      	bics	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	223d      	movs	r2, #61	; 0x3d
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	223c      	movs	r2, #60	; 0x3c
 8005512:	2100      	movs	r1, #0
 8005514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b004      	add	sp, #16
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40000400 	.word	0x40000400
 8005528:	40014000 	.word	0x40014000

0800552c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	223c      	movs	r2, #60	; 0x3c
 800553e:	5c9b      	ldrb	r3, [r3, r2]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005544:	2302      	movs	r3, #2
 8005546:	e03e      	b.n	80055c6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	223c      	movs	r2, #60	; 0x3c
 800554c:	2101      	movs	r1, #1
 800554e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	22ff      	movs	r2, #255	; 0xff
 8005554:	4393      	bics	r3, r2
 8005556:	001a      	movs	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005564:	401a      	ands	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005572:	401a      	ands	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005580:	401a      	ands	r2, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800558e:	401a      	ands	r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800559c:	401a      	ands	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80055aa:	401a      	ands	r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	223c      	movs	r2, #60	; 0x3c
 80055c0:	2100      	movs	r1, #0
 80055c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b004      	add	sp, #16
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	fffffcff 	.word	0xfffffcff
 80055d4:	fffffbff 	.word	0xfffffbff
 80055d8:	fffff7ff 	.word	0xfffff7ff
 80055dc:	ffffefff 	.word	0xffffefff
 80055e0:	ffffdfff 	.word	0xffffdfff
 80055e4:	ffffbfff 	.word	0xffffbfff

080055e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e044      	b.n	80056a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d107      	bne.n	8005632 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2278      	movs	r2, #120	; 0x78
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f7fc ff97 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2224      	movs	r2, #36	; 0x24
 8005636:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2101      	movs	r1, #1
 8005644:	438a      	bics	r2, r1
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fc2c 	bl	8005ea8 <UART_SetConfig>
 8005650:	0003      	movs	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e024      	b.n	80056a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fe07 	bl	8006278 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	490d      	ldr	r1, [pc, #52]	; (80056ac <HAL_UART_Init+0xa4>)
 8005676:	400a      	ands	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	212a      	movs	r1, #42	; 0x2a
 8005686:	438a      	bics	r2, r1
 8005688:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2101      	movs	r1, #1
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0018      	movs	r0, r3
 800569e:	f000 fe9f 	bl	80063e0 <UART_CheckIdleState>
 80056a2:	0003      	movs	r3, r0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	ffffb7ff 	.word	0xffffb7ff

080056b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	; 0x28
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	1dbb      	adds	r3, r7, #6
 80056be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d000      	beq.n	80056ca <HAL_UART_Transmit+0x1a>
 80056c8:	e08d      	b.n	80057e6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_UART_Transmit+0x28>
 80056d0:	1dbb      	adds	r3, r7, #6
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e085      	b.n	80057e8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	015b      	lsls	r3, r3, #5
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d109      	bne.n	80056fc <HAL_UART_Transmit+0x4c>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2201      	movs	r2, #1
 80056f4:	4013      	ands	r3, r2
 80056f6:	d001      	beq.n	80056fc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e075      	b.n	80057e8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2284      	movs	r2, #132	; 0x84
 8005700:	2100      	movs	r1, #0
 8005702:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2221      	movs	r2, #33	; 0x21
 8005708:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570a:	f7fd f85b 	bl	80027c4 <HAL_GetTick>
 800570e:	0003      	movs	r3, r0
 8005710:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1dba      	adds	r2, r7, #6
 8005716:	2150      	movs	r1, #80	; 0x50
 8005718:	8812      	ldrh	r2, [r2, #0]
 800571a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1dba      	adds	r2, r7, #6
 8005720:	2152      	movs	r1, #82	; 0x52
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	2380      	movs	r3, #128	; 0x80
 800572c:	015b      	lsls	r3, r3, #5
 800572e:	429a      	cmp	r2, r3
 8005730:	d108      	bne.n	8005744 <HAL_UART_Transmit+0x94>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e003      	b.n	800574c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800574c:	e030      	b.n	80057b0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	0013      	movs	r3, r2
 8005758:	2200      	movs	r2, #0
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	f000 fee8 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d004      	beq.n	800576e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e03c      	b.n	80057e8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	881a      	ldrh	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	05d2      	lsls	r2, r2, #23
 800577e:	0dd2      	lsrs	r2, r2, #23
 8005780:	b292      	uxth	r2, r2
 8005782:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	3302      	adds	r3, #2
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e008      	b.n	800579e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	b292      	uxth	r2, r2
 8005796:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2252      	movs	r2, #82	; 0x52
 80057a2:	5a9b      	ldrh	r3, [r3, r2]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b299      	uxth	r1, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2252      	movs	r2, #82	; 0x52
 80057ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2252      	movs	r2, #82	; 0x52
 80057b4:	5a9b      	ldrh	r3, [r3, r2]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1c8      	bne.n	800574e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	0013      	movs	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	f000 feb1 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 80057ce:	1e03      	subs	r3, r0, #0
 80057d0:	d004      	beq.n	80057dc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e005      	b.n	80057e8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e000      	b.n	80057e8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80057e6:	2302      	movs	r3, #2
  }
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b008      	add	sp, #32
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	1dbb      	adds	r3, r7, #6
 80057fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2280      	movs	r2, #128	; 0x80
 8005802:	589b      	ldr	r3, [r3, r2]
 8005804:	2b20      	cmp	r3, #32
 8005806:	d145      	bne.n	8005894 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_UART_Receive_DMA+0x26>
 800580e:	1dbb      	adds	r3, r7, #6
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e03d      	b.n	8005896 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	015b      	lsls	r3, r3, #5
 8005822:	429a      	cmp	r2, r3
 8005824:	d109      	bne.n	800583a <HAL_UART_Receive_DMA+0x4a>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2201      	movs	r2, #1
 8005832:	4013      	ands	r3, r2
 8005834:	d001      	beq.n	800583a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e02d      	b.n	8005896 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d019      	beq.n	8005882 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800584e:	f3ef 8310 	mrs	r3, PRIMASK
 8005852:	613b      	str	r3, [r7, #16]
  return(result);
 8005854:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2180      	movs	r1, #128	; 0x80
 8005870:	04c9      	lsls	r1, r1, #19
 8005872:	430a      	orrs	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f383 8810 	msr	PRIMASK, r3
}
 8005880:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005882:	1dbb      	adds	r3, r7, #6
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 feba 	bl	8006604 <UART_Start_Receive_DMA>
 8005890:	0003      	movs	r3, r0
 8005892:	e000      	b.n	8005896 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b008      	add	sp, #32
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b0ab      	sub	sp, #172	; 0xac
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	22a4      	movs	r2, #164	; 0xa4
 80058b0:	18b9      	adds	r1, r7, r2
 80058b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	20a0      	movs	r0, #160	; 0xa0
 80058bc:	1839      	adds	r1, r7, r0
 80058be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	219c      	movs	r1, #156	; 0x9c
 80058c8:	1879      	adds	r1, r7, r1
 80058ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058cc:	0011      	movs	r1, r2
 80058ce:	18bb      	adds	r3, r7, r2
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a99      	ldr	r2, [pc, #612]	; (8005b38 <HAL_UART_IRQHandler+0x298>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	2298      	movs	r2, #152	; 0x98
 80058d8:	18bc      	adds	r4, r7, r2
 80058da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80058dc:	18bb      	adds	r3, r7, r2
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d114      	bne.n	800590e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2220      	movs	r2, #32
 80058ea:	4013      	ands	r3, r2
 80058ec:	d00f      	beq.n	800590e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058ee:	183b      	adds	r3, r7, r0
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2220      	movs	r2, #32
 80058f4:	4013      	ands	r3, r2
 80058f6:	d00a      	beq.n	800590e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d100      	bne.n	8005902 <HAL_UART_IRQHandler+0x62>
 8005900:	e29e      	b.n	8005e40 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	0010      	movs	r0, r2
 800590a:	4798      	blx	r3
      }
      return;
 800590c:	e298      	b.n	8005e40 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800590e:	2398      	movs	r3, #152	; 0x98
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d100      	bne.n	800591a <HAL_UART_IRQHandler+0x7a>
 8005918:	e114      	b.n	8005b44 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800591a:	239c      	movs	r3, #156	; 0x9c
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	d106      	bne.n	8005934 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005926:	23a0      	movs	r3, #160	; 0xa0
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a83      	ldr	r2, [pc, #524]	; (8005b3c <HAL_UART_IRQHandler+0x29c>)
 800592e:	4013      	ands	r3, r2
 8005930:	d100      	bne.n	8005934 <HAL_UART_IRQHandler+0x94>
 8005932:	e107      	b.n	8005b44 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005934:	23a4      	movs	r3, #164	; 0xa4
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	4013      	ands	r3, r2
 800593e:	d012      	beq.n	8005966 <HAL_UART_IRQHandler+0xc6>
 8005940:	23a0      	movs	r3, #160	; 0xa0
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4013      	ands	r3, r2
 800594c:	d00b      	beq.n	8005966 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2284      	movs	r2, #132	; 0x84
 800595a:	589b      	ldr	r3, [r3, r2]
 800595c:	2201      	movs	r2, #1
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2184      	movs	r1, #132	; 0x84
 8005964:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005966:	23a4      	movs	r3, #164	; 0xa4
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2202      	movs	r2, #2
 800596e:	4013      	ands	r3, r2
 8005970:	d011      	beq.n	8005996 <HAL_UART_IRQHandler+0xf6>
 8005972:	239c      	movs	r3, #156	; 0x9c
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2201      	movs	r2, #1
 800597a:	4013      	ands	r3, r2
 800597c:	d00b      	beq.n	8005996 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2202      	movs	r2, #2
 8005984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2284      	movs	r2, #132	; 0x84
 800598a:	589b      	ldr	r3, [r3, r2]
 800598c:	2204      	movs	r2, #4
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2184      	movs	r1, #132	; 0x84
 8005994:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005996:	23a4      	movs	r3, #164	; 0xa4
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2204      	movs	r2, #4
 800599e:	4013      	ands	r3, r2
 80059a0:	d011      	beq.n	80059c6 <HAL_UART_IRQHandler+0x126>
 80059a2:	239c      	movs	r3, #156	; 0x9c
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	4013      	ands	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2204      	movs	r2, #4
 80059b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2284      	movs	r2, #132	; 0x84
 80059ba:	589b      	ldr	r3, [r3, r2]
 80059bc:	2202      	movs	r2, #2
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2184      	movs	r1, #132	; 0x84
 80059c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059c6:	23a4      	movs	r3, #164	; 0xa4
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2208      	movs	r2, #8
 80059ce:	4013      	ands	r3, r2
 80059d0:	d017      	beq.n	8005a02 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059d2:	23a0      	movs	r3, #160	; 0xa0
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2220      	movs	r2, #32
 80059da:	4013      	ands	r3, r2
 80059dc:	d105      	bne.n	80059ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059de:	239c      	movs	r3, #156	; 0x9c
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2201      	movs	r2, #1
 80059e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059e8:	d00b      	beq.n	8005a02 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2208      	movs	r2, #8
 80059f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2284      	movs	r2, #132	; 0x84
 80059f6:	589b      	ldr	r3, [r3, r2]
 80059f8:	2208      	movs	r2, #8
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2184      	movs	r1, #132	; 0x84
 8005a00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a02:	23a4      	movs	r3, #164	; 0xa4
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <HAL_UART_IRQHandler+0x198>
 8005a10:	23a0      	movs	r3, #160	; 0xa0
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	04db      	lsls	r3, r3, #19
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d00c      	beq.n	8005a38 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2284      	movs	r2, #132	; 0x84
 8005a2c:	589b      	ldr	r3, [r3, r2]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2184      	movs	r1, #132	; 0x84
 8005a36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2284      	movs	r2, #132	; 0x84
 8005a3c:	589b      	ldr	r3, [r3, r2]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d100      	bne.n	8005a44 <HAL_UART_IRQHandler+0x1a4>
 8005a42:	e1ff      	b.n	8005e44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a44:	23a4      	movs	r3, #164	; 0xa4
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a50:	23a0      	movs	r3, #160	; 0xa0
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2220      	movs	r2, #32
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d008      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	0010      	movs	r0, r2
 8005a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2284      	movs	r2, #132	; 0x84
 8005a72:	589b      	ldr	r3, [r3, r2]
 8005a74:	2194      	movs	r1, #148	; 0x94
 8005a76:	187a      	adds	r2, r7, r1
 8005a78:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2240      	movs	r2, #64	; 0x40
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d004      	beq.n	8005a92 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2228      	movs	r2, #40	; 0x28
 8005a8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a90:	d047      	beq.n	8005b22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 fe79 	bl	800678c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2240      	movs	r2, #64	; 0x40
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d137      	bne.n	8005b18 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8005aac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab0:	2090      	movs	r0, #144	; 0x90
 8005ab2:	183a      	adds	r2, r7, r0
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	438a      	bics	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]
 8005ad2:	183b      	adds	r3, r7, r0
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d012      	beq.n	8005b0e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <HAL_UART_IRQHandler+0x2a0>)
 8005aee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fd f80f 	bl	8002b18 <HAL_DMA_Abort_IT>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d01a      	beq.n	8005b34 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b08:	0018      	movs	r0, r3
 8005b0a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e012      	b.n	8005b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f9b5 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b16:	e00d      	b.n	8005b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f000 f9b0 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e008      	b.n	8005b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f9ab 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2284      	movs	r2, #132	; 0x84
 8005b2e:	2100      	movs	r1, #0
 8005b30:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b32:	e187      	b.n	8005e44 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	46c0      	nop			; (mov r8, r8)
    return;
 8005b36:	e185      	b.n	8005e44 <HAL_UART_IRQHandler+0x5a4>
 8005b38:	0000080f 	.word	0x0000080f
 8005b3c:	04000120 	.word	0x04000120
 8005b40:	08006a47 	.word	0x08006a47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d000      	beq.n	8005b4e <HAL_UART_IRQHandler+0x2ae>
 8005b4c:	e139      	b.n	8005dc2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b4e:	23a4      	movs	r3, #164	; 0xa4
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2210      	movs	r2, #16
 8005b56:	4013      	ands	r3, r2
 8005b58:	d100      	bne.n	8005b5c <HAL_UART_IRQHandler+0x2bc>
 8005b5a:	e132      	b.n	8005dc2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b5c:	23a0      	movs	r3, #160	; 0xa0
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	4013      	ands	r3, r2
 8005b66:	d100      	bne.n	8005b6a <HAL_UART_IRQHandler+0x2ca>
 8005b68:	e12b      	b.n	8005dc2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2240      	movs	r2, #64	; 0x40
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d000      	beq.n	8005b82 <HAL_UART_IRQHandler+0x2e2>
 8005b80:	e09f      	b.n	8005cc2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	217e      	movs	r1, #126	; 0x7e
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d100      	bne.n	8005b9a <HAL_UART_IRQHandler+0x2fa>
 8005b98:	e156      	b.n	8005e48 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2258      	movs	r2, #88	; 0x58
 8005b9e:	5a9b      	ldrh	r3, [r3, r2]
 8005ba0:	187a      	adds	r2, r7, r1
 8005ba2:	8812      	ldrh	r2, [r2, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d300      	bcc.n	8005baa <HAL_UART_IRQHandler+0x30a>
 8005ba8:	e14e      	b.n	8005e48 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	187a      	adds	r2, r7, r1
 8005bae:	215a      	movs	r1, #90	; 0x5a
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d06f      	beq.n	8005c9e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bc8:	2301      	movs	r3, #1
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bce:	f383 8810 	msr	PRIMASK, r3
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	499e      	ldr	r1, [pc, #632]	; (8005e58 <HAL_UART_IRQHandler+0x5b8>)
 8005be0:	400a      	ands	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	f383 8810 	msr	PRIMASK, r3
}
 8005bee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	677b      	str	r3, [r7, #116]	; 0x74
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2101      	movs	r1, #1
 8005c12:	438a      	bics	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c22:	f3ef 8310 	mrs	r3, PRIMASK
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c32:	f383 8810 	msr	PRIMASK, r3
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2140      	movs	r1, #64	; 0x40
 8005c44:	438a      	bics	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c4a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4e:	f383 8810 	msr	PRIMASK, r3
}
 8005c52:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	2120      	movs	r1, #32
 8005c5a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c62:	f3ef 8310 	mrs	r3, PRIMASK
 8005c66:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c72:	f383 8810 	msr	PRIMASK, r3
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2110      	movs	r1, #16
 8005c84:	438a      	bics	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8e:	f383 8810 	msr	PRIMASK, r3
}
 8005c92:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7fc ff05 	bl	8002aa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2258      	movs	r2, #88	; 0x58
 8005ca8:	5a9a      	ldrh	r2, [r3, r2]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	215a      	movs	r1, #90	; 0x5a
 8005cae:	5a5b      	ldrh	r3, [r3, r1]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 f8e8 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cc0:	e0c2      	b.n	8005e48 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2258      	movs	r2, #88	; 0x58
 8005cc6:	5a99      	ldrh	r1, [r3, r2]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	225a      	movs	r2, #90	; 0x5a
 8005ccc:	5a9b      	ldrh	r3, [r3, r2]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	208e      	movs	r0, #142	; 0x8e
 8005cd2:	183b      	adds	r3, r7, r0
 8005cd4:	1a8a      	subs	r2, r1, r2
 8005cd6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	225a      	movs	r2, #90	; 0x5a
 8005cdc:	5a9b      	ldrh	r3, [r3, r2]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d100      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x446>
 8005ce4:	e0b2      	b.n	8005e4c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005ce6:	183b      	adds	r3, r7, r0
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d100      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x450>
 8005cee:	e0ad      	b.n	8005e4c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf8:	2488      	movs	r4, #136	; 0x88
 8005cfa:	193a      	adds	r2, r7, r4
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	2301      	movs	r3, #1
 8005d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f383 8810 	msr	PRIMASK, r3
}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4951      	ldr	r1, [pc, #324]	; (8005e5c <HAL_UART_IRQHandler+0x5bc>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	193b      	adds	r3, r7, r4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d28:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d2e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	2484      	movs	r4, #132	; 0x84
 8005d32:	193a      	adds	r2, r7, r4
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	2301      	movs	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	438a      	bics	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]
 8005d52:	193b      	adds	r3, r7, r4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2280      	movs	r2, #128	; 0x80
 8005d64:	2120      	movs	r1, #32
 8005d66:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d74:	f3ef 8310 	mrs	r3, PRIMASK
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	2480      	movs	r4, #128	; 0x80
 8005d7e:	193a      	adds	r2, r7, r4
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	2301      	movs	r3, #1
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	f383 8810 	msr	PRIMASK, r3
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2110      	movs	r1, #16
 8005d9a:	438a      	bics	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db2:	183b      	adds	r3, r7, r0
 8005db4:	881a      	ldrh	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	0011      	movs	r1, r2
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f000 f868 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc0:	e044      	b.n	8005e4c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc2:	23a4      	movs	r3, #164	; 0xa4
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	035b      	lsls	r3, r3, #13
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d010      	beq.n	8005df2 <HAL_UART_IRQHandler+0x552>
 8005dd0:	239c      	movs	r3, #156	; 0x9c
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	03db      	lsls	r3, r3, #15
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	0352      	lsls	r2, r2, #13
 8005de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 fe6d 	bl	8006aca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df0:	e02f      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005df2:	23a4      	movs	r3, #164	; 0xa4
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d00f      	beq.n	8005e1e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dfe:	23a0      	movs	r3, #160	; 0xa0
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2280      	movs	r2, #128	; 0x80
 8005e06:	4013      	ands	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01e      	beq.n	8005e50 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	0010      	movs	r0, r2
 8005e1a:	4798      	blx	r3
    }
    return;
 8005e1c:	e018      	b.n	8005e50 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e1e:	23a4      	movs	r3, #164	; 0xa4
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2240      	movs	r2, #64	; 0x40
 8005e26:	4013      	ands	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
 8005e2a:	23a0      	movs	r3, #160	; 0xa0
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2240      	movs	r2, #64	; 0x40
 8005e32:	4013      	ands	r3, r2
 8005e34:	d00d      	beq.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 fe1b 	bl	8006a74 <UART_EndTransmit_IT>
    return;
 8005e3e:	e008      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005e40:	46c0      	nop			; (mov r8, r8)
 8005e42:	e006      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	e004      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	e002      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	e000      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005e50:	46c0      	nop			; (mov r8, r8)
  }

}
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b02b      	add	sp, #172	; 0xac
 8005e56:	bd90      	pop	{r4, r7, pc}
 8005e58:	fffffeff 	.word	0xfffffeff
 8005e5c:	fffffedf 	.word	0xfffffedf

08005e60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	000a      	movs	r2, r1
 8005e9a:	1cbb      	adds	r3, r7, #2
 8005e9c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb0:	231e      	movs	r3, #30
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4abe      	ldr	r2, [pc, #760]	; (80061d0 <UART_SetConfig+0x328>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	0019      	movs	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4ab9      	ldr	r2, [pc, #740]	; (80061d4 <UART_SetConfig+0x32c>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4ab0      	ldr	r2, [pc, #704]	; (80061d8 <UART_SetConfig+0x330>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4aac      	ldr	r2, [pc, #688]	; (80061dc <UART_SetConfig+0x334>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d127      	bne.n	8005f7e <UART_SetConfig+0xd6>
 8005f2e:	4bac      	ldr	r3, [pc, #688]	; (80061e0 <UART_SetConfig+0x338>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	2203      	movs	r2, #3
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d00d      	beq.n	8005f56 <UART_SetConfig+0xae>
 8005f3a:	d81b      	bhi.n	8005f74 <UART_SetConfig+0xcc>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d014      	beq.n	8005f6a <UART_SetConfig+0xc2>
 8005f40:	d818      	bhi.n	8005f74 <UART_SetConfig+0xcc>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <UART_SetConfig+0xa4>
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d00a      	beq.n	8005f60 <UART_SetConfig+0xb8>
 8005f4a:	e013      	b.n	8005f74 <UART_SetConfig+0xcc>
 8005f4c:	231f      	movs	r3, #31
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e0bd      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005f56:	231f      	movs	r3, #31
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e0b8      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005f60:	231f      	movs	r3, #31
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2204      	movs	r2, #4
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e0b3      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005f6a:	231f      	movs	r3, #31
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2208      	movs	r2, #8
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e0ae      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005f74:	231f      	movs	r3, #31
 8005f76:	18fb      	adds	r3, r7, r3
 8005f78:	2210      	movs	r2, #16
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e0a9      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a98      	ldr	r2, [pc, #608]	; (80061e4 <UART_SetConfig+0x33c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d134      	bne.n	8005ff2 <UART_SetConfig+0x14a>
 8005f88:	4b95      	ldr	r3, [pc, #596]	; (80061e0 <UART_SetConfig+0x338>)
 8005f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8c:	23c0      	movs	r3, #192	; 0xc0
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	4013      	ands	r3, r2
 8005f92:	22c0      	movs	r2, #192	; 0xc0
 8005f94:	0292      	lsls	r2, r2, #10
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d017      	beq.n	8005fca <UART_SetConfig+0x122>
 8005f9a:	22c0      	movs	r2, #192	; 0xc0
 8005f9c:	0292      	lsls	r2, r2, #10
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d822      	bhi.n	8005fe8 <UART_SetConfig+0x140>
 8005fa2:	2280      	movs	r2, #128	; 0x80
 8005fa4:	0292      	lsls	r2, r2, #10
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d019      	beq.n	8005fde <UART_SetConfig+0x136>
 8005faa:	2280      	movs	r2, #128	; 0x80
 8005fac:	0292      	lsls	r2, r2, #10
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d81a      	bhi.n	8005fe8 <UART_SetConfig+0x140>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <UART_SetConfig+0x118>
 8005fb6:	2280      	movs	r2, #128	; 0x80
 8005fb8:	0252      	lsls	r2, r2, #9
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00a      	beq.n	8005fd4 <UART_SetConfig+0x12c>
 8005fbe:	e013      	b.n	8005fe8 <UART_SetConfig+0x140>
 8005fc0:	231f      	movs	r3, #31
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e083      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005fca:	231f      	movs	r3, #31
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	2202      	movs	r2, #2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e07e      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005fd4:	231f      	movs	r3, #31
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	2204      	movs	r2, #4
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e079      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005fde:	231f      	movs	r3, #31
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	e074      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005fe8:	231f      	movs	r3, #31
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2210      	movs	r2, #16
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	e06f      	b.n	80060d2 <UART_SetConfig+0x22a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a7c      	ldr	r2, [pc, #496]	; (80061e8 <UART_SetConfig+0x340>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d134      	bne.n	8006066 <UART_SetConfig+0x1be>
 8005ffc:	4b78      	ldr	r3, [pc, #480]	; (80061e0 <UART_SetConfig+0x338>)
 8005ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006000:	23c0      	movs	r3, #192	; 0xc0
 8006002:	031b      	lsls	r3, r3, #12
 8006004:	4013      	ands	r3, r2
 8006006:	22c0      	movs	r2, #192	; 0xc0
 8006008:	0312      	lsls	r2, r2, #12
 800600a:	4293      	cmp	r3, r2
 800600c:	d017      	beq.n	800603e <UART_SetConfig+0x196>
 800600e:	22c0      	movs	r2, #192	; 0xc0
 8006010:	0312      	lsls	r2, r2, #12
 8006012:	4293      	cmp	r3, r2
 8006014:	d822      	bhi.n	800605c <UART_SetConfig+0x1b4>
 8006016:	2280      	movs	r2, #128	; 0x80
 8006018:	0312      	lsls	r2, r2, #12
 800601a:	4293      	cmp	r3, r2
 800601c:	d019      	beq.n	8006052 <UART_SetConfig+0x1aa>
 800601e:	2280      	movs	r2, #128	; 0x80
 8006020:	0312      	lsls	r2, r2, #12
 8006022:	4293      	cmp	r3, r2
 8006024:	d81a      	bhi.n	800605c <UART_SetConfig+0x1b4>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <UART_SetConfig+0x18c>
 800602a:	2280      	movs	r2, #128	; 0x80
 800602c:	02d2      	lsls	r2, r2, #11
 800602e:	4293      	cmp	r3, r2
 8006030:	d00a      	beq.n	8006048 <UART_SetConfig+0x1a0>
 8006032:	e013      	b.n	800605c <UART_SetConfig+0x1b4>
 8006034:	231f      	movs	r3, #31
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e049      	b.n	80060d2 <UART_SetConfig+0x22a>
 800603e:	231f      	movs	r3, #31
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	2202      	movs	r2, #2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e044      	b.n	80060d2 <UART_SetConfig+0x22a>
 8006048:	231f      	movs	r3, #31
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	2204      	movs	r2, #4
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	e03f      	b.n	80060d2 <UART_SetConfig+0x22a>
 8006052:	231f      	movs	r3, #31
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2208      	movs	r2, #8
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e03a      	b.n	80060d2 <UART_SetConfig+0x22a>
 800605c:	231f      	movs	r3, #31
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	2210      	movs	r2, #16
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e035      	b.n	80060d2 <UART_SetConfig+0x22a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a60      	ldr	r2, [pc, #384]	; (80061ec <UART_SetConfig+0x344>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d104      	bne.n	800607a <UART_SetConfig+0x1d2>
 8006070:	231f      	movs	r3, #31
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	e02b      	b.n	80060d2 <UART_SetConfig+0x22a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a5c      	ldr	r2, [pc, #368]	; (80061f0 <UART_SetConfig+0x348>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d104      	bne.n	800608e <UART_SetConfig+0x1e6>
 8006084:	231f      	movs	r3, #31
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e021      	b.n	80060d2 <UART_SetConfig+0x22a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a58      	ldr	r2, [pc, #352]	; (80061f4 <UART_SetConfig+0x34c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d104      	bne.n	80060a2 <UART_SetConfig+0x1fa>
 8006098:	231f      	movs	r3, #31
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e017      	b.n	80060d2 <UART_SetConfig+0x22a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a54      	ldr	r2, [pc, #336]	; (80061f8 <UART_SetConfig+0x350>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d104      	bne.n	80060b6 <UART_SetConfig+0x20e>
 80060ac:	231f      	movs	r3, #31
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e00d      	b.n	80060d2 <UART_SetConfig+0x22a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a50      	ldr	r2, [pc, #320]	; (80061fc <UART_SetConfig+0x354>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d104      	bne.n	80060ca <UART_SetConfig+0x222>
 80060c0:	231f      	movs	r3, #31
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e003      	b.n	80060d2 <UART_SetConfig+0x22a>
 80060ca:	231f      	movs	r3, #31
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	2210      	movs	r2, #16
 80060d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69da      	ldr	r2, [r3, #28]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	429a      	cmp	r2, r3
 80060dc:	d15c      	bne.n	8006198 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80060de:	231f      	movs	r3, #31
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d015      	beq.n	8006114 <UART_SetConfig+0x26c>
 80060e8:	dc18      	bgt.n	800611c <UART_SetConfig+0x274>
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d00d      	beq.n	800610a <UART_SetConfig+0x262>
 80060ee:	dc15      	bgt.n	800611c <UART_SetConfig+0x274>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <UART_SetConfig+0x252>
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d005      	beq.n	8006104 <UART_SetConfig+0x25c>
 80060f8:	e010      	b.n	800611c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fd fcaf 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 80060fe:	0003      	movs	r3, r0
 8006100:	61bb      	str	r3, [r7, #24]
        break;
 8006102:	e012      	b.n	800612a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <UART_SetConfig+0x358>)
 8006106:	61bb      	str	r3, [r7, #24]
        break;
 8006108:	e00f      	b.n	800612a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fd fc2b 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 800610e:	0003      	movs	r3, r0
 8006110:	61bb      	str	r3, [r7, #24]
        break;
 8006112:	e00a      	b.n	800612a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	61bb      	str	r3, [r7, #24]
        break;
 800611a:	e006      	b.n	800612a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006120:	231e      	movs	r3, #30
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
        break;
 8006128:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d100      	bne.n	8006132 <UART_SetConfig+0x28a>
 8006130:	e095      	b.n	800625e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	005a      	lsls	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	18d2      	adds	r2, r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	0019      	movs	r1, r3
 8006144:	0010      	movs	r0, r2
 8006146:	f7f9 ffdd 	bl	8000104 <__udivsi3>
 800614a:	0003      	movs	r3, r0
 800614c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b0f      	cmp	r3, #15
 8006152:	d91c      	bls.n	800618e <UART_SetConfig+0x2e6>
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	025b      	lsls	r3, r3, #9
 800615a:	429a      	cmp	r2, r3
 800615c:	d217      	bcs.n	800618e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	b29a      	uxth	r2, r3
 8006162:	200e      	movs	r0, #14
 8006164:	183b      	adds	r3, r7, r0
 8006166:	210f      	movs	r1, #15
 8006168:	438a      	bics	r2, r1
 800616a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	2207      	movs	r2, #7
 8006174:	4013      	ands	r3, r2
 8006176:	b299      	uxth	r1, r3
 8006178:	183b      	adds	r3, r7, r0
 800617a:	183a      	adds	r2, r7, r0
 800617c:	8812      	ldrh	r2, [r2, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	183a      	adds	r2, r7, r0
 8006188:	8812      	ldrh	r2, [r2, #0]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	e067      	b.n	800625e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800618e:	231e      	movs	r3, #30
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	2201      	movs	r2, #1
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e062      	b.n	800625e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006198:	231f      	movs	r3, #31
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d030      	beq.n	8006204 <UART_SetConfig+0x35c>
 80061a2:	dc33      	bgt.n	800620c <UART_SetConfig+0x364>
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d00d      	beq.n	80061c4 <UART_SetConfig+0x31c>
 80061a8:	dc30      	bgt.n	800620c <UART_SetConfig+0x364>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <UART_SetConfig+0x30c>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d005      	beq.n	80061be <UART_SetConfig+0x316>
 80061b2:	e02b      	b.n	800620c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b4:	f7fd fc52 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 80061b8:	0003      	movs	r3, r0
 80061ba:	61bb      	str	r3, [r7, #24]
        break;
 80061bc:	e02d      	b.n	800621a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <UART_SetConfig+0x358>)
 80061c0:	61bb      	str	r3, [r7, #24]
        break;
 80061c2:	e02a      	b.n	800621a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c4:	f7fd fbce 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 80061c8:	0003      	movs	r3, r0
 80061ca:	61bb      	str	r3, [r7, #24]
        break;
 80061cc:	e025      	b.n	800621a <UART_SetConfig+0x372>
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	efff69f3 	.word	0xefff69f3
 80061d4:	ffffcfff 	.word	0xffffcfff
 80061d8:	fffff4ff 	.word	0xfffff4ff
 80061dc:	40013800 	.word	0x40013800
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40004400 	.word	0x40004400
 80061e8:	40004800 	.word	0x40004800
 80061ec:	40004c00 	.word	0x40004c00
 80061f0:	40005000 	.word	0x40005000
 80061f4:	40011400 	.word	0x40011400
 80061f8:	40011800 	.word	0x40011800
 80061fc:	40011c00 	.word	0x40011c00
 8006200:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	61bb      	str	r3, [r7, #24]
        break;
 800620a:	e006      	b.n	800621a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006210:	231e      	movs	r3, #30
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2201      	movs	r2, #1
 8006216:	701a      	strb	r2, [r3, #0]
        break;
 8006218:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01e      	beq.n	800625e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	085a      	lsrs	r2, r3, #1
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	18d2      	adds	r2, r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	0019      	movs	r1, r3
 8006230:	0010      	movs	r0, r2
 8006232:	f7f9 ff67 	bl	8000104 <__udivsi3>
 8006236:	0003      	movs	r3, r0
 8006238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d90a      	bls.n	8006256 <UART_SetConfig+0x3ae>
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	025b      	lsls	r3, r3, #9
 8006246:	429a      	cmp	r2, r3
 8006248:	d205      	bcs.n	8006256 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	e003      	b.n	800625e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006256:	231e      	movs	r3, #30
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800626a:	231e      	movs	r3, #30
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	781b      	ldrb	r3, [r3, #0]
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b008      	add	sp, #32
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d00b      	beq.n	80062a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4a4a      	ldr	r2, [pc, #296]	; (80063bc <UART_AdvFeatureConfig+0x144>)
 8006292:	4013      	ands	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2202      	movs	r2, #2
 80062a8:	4013      	ands	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4a43      	ldr	r2, [pc, #268]	; (80063c0 <UART_AdvFeatureConfig+0x148>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	0019      	movs	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2204      	movs	r2, #4
 80062ca:	4013      	ands	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a3b      	ldr	r2, [pc, #236]	; (80063c4 <UART_AdvFeatureConfig+0x14c>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	0019      	movs	r1, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2208      	movs	r2, #8
 80062ec:	4013      	ands	r3, r2
 80062ee:	d00b      	beq.n	8006308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4a34      	ldr	r2, [pc, #208]	; (80063c8 <UART_AdvFeatureConfig+0x150>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	2210      	movs	r2, #16
 800630e:	4013      	ands	r3, r2
 8006310:	d00b      	beq.n	800632a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4a2c      	ldr	r2, [pc, #176]	; (80063cc <UART_AdvFeatureConfig+0x154>)
 800631a:	4013      	ands	r3, r2
 800631c:	0019      	movs	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2220      	movs	r2, #32
 8006330:	4013      	ands	r3, r2
 8006332:	d00b      	beq.n	800634c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <UART_AdvFeatureConfig+0x158>)
 800633c:	4013      	ands	r3, r2
 800633e:	0019      	movs	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2240      	movs	r2, #64	; 0x40
 8006352:	4013      	ands	r3, r2
 8006354:	d01d      	beq.n	8006392 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <UART_AdvFeatureConfig+0x15c>)
 800635e:	4013      	ands	r3, r2
 8006360:	0019      	movs	r1, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	035b      	lsls	r3, r3, #13
 8006376:	429a      	cmp	r2, r3
 8006378:	d10b      	bne.n	8006392 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <UART_AdvFeatureConfig+0x160>)
 8006382:	4013      	ands	r3, r2
 8006384:	0019      	movs	r1, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2280      	movs	r2, #128	; 0x80
 8006398:	4013      	ands	r3, r2
 800639a:	d00b      	beq.n	80063b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4a0e      	ldr	r2, [pc, #56]	; (80063dc <UART_AdvFeatureConfig+0x164>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	0019      	movs	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b002      	add	sp, #8
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	fffdffff 	.word	0xfffdffff
 80063c0:	fffeffff 	.word	0xfffeffff
 80063c4:	fffbffff 	.word	0xfffbffff
 80063c8:	ffff7fff 	.word	0xffff7fff
 80063cc:	ffffefff 	.word	0xffffefff
 80063d0:	ffffdfff 	.word	0xffffdfff
 80063d4:	ffefffff 	.word	0xffefffff
 80063d8:	ff9fffff 	.word	0xff9fffff
 80063dc:	fff7ffff 	.word	0xfff7ffff

080063e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b092      	sub	sp, #72	; 0x48
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2284      	movs	r2, #132	; 0x84
 80063ec:	2100      	movs	r1, #0
 80063ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063f0:	f7fc f9e8 	bl	80027c4 <HAL_GetTick>
 80063f4:	0003      	movs	r3, r0
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2208      	movs	r2, #8
 8006400:	4013      	ands	r3, r2
 8006402:	2b08      	cmp	r3, #8
 8006404:	d12c      	bne.n	8006460 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	2280      	movs	r2, #128	; 0x80
 800640a:	0391      	lsls	r1, r2, #14
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4a46      	ldr	r2, [pc, #280]	; (8006528 <UART_CheckIdleState+0x148>)
 8006410:	9200      	str	r2, [sp, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	f000 f88c 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8006418:	1e03      	subs	r3, r0, #0
 800641a:	d021      	beq.n	8006460 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641c:	f3ef 8310 	mrs	r3, PRIMASK
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006424:	63bb      	str	r3, [r7, #56]	; 0x38
 8006426:	2301      	movs	r3, #1
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	f383 8810 	msr	PRIMASK, r3
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	438a      	bics	r2, r1
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	f383 8810 	msr	PRIMASK, r3
}
 800644c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2278      	movs	r2, #120	; 0x78
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e05f      	b.n	8006520 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2204      	movs	r2, #4
 8006468:	4013      	ands	r3, r2
 800646a:	2b04      	cmp	r3, #4
 800646c:	d146      	bne.n	80064fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	2280      	movs	r2, #128	; 0x80
 8006472:	03d1      	lsls	r1, r2, #15
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4a2c      	ldr	r2, [pc, #176]	; (8006528 <UART_CheckIdleState+0x148>)
 8006478:	9200      	str	r2, [sp, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	f000 f858 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8006480:	1e03      	subs	r3, r0, #0
 8006482:	d03b      	beq.n	80064fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006484:	f3ef 8310 	mrs	r3, PRIMASK
 8006488:	60fb      	str	r3, [r7, #12]
  return(result);
 800648a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
 800648e:	2301      	movs	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f383 8810 	msr	PRIMASK, r3
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4921      	ldr	r1, [pc, #132]	; (800652c <UART_CheckIdleState+0x14c>)
 80064a6:	400a      	ands	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f383 8810 	msr	PRIMASK, r3
}
 80064b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80064bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
 80064c0:	2301      	movs	r3, #1
 80064c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f383 8810 	msr	PRIMASK, r3
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2101      	movs	r1, #1
 80064d8:	438a      	bics	r2, r1
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f383 8810 	msr	PRIMASK, r3
}
 80064e6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2280      	movs	r2, #128	; 0x80
 80064ec:	2120      	movs	r1, #32
 80064ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2278      	movs	r2, #120	; 0x78
 80064f4:	2100      	movs	r1, #0
 80064f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e011      	b.n	8006520 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	2120      	movs	r1, #32
 8006508:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2278      	movs	r2, #120	; 0x78
 800651a:	2100      	movs	r1, #0
 800651c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b010      	add	sp, #64	; 0x40
 8006526:	bd80      	pop	{r7, pc}
 8006528:	01ffffff 	.word	0x01ffffff
 800652c:	fffffedf 	.word	0xfffffedf

08006530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	1dfb      	adds	r3, r7, #7
 800653e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006540:	e04b      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	3301      	adds	r3, #1
 8006546:	d048      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006548:	f7fc f93c 	bl	80027c4 <HAL_GetTick>
 800654c:	0002      	movs	r2, r0
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	429a      	cmp	r2, r3
 8006556:	d302      	bcc.n	800655e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e04b      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2204      	movs	r2, #4
 800656a:	4013      	ands	r3, r2
 800656c:	d035      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	2208      	movs	r2, #8
 8006576:	4013      	ands	r3, r2
 8006578:	2b08      	cmp	r3, #8
 800657a:	d111      	bne.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	0018      	movs	r0, r3
 8006588:	f000 f900 	bl	800678c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2284      	movs	r2, #132	; 0x84
 8006590:	2108      	movs	r1, #8
 8006592:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2278      	movs	r2, #120	; 0x78
 8006598:	2100      	movs	r1, #0
 800659a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e02c      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	2380      	movs	r3, #128	; 0x80
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	401a      	ands	r2, r3
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d112      	bne.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2280      	movs	r2, #128	; 0x80
 80065ba:	0112      	lsls	r2, r2, #4
 80065bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f000 f8e3 	bl	800678c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2284      	movs	r2, #132	; 0x84
 80065ca:	2120      	movs	r1, #32
 80065cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2278      	movs	r2, #120	; 0x78
 80065d2:	2100      	movs	r1, #0
 80065d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e00f      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	425a      	negs	r2, r3
 80065ea:	4153      	adcs	r3, r2
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	001a      	movs	r2, r3
 80065f0:	1dfb      	adds	r3, r7, #7
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d0a4      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	0018      	movs	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b004      	add	sp, #16
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b090      	sub	sp, #64	; 0x40
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	1dbb      	adds	r3, r7, #6
 8006610:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1dba      	adds	r2, r7, #6
 800661c:	2158      	movs	r1, #88	; 0x58
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2284      	movs	r2, #132	; 0x84
 8006626:	2100      	movs	r1, #0
 8006628:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2280      	movs	r2, #128	; 0x80
 800662e:	2122      	movs	r1, #34	; 0x22
 8006630:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	2b00      	cmp	r3, #0
 8006638:	d028      	beq.n	800668c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663e:	4a3e      	ldr	r2, [pc, #248]	; (8006738 <UART_Start_Receive_DMA+0x134>)
 8006640:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	4a3d      	ldr	r2, [pc, #244]	; (800673c <UART_Start_Receive_DMA+0x138>)
 8006648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664e:	4a3c      	ldr	r2, [pc, #240]	; (8006740 <UART_Start_Receive_DMA+0x13c>)
 8006650:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006656:	2200      	movs	r2, #0
 8006658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3324      	adds	r3, #36	; 0x24
 8006664:	0019      	movs	r1, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	001a      	movs	r2, r3
 800666c:	1dbb      	adds	r3, r7, #6
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	f7fc f9b4 	bl	80029dc <HAL_DMA_Start_IT>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d009      	beq.n	800668c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2284      	movs	r2, #132	; 0x84
 800667c:	2110      	movs	r1, #16
 800667e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	2120      	movs	r1, #32
 8006686:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e050      	b.n	800672e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d019      	beq.n	80066c8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006694:	f3ef 8310 	mrs	r3, PRIMASK
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669e:	2301      	movs	r3, #1
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	f383 8810 	msr	PRIMASK, r3
}
 80066a8:	46c0      	nop			; (mov r8, r8)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2180      	movs	r1, #128	; 0x80
 80066b6:	0049      	lsls	r1, r1, #1
 80066b8:	430a      	orrs	r2, r1
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	f383 8810 	msr	PRIMASK, r3
}
 80066c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066c8:	f3ef 8310 	mrs	r3, PRIMASK
 80066cc:	613b      	str	r3, [r7, #16]
  return(result);
 80066ce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d2:	2301      	movs	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f383 8810 	msr	PRIMASK, r3
}
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2101      	movs	r1, #1
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	f383 8810 	msr	PRIMASK, r3
}
 80066f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066fa:	f3ef 8310 	mrs	r3, PRIMASK
 80066fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8006700:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
 8006704:	2301      	movs	r3, #1
 8006706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	f383 8810 	msr	PRIMASK, r3
}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2140      	movs	r1, #64	; 0x40
 800671c:	430a      	orrs	r2, r1
 800671e:	609a      	str	r2, [r3, #8]
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	f383 8810 	msr	PRIMASK, r3
}
 800672a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	0018      	movs	r0, r3
 8006730:	46bd      	mov	sp, r7
 8006732:	b010      	add	sp, #64	; 0x40
 8006734:	bd80      	pop	{r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	08006855 	.word	0x08006855
 800673c:	08006981 	.word	0x08006981
 8006740:	080069c3 	.word	0x080069c3

08006744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	60bb      	str	r3, [r7, #8]
  return(result);
 8006752:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	2301      	movs	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	21c0      	movs	r1, #192	; 0xc0
 800676e:	438a      	bics	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b006      	add	sp, #24
 800678a:	bd80      	pop	{r7, pc}

0800678c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08e      	sub	sp, #56	; 0x38
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006794:	f3ef 8310 	mrs	r3, PRIMASK
 8006798:	617b      	str	r3, [r7, #20]
  return(result);
 800679a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679c:	637b      	str	r3, [r7, #52]	; 0x34
 800679e:	2301      	movs	r3, #1
 80067a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	f383 8810 	msr	PRIMASK, r3
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4926      	ldr	r1, [pc, #152]	; (8006850 <UART_EndRxTransfer+0xc4>)
 80067b6:	400a      	ands	r2, r1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f383 8810 	msr	PRIMASK, r3
}
 80067c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c6:	f3ef 8310 	mrs	r3, PRIMASK
 80067ca:	623b      	str	r3, [r7, #32]
  return(result);
 80067cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	633b      	str	r3, [r7, #48]	; 0x30
 80067d0:	2301      	movs	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	f383 8810 	msr	PRIMASK, r3
}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2101      	movs	r1, #1
 80067e8:	438a      	bics	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	f383 8810 	msr	PRIMASK, r3
}
 80067f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d118      	bne.n	8006832 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006800:	f3ef 8310 	mrs	r3, PRIMASK
 8006804:	60bb      	str	r3, [r7, #8]
  return(result);
 8006806:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f383 8810 	msr	PRIMASK, r3
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2110      	movs	r1, #16
 8006822:	438a      	bics	r2, r1
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f383 8810 	msr	PRIMASK, r3
}
 8006830:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2280      	movs	r2, #128	; 0x80
 8006836:	2120      	movs	r1, #32
 8006838:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	b00e      	add	sp, #56	; 0x38
 800684c:	bd80      	pop	{r7, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	fffffedf 	.word	0xfffffedf

08006854 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b094      	sub	sp, #80	; 0x50
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b20      	cmp	r3, #32
 8006868:	d06f      	beq.n	800694a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800686a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686c:	225a      	movs	r2, #90	; 0x5a
 800686e:	2100      	movs	r1, #0
 8006870:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006872:	f3ef 8310 	mrs	r3, PRIMASK
 8006876:	61bb      	str	r3, [r7, #24]
  return(result);
 8006878:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48
 800687c:	2301      	movs	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f383 8810 	msr	PRIMASK, r3
}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	493a      	ldr	r1, [pc, #232]	; (800697c <UART_DMAReceiveCplt+0x128>)
 8006894:	400a      	ands	r2, r1
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	f383 8810 	msr	PRIMASK, r3
}
 80068a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a4:	f3ef 8310 	mrs	r3, PRIMASK
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
 80068ae:	2301      	movs	r3, #1
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	f383 8810 	msr	PRIMASK, r3
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2101      	movs	r1, #1
 80068c6:	438a      	bics	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]
 80068ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	f383 8810 	msr	PRIMASK, r3
}
 80068d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068d6:	f3ef 8310 	mrs	r3, PRIMASK
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068de:	643b      	str	r3, [r7, #64]	; 0x40
 80068e0:	2301      	movs	r3, #1
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	f383 8810 	msr	PRIMASK, r3
}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2140      	movs	r1, #64	; 0x40
 80068f8:	438a      	bics	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]
 80068fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	f383 8810 	msr	PRIMASK, r3
}
 8006906:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	2120      	movs	r1, #32
 800690e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006914:	2b01      	cmp	r3, #1
 8006916:	d118      	bne.n	800694a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006918:	f3ef 8310 	mrs	r3, PRIMASK
 800691c:	60fb      	str	r3, [r7, #12]
  return(result);
 800691e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006922:	2301      	movs	r3, #1
 8006924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f383 8810 	msr	PRIMASK, r3
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2110      	movs	r1, #16
 800693a:	438a      	bics	r2, r1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800694a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694c:	2200      	movs	r2, #0
 800694e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	2258      	movs	r2, #88	; 0x58
 800695c:	5a9a      	ldrh	r2, [r3, r2]
 800695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7ff fa94 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006968:	e003      	b.n	8006972 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	0018      	movs	r0, r3
 800696e:	f7fb fa99 	bl	8001ea4 <HAL_UART_RxCpltCallback>
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b014      	add	sp, #80	; 0x50
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	fffffeff 	.word	0xfffffeff

08006980 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006998:	2b01      	cmp	r3, #1
 800699a:	d10a      	bne.n	80069b2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2258      	movs	r2, #88	; 0x58
 80069a0:	5a9b      	ldrh	r3, [r3, r2]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	0011      	movs	r1, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f7ff fa70 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069b0:	e003      	b.n	80069ba <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7ff fa5b 	bl	8005e70 <HAL_UART_RxHalfCpltCallback>
}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	46bd      	mov	sp, r7
 80069be:	b004      	add	sp, #16
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b086      	sub	sp, #24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2280      	movs	r2, #128	; 0x80
 80069da:	589b      	ldr	r3, [r3, r2]
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2280      	movs	r2, #128	; 0x80
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b80      	cmp	r3, #128	; 0x80
 80069ea:	d10a      	bne.n	8006a02 <UART_DMAError+0x40>
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b21      	cmp	r3, #33	; 0x21
 80069f0:	d107      	bne.n	8006a02 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2252      	movs	r2, #82	; 0x52
 80069f6:	2100      	movs	r1, #0
 80069f8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7ff fea1 	bl	8006744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d10a      	bne.n	8006a26 <UART_DMAError+0x64>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b22      	cmp	r3, #34	; 0x22
 8006a14:	d107      	bne.n	8006a26 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	225a      	movs	r2, #90	; 0x5a
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff feb3 	bl	800678c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2284      	movs	r2, #132	; 0x84
 8006a2a:	589b      	ldr	r3, [r3, r2]
 8006a2c:	2210      	movs	r2, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2184      	movs	r1, #132	; 0x84
 8006a34:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff fa21 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b006      	add	sp, #24
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	225a      	movs	r2, #90	; 0x5a
 8006a58:	2100      	movs	r1, #0
 8006a5a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2252      	movs	r2, #82	; 0x52
 8006a60:	2100      	movs	r1, #0
 8006a62:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7ff fa0a 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b004      	add	sp, #16
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a82:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	2301      	movs	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f383 8810 	msr	PRIMASK, r3
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2140      	movs	r1, #64	; 0x40
 8006a9e:	438a      	bics	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f383 8810 	msr	PRIMASK, r3
}
 8006aac:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7ff f9cf 	bl	8005e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b006      	add	sp, #24
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <memset>:
 8006ada:	0003      	movs	r3, r0
 8006adc:	1882      	adds	r2, r0, r2
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d100      	bne.n	8006ae4 <memset+0xa>
 8006ae2:	4770      	bx	lr
 8006ae4:	7019      	strb	r1, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	e7f9      	b.n	8006ade <memset+0x4>

08006aea <strstr>:
 8006aea:	780a      	ldrb	r2, [r1, #0]
 8006aec:	b530      	push	{r4, r5, lr}
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d10c      	bne.n	8006b0c <strstr+0x22>
 8006af2:	bd30      	pop	{r4, r5, pc}
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d108      	bne.n	8006b0a <strstr+0x20>
 8006af8:	2301      	movs	r3, #1
 8006afa:	5ccc      	ldrb	r4, [r1, r3]
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	d0f8      	beq.n	8006af2 <strstr+0x8>
 8006b00:	5cc5      	ldrb	r5, [r0, r3]
 8006b02:	42a5      	cmp	r5, r4
 8006b04:	d101      	bne.n	8006b0a <strstr+0x20>
 8006b06:	3301      	adds	r3, #1
 8006b08:	e7f7      	b.n	8006afa <strstr+0x10>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	7803      	ldrb	r3, [r0, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <strstr+0xa>
 8006b12:	0018      	movs	r0, r3
 8006b14:	e7ed      	b.n	8006af2 <strstr+0x8>
	...

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	2600      	movs	r6, #0
 8006b1c:	4c0c      	ldr	r4, [pc, #48]	; (8006b50 <__libc_init_array+0x38>)
 8006b1e:	4d0d      	ldr	r5, [pc, #52]	; (8006b54 <__libc_init_array+0x3c>)
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	2600      	movs	r6, #0
 8006b2a:	f000 f819 	bl	8006b60 <_init>
 8006b2e:	4c0a      	ldr	r4, [pc, #40]	; (8006b58 <__libc_init_array+0x40>)
 8006b30:	4d0a      	ldr	r5, [pc, #40]	; (8006b5c <__libc_init_array+0x44>)
 8006b32:	1b64      	subs	r4, r4, r5
 8006b34:	10a4      	asrs	r4, r4, #2
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	00b3      	lsls	r3, r6, #2
 8006b3e:	58eb      	ldr	r3, [r5, r3]
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	00b3      	lsls	r3, r6, #2
 8006b48:	58eb      	ldr	r3, [r5, r3]
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08006bfc 	.word	0x08006bfc
 8006b54:	08006bfc 	.word	0x08006bfc
 8006b58:	08006c00 	.word	0x08006c00
 8006b5c:	08006bfc 	.word	0x08006bfc

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
