
MainMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005edc  08005edc  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005edc  08005edc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000009c  08005f80  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005f80  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e209  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002097  00000000  00000000  0002e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a11  00000000  00000000  00031070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b99a  00000000  00000000  00031a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc1a  00000000  00000000  0004d41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a906b  00000000  00000000  0005d035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035c8  00000000  00000000  001060a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00109668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d24 	.word	0x08005d24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08005d24 	.word	0x08005d24

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fdae 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f830 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f9e0 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 8000250:	f000 f9c0 	bl	80005d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000254:	f000 f98c 	bl	8000570 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000258:	f000 f880 	bl	800035c <MX_TIM1_Init>
  MX_TIM3_Init();
 800025c:	f000 f934 	bl	80004c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  player1score = 0;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <main+0x54>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
  player2score = 0;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <main+0x58>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart2, rxdata, sizeof(rxdata));
 800026c:	490b      	ldr	r1, [pc, #44]	; (800029c <main+0x5c>)
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <main+0x60>)
 8000270:	2204      	movs	r2, #4
 8000272:	0018      	movs	r0, r3
 8000274:	f003 fa5e 	bl	8003734 <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <main+0x64>)
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f002 fa0b 	bl	8002698 <HAL_TIM_PWM_Stop>

	TIM1->CCR1 = 2000;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <main+0x68>)
 8000284:	22fa      	movs	r2, #250	; 0xfa
 8000286:	00d2      	lsls	r2, r2, #3
 8000288:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->ARR = 4000;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <main+0x68>)
 800028c:	22fa      	movs	r2, #250	; 0xfa
 800028e:	0112      	lsls	r2, r2, #4
 8000290:	62da      	str	r2, [r3, #44]	; 0x2c
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000292:	e7fe      	b.n	8000292 <main+0x52>
 8000294:	20000222 	.word	0x20000222
 8000298:	20000223 	.word	0x20000223
 800029c:	20000214 	.word	0x20000214
 80002a0:	20000148 	.word	0x20000148
 80002a4:	200000b8 	.word	0x200000b8
 80002a8:	40012c00 	.word	0x40012c00

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b099      	sub	sp, #100	; 0x64
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	242c      	movs	r4, #44	; 0x2c
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2334      	movs	r3, #52	; 0x34
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f004 fbf9 	bl	8004ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	231c      	movs	r3, #28
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	0018      	movs	r0, r3
 80002c8:	2310      	movs	r3, #16
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f004 fbf1 	bl	8004ab4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	231c      	movs	r3, #28
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f004 fbea 	bl	8004ab4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	0021      	movs	r1, r4
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2201      	movs	r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2210      	movs	r2, #16
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fa79 	bl	80017f4 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000306:	f000 fb3d 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	211c      	movs	r1, #28
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2100      	movs	r1, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fde9 	bl	8001f00 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000332:	f000 fb27 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000336:	003b      	movs	r3, r7
 8000338:	2202      	movs	r2, #2
 800033a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	f001 ff47 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800034e:	f000 fb19 	bl	8000984 <Error_Handler>
  }
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b019      	add	sp, #100	; 0x64
 8000358:	bd90      	pop	{r4, r7, pc}
	...

0800035c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b096      	sub	sp, #88	; 0x58
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	2348      	movs	r3, #72	; 0x48
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	0018      	movs	r0, r3
 8000368:	2310      	movs	r3, #16
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f004 fba1 	bl	8004ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000372:	2340      	movs	r3, #64	; 0x40
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2308      	movs	r3, #8
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f004 fb99 	bl	8004ab4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000382:	2324      	movs	r3, #36	; 0x24
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	231c      	movs	r3, #28
 800038a:	001a      	movs	r2, r3
 800038c:	2100      	movs	r1, #0
 800038e:	f004 fb91 	bl	8004ab4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	2320      	movs	r3, #32
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f004 fb8a 	bl	8004ab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a0:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003a2:	4a48      	ldr	r2, [pc, #288]	; (80004c4 <MX_TIM1_Init+0x168>)
 80003a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80003a6:	4b46      	ldr	r3, [pc, #280]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003a8:	2207      	movs	r2, #7
 80003aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b44      	ldr	r3, [pc, #272]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80003b2:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003b4:	22fa      	movs	r2, #250	; 0xfa
 80003b6:	00d2      	lsls	r2, r2, #3
 80003b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ba:	4b41      	ldr	r3, [pc, #260]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c0:	4b3f      	ldr	r3, [pc, #252]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003c6:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003cc:	4b3c      	ldr	r3, [pc, #240]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 f802 	bl	80023d8 <HAL_TIM_Base_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80003d8:	f000 fad4 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003dc:	2148      	movs	r1, #72	; 0x48
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	0152      	lsls	r2, r2, #5
 80003e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	4b35      	ldr	r3, [pc, #212]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 fbab 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80003f6:	f000 fac5 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003fa:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <MX_TIM1_Init+0x164>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f002 f83b 	bl	8002478 <HAL_TIM_PWM_Init>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000406:	f000 fabd 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000418:	187a      	adds	r2, r7, r1
 800041a:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <MX_TIM1_Init+0x164>)
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f002 ffc8 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000428:	f000 faac 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042c:	2124      	movs	r1, #36	; 0x24
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2260      	movs	r2, #96	; 0x60
 8000432:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	22fa      	movs	r2, #250	; 0xfa
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800045a:	1879      	adds	r1, r7, r1
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_TIM1_Init+0x164>)
 800045e:	2200      	movs	r2, #0
 8000460:	0018      	movs	r0, r3
 8000462:	f002 faab 	bl	80029bc <HAL_TIM_PWM_ConfigChannel>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800046a:	f000 fa8b 	bl	8000984 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	0192      	lsls	r2, r2, #6
 8000492:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800049a:	1d3a      	adds	r2, r7, #4
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_TIM1_Init+0x164>)
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 ffe5 	bl	8003470 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80004aa:	f000 fa6b 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <MX_TIM1_Init+0x164>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fafb 	bl	8000aac <HAL_TIM_MspPostInit>

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b016      	add	sp, #88	; 0x58
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200000b8 	.word	0x200000b8
 80004c4:	40012c00 	.word	0x40012c00

080004c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ce:	2308      	movs	r3, #8
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2310      	movs	r3, #16
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f004 faeb 	bl	8004ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004de:	003b      	movs	r3, r7
 80004e0:	0018      	movs	r0, r3
 80004e2:	2308      	movs	r3, #8
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f004 fae4 	bl	8004ab4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_TIM3_Init+0xa0>)
 80004ee:	4a1f      	ldr	r2, [pc, #124]	; (800056c <MX_TIM3_Init+0xa4>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_TIM3_Init+0xa0>)
 80004f4:	2207      	movs	r2, #7
 80004f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_TIM3_Init+0xa0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_TIM3_Init+0xa0>)
 8000500:	22fa      	movs	r2, #250	; 0xfa
 8000502:	00d2      	lsls	r2, r2, #3
 8000504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_TIM3_Init+0xa0>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_TIM3_Init+0xa0>)
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_TIM3_Init+0xa0>)
 8000514:	0018      	movs	r0, r3
 8000516:	f001 ff5f 	bl	80023d8 <HAL_TIM_Base_Init>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800051e:	f000 fa31 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000522:	2108      	movs	r1, #8
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0152      	lsls	r2, r2, #5
 800052a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800052c:	187a      	adds	r2, r7, r1
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_TIM3_Init+0xa0>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fb08 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800053c:	f000 fa22 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000540:	003b      	movs	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000546:	003b      	movs	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800054c:	003a      	movs	r2, r7
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_TIM3_Init+0xa0>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f002 ff2e 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800055c:	f000 fa12 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b006      	add	sp, #24
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000100 	.word	0x20000100
 800056c:	40000400 	.word	0x40000400

08000570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <MX_USART2_UART_Init+0x60>)
 8000578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 800057c:	22e1      	movs	r2, #225	; 0xe1
 800057e:	0252      	lsls	r2, r2, #9
 8000580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 800059c:	22c0      	movs	r2, #192	; 0xc0
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MX_USART2_UART_Init+0x5c>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 ffc8 	bl	800354c <HAL_UART_Init>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80005c0:	f000 f9e0 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000148 	.word	0x20000148
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_DMA_Init+0x38>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_DMA_Init+0x38>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_DMA_Init+0x38>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2009      	movs	r0, #9
 80005f8:	f000 fce4 	bl	8000fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80005fc:	2009      	movs	r0, #9
 80005fe:	f000 fcf6 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	2414      	movs	r4, #20
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f004 fa47 	bl	8004ab4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b6e      	ldr	r3, [pc, #440]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b6d      	ldr	r3, [pc, #436]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0309      	lsls	r1, r1, #12
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	031b      	lsls	r3, r3, #12
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b67      	ldr	r3, [pc, #412]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b66      	ldr	r3, [pc, #408]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	03c9      	lsls	r1, r1, #15
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b63      	ldr	r3, [pc, #396]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	03db      	lsls	r3, r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b5f      	ldr	r3, [pc, #380]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0289      	lsls	r1, r1, #10
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b5c      	ldr	r3, [pc, #368]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	029b      	lsls	r3, r3, #10
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b58      	ldr	r3, [pc, #352]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	02c9      	lsls	r1, r1, #11
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b55      	ldr	r3, [pc, #340]	; (80007e0 <MX_GPIO_Init+0x1d0>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	02db      	lsls	r3, r3, #11
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Test_Pin1_Pin|Test_Pin2_Pin|DIR_A_Pin|DIR_B_Pin, GPIO_PIN_RESET);
 8000696:	23ac      	movs	r3, #172	; 0xac
 8000698:	0119      	lsls	r1, r3, #4
 800069a:	2390      	movs	r3, #144	; 0x90
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2200      	movs	r2, #0
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 f86d 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_Pin3_Pin|Test_Pin4_Pin, GPIO_PIN_RESET);
 80006a6:	4b4f      	ldr	r3, [pc, #316]	; (80007e4 <MX_GPIO_Init+0x1d4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	2130      	movs	r1, #48	; 0x30
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f867 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Test_Pin5_Pin|Test_Pin6_Pin|Test_Pin7_Pin|Test_Pin8_Pin
 80006b2:	494d      	ldr	r1, [pc, #308]	; (80007e8 <MX_GPIO_Init+0x1d8>)
 80006b4:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <MX_GPIO_Init+0x1dc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f861 	bl	8001780 <HAL_GPIO_WritePin>
                          |Test_Pin9_Pin|DIR_IC_Pin|EN_A_Pin|EN_B_Pin
                          |OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Test_Pin1_Pin Test_Pin2_Pin DIR_A_Pin DIR_B_Pin */
  GPIO_InitStruct.Pin = Test_Pin1_Pin|Test_Pin2_Pin|DIR_A_Pin|DIR_B_Pin;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	22ac      	movs	r2, #172	; 0xac
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2202      	movs	r2, #2
 80006d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	193a      	adds	r2, r7, r4
 80006da:	2390      	movs	r3, #144	; 0x90
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fed5 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin3_Pin Test_Pin4_Pin */
  GPIO_InitStruct.Pin = Test_Pin3_Pin|Test_Pin4_Pin;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2230      	movs	r2, #48	; 0x30
 80006ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2202      	movs	r2, #2
 80006f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	4a38      	ldr	r2, [pc, #224]	; (80007e4 <MX_GPIO_Init+0x1d4>)
 8000702:	0019      	movs	r1, r3
 8000704:	0010      	movs	r0, r2
 8000706:	f000 fec3 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin5_Pin Test_Pin6_Pin Test_Pin7_Pin Test_Pin8_Pin
                           Test_Pin9_Pin DIR_IC_Pin OE_Pin */
  GPIO_InitStruct.Pin = Test_Pin5_Pin|Test_Pin6_Pin|Test_Pin7_Pin|Test_Pin8_Pin
 800070a:	193b      	adds	r3, r7, r4
 800070c:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <MX_GPIO_Init+0x1e0>)
 800070e:	601a      	str	r2, [r3, #0]
                          |Test_Pin9_Pin|DIR_IC_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2201      	movs	r2, #1
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2202      	movs	r2, #2
 800071a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	193b      	adds	r3, r7, r4
 8000724:	4a31      	ldr	r2, [pc, #196]	; (80007ec <MX_GPIO_Init+0x1dc>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f000 feb1 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_Sensor_IO1_Pin IR_Sensor_IO2_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_IO1_Pin|IR_Sensor_IO2_Pin;
 800072e:	0021      	movs	r1, r4
 8000730:	187b      	adds	r3, r7, r1
 8000732:	22c0      	movs	r2, #192	; 0xc0
 8000734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2288      	movs	r2, #136	; 0x88
 800073a:	0352      	lsls	r2, r2, #13
 800073c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	000c      	movs	r4, r1
 8000746:	187b      	adds	r3, r7, r1
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <MX_GPIO_Init+0x1d4>)
 800074a:	0019      	movs	r1, r3
 800074c:	0010      	movs	r0, r2
 800074e:	f000 fe9f 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_SW1_Pin Limit_SW2_Pin Limit_SW3_Pin Limit_SW4_Pin */
  GPIO_InitStruct.Pin = Limit_SW1_Pin|Limit_SW2_Pin|Limit_SW3_Pin|Limit_SW4_Pin;
 8000752:	0021      	movs	r1, r4
 8000754:	187b      	adds	r3, r7, r1
 8000756:	22f0      	movs	r2, #240	; 0xf0
 8000758:	0152      	lsls	r2, r2, #5
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	000c      	movs	r4, r1
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2202      	movs	r2, #2
 8000768:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	193b      	adds	r3, r7, r4
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_GPIO_Init+0x1d4>)
 800076e:	0019      	movs	r1, r3
 8000770:	0010      	movs	r0, r2
 8000772:	f000 fe8d 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2238      	movs	r2, #56	; 0x38
 800077a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2202      	movs	r2, #2
 8000780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2203      	movs	r2, #3
 800078c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	193b      	adds	r3, r7, r4
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_GPIO_Init+0x1dc>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 fe78 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 80007a0:	0021      	movs	r1, r4
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2201      	movs	r2, #1
 80007ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <MX_GPIO_Init+0x1dc>)
 80007c0:	0019      	movs	r1, r3
 80007c2:	0010      	movs	r0, r2
 80007c4:	f000 fe64 	bl	8001490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2007      	movs	r0, #7
 80007ce:	f000 fbf9 	bl	8000fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 fc0b 	bl	8000fee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b00b      	add	sp, #44	; 0x2c
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000800 	.word	0x48000800
 80007e8:	00000fc7 	.word	0x00000fc7
 80007ec:	48000400 	.word	0x48000400
 80007f0:	00000e47 	.word	0x00000e47

080007f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	801a      	strh	r2, [r3, #0]
	//we switched timers, update timer used for ir sensors
	UNUSED(GPIO_Pin);
	if(GPIO_Pin == GPIO_PIN_6)
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b40      	cmp	r3, #64	; 0x40
 8000806:	d11a      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x4a>
	{
		player1score = player1score + 1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <HAL_GPIO_EXTI_Callback+0x90>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <HAL_GPIO_EXTI_Callback+0x90>)
 8000812:	701a      	strb	r2, [r3, #0]
		sprintf(score_read, "%d\n\r", player1score);
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_GPIO_EXTI_Callback+0x90>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	001a      	movs	r2, r3
 800081a:	491b      	ldr	r1, [pc, #108]	; (8000888 <HAL_GPIO_EXTI_Callback+0x94>)
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_GPIO_EXTI_Callback+0x98>)
 800081e:	0018      	movs	r0, r3
 8000820:	f004 f8fe 	bl	8004a20 <siprintf>
		HAL_UART_Transmit(&huart2, player1scoreack, sizeof(player1scoreack), 100);
 8000824:	491a      	ldr	r1, [pc, #104]	; (8000890 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	221e      	movs	r2, #30
 800082c:	f002 fee2 	bl	80035f4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, score_read, sizeof(score_read), 100);
 8000830:	4916      	ldr	r1, [pc, #88]	; (800088c <HAL_GPIO_EXTI_Callback+0x98>)
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	220a      	movs	r2, #10
 8000838:	f002 fedc 	bl	80035f4 <HAL_UART_Transmit>
		sprintf(score_read, "%d\n\r", player2score);
		HAL_UART_Transmit(&huart2, player2scoreack, sizeof(player2scoreack), 100);
		HAL_UART_Transmit(&huart2, score_read, sizeof(score_read), 100);
	}

}
 800083c:	e01d      	b.n	800087a <HAL_GPIO_EXTI_Callback+0x86>
	else if(GPIO_Pin == GPIO_PIN_7)
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b80      	cmp	r3, #128	; 0x80
 8000844:	d119      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x86>
		player2score = player2score + 1;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000850:	701a      	strb	r2, [r3, #0]
		sprintf(score_read, "%d\n\r", player2score);
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	001a      	movs	r2, r3
 8000858:	490b      	ldr	r1, [pc, #44]	; (8000888 <HAL_GPIO_EXTI_Callback+0x94>)
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_GPIO_EXTI_Callback+0x98>)
 800085c:	0018      	movs	r0, r3
 800085e:	f004 f8df 	bl	8004a20 <siprintf>
		HAL_UART_Transmit(&huart2, player2scoreack, sizeof(player2scoreack), 100);
 8000862:	490e      	ldr	r1, [pc, #56]	; (800089c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	221e      	movs	r2, #30
 800086a:	f002 fec3 	bl	80035f4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, score_read, sizeof(score_read), 100);
 800086e:	4907      	ldr	r1, [pc, #28]	; (800088c <HAL_GPIO_EXTI_Callback+0x98>)
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	220a      	movs	r2, #10
 8000876:	f002 febd 	bl	80035f4 <HAL_UART_Transmit>
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000222 	.word	0x20000222
 8000888:	08005d3c 	.word	0x08005d3c
 800088c:	20000218 	.word	0x20000218
 8000890:	20000000 	.word	0x20000000
 8000894:	20000148 	.word	0x20000148
 8000898:	20000223 	.word	0x20000223
 800089c:	20000020 	.word	0x20000020

080008a0 <remove_all_chars>:

void remove_all_chars(char* str, char c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	000a      	movs	r2, r1
 80008aa:	1cfb      	adds	r3, r7, #3
 80008ac:	701a      	strb	r2, [r3, #0]
    char *pr = str, *pw = str;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 80008b6:	e011      	b.n	80008dc <remove_all_chars+0x3c>
        *pw = *pr++;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	60fa      	str	r2, [r7, #12]
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	701a      	strb	r2, [r3, #0]
        pw += (*pw != c);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	1cfa      	adds	r2, r7, #3
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	4193      	sbcs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	001a      	movs	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	189b      	adds	r3, r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1e9      	bne.n	80008b8 <remove_all_chars+0x18>
    }
    *pw = '\0';
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_UART_RxCpltCallback>:
	return(arr_value);
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//rx transfer completed callback
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	arr_value = map_speed(arr_data_raw);

	TIM1->CCR1 = arr_data_raw / 2;
	TIM1->ARR = arr_data_raw;
	*/
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_UART_RxCpltCallback+0x7c>)
 80008fe:	2100      	movs	r1, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fe11 	bl	8002528 <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 2000;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_UART_RxCpltCallback+0x80>)
 8000908:	22fa      	movs	r2, #250	; 0xfa
 800090a:	00d2      	lsls	r2, r2, #3
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->ARR = 4000;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_RxCpltCallback+0x80>)
 8000910:	22fa      	movs	r2, #250	; 0xfa
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
	remove_all_chars(rxdata, 'b');
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_RxCpltCallback+0x84>)
 8000918:	2162      	movs	r1, #98	; 0x62
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff ffc0 	bl	80008a0 <remove_all_chars>
	remove_all_chars(rxdata, '\'');
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_UART_RxCpltCallback+0x84>)
 8000922:	2127      	movs	r1, #39	; 0x27
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff ffbb 	bl	80008a0 <remove_all_chars>
	//char *sign = strstr(rxdata, "-")
	sscanf(rxdata, "%d", &rx_read);
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_UART_RxCpltCallback+0x88>)
 800092c:	4914      	ldr	r1, [pc, #80]	; (8000980 <HAL_UART_RxCpltCallback+0x8c>)
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_UART_RxCpltCallback+0x84>)
 8000930:	0018      	movs	r0, r3
 8000932:	f004 f895 	bl	8004a60 <siscanf>
 	if(((uint16_t)(rx_read)) >> 7)
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_RxCpltCallback+0x88>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	09db      	lsrs	r3, r3, #7
 800093e:	b29b      	uxth	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <HAL_UART_RxCpltCallback+0x62>
	{
 		HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), SET);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	0099      	lsls	r1, r3, #2
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2201      	movs	r2, #1
 800094e:	0018      	movs	r0, r3
 8000950:	f000 ff16 	bl	8001780 <HAL_GPIO_WritePin>
	}
 	else
 	{
 		HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 	}
}
 8000954:	e007      	b.n	8000966 <HAL_UART_RxCpltCallback+0x72>
 		HAL_GPIO_WritePin(GPIOA, (GPIO_PIN_9), RESET);
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	0099      	lsls	r1, r3, #2
 800095a:	2390      	movs	r3, #144	; 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2200      	movs	r2, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f000 ff0d 	bl	8001780 <HAL_GPIO_WritePin>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	200000b8 	.word	0x200000b8
 8000974:	40012c00 	.word	0x40012c00
 8000978:	20000214 	.word	0x20000214
 800097c:	20000224 	.word	0x20000224
 8000980:	08005d44 	.word	0x08005d44

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x44>)
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_MspInit+0x44>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	619a      	str	r2, [r3, #24]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x44>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x44>)
 80009b0:	69da      	ldr	r2, [r3, #28]
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_MspInit+0x44>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0549      	lsls	r1, r1, #21
 80009b8:	430a      	orrs	r2, r1
 80009ba:	61da      	str	r2, [r3, #28]
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_MspInit+0x44>)
 80009be:	69da      	ldr	r2, [r3, #28]
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	055b      	lsls	r3, r3, #21
 80009c4:	4013      	ands	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	2414      	movs	r4, #20
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f004 f862 	bl	8004ab4 <memset>
  if(htim_base->Instance==TIM1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <HAL_TIM_Base_MspInit+0xc8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d134      	bne.n	8000a64 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0109      	lsls	r1, r1, #4
 8000a04:	430a      	orrs	r2, r1
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_B_Pin;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2202      	movs	r2, #2
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2202      	movs	r2, #2
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PUL_B_GPIO_Port, &GPIO_InitStruct);
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	2390      	movs	r3, #144	; 0x90
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fd17 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a62:	e018      	b.n	8000a96 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_TIM_Base_MspInit+0xd0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d113      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a70:	69da      	ldr	r2, [r3, #28]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a74:	2102      	movs	r1, #2
 8000a76:	430a      	orrs	r2, r1
 8000a78:	61da      	str	r2, [r3, #28]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_TIM_Base_MspInit+0xcc>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f000 fa9a 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a90:	2010      	movs	r0, #16
 8000a92:	f000 faac 	bl	8000fee <HAL_NVIC_EnableIRQ>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b00b      	add	sp, #44	; 0x2c
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40012c00 	.word	0x40012c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40000400 	.word	0x40000400

08000aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	240c      	movs	r4, #12
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2314      	movs	r3, #20
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f003 fff8 	bl	8004ab4 <memset>
  if(htim->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_TIM_MspPostInit+0x78>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d125      	bne.n	8000b1a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_TIM_MspPostInit+0x7c>)
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_TIM_MspPostInit+0x7c>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0289      	lsls	r1, r1, #10
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_TIM_MspPostInit+0x7c>)
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PUL_A_Pin;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	0052      	lsls	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	0021      	movs	r1, r4
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2202      	movs	r2, #2
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2202      	movs	r2, #2
 8000b0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PUL_A_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	187a      	adds	r2, r7, r1
 8000b0e:	2390      	movs	r3, #144	; 0x90
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fcbb 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b009      	add	sp, #36	; 0x24
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 ffb8 	bl	8004ab4 <memset>
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <HAL_UART_MspInit+0x10c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d170      	bne.n	8000c30 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0289      	lsls	r1, r1, #10
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b5e:	69da      	ldr	r2, [r3, #28]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	029b      	lsls	r3, r3, #10
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2202      	movs	r2, #2
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	187a      	adds	r2, r7, r1
 8000ba8:	2390      	movs	r3, #144	; 0x90
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fc6e 	bl	8001490 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_UART_MspInit+0x118>)
 8000bb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bda:	2220      	movs	r2, #32
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fa1e 	bl	8001028 <HAL_DMA_Init>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000bf0:	f7ff fec8 	bl	8000984 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bf6:	23a8      	movs	r3, #168	; 0xa8
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	4913      	ldr	r1, [pc, #76]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	4393      	bics	r3, r2
 8000c00:	22a8      	movs	r2, #168	; 0xa8
 8000c02:	508b      	str	r3, [r1, r2]
 8000c04:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000c06:	23a8      	movs	r3, #168	; 0xa8
 8000c08:	58d3      	ldr	r3, [r2, r3]
 8000c0a:	490f      	ldr	r1, [pc, #60]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000c0c:	2209      	movs	r2, #9
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	22a8      	movs	r2, #168	; 0xa8
 8000c12:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000c18:	675a      	str	r2, [r3, #116]	; 0x74
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	201c      	movs	r0, #28
 8000c26:	f000 f9cd 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f000 f9df 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00b      	add	sp, #44	; 0x2c
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	200001d0 	.word	0x200001d0
 8000c44:	40020008 	.word	0x40020008
 8000c48:	40020000 	.word	0x40020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8e0 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_IO1_Pin);
 8000c7e:	2040      	movs	r0, #64	; 0x40
 8000c80:	f000 fd9c 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_IO2_Pin);
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	f000 fd99 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <DMA1_Ch1_IRQHandler+0x14>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 faf1 	bl	800127e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	200001d0 	.word	0x200001d0

08000ca8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <TIM3_IRQHandler+0x14>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 fd6e 	bl	8002790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	20000100 	.word	0x20000100

08000cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <USART2_IRQHandler+0x14>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f002 fd8c 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000148 	.word	0x20000148

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f003 fedc 	bl	8004ac4 <__errno>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	425b      	negs	r3, r3
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	18d2      	adds	r2, r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b006      	add	sp, #24
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20008000 	.word	0x20008000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000228 	.word	0x20000228
 8000d40:	20000378 	.word	0x20000378

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d54:	f7ff fff6 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	; (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7e:	f003 fea7 	bl	8004ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d82:	f7ff fa5d 	bl	8000240 <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   r0, =_estack
 8000d88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000d94:	08005ee4 	.word	0x08005ee4
  ldr r2, =_sbss
 8000d98:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000d9c:	20000378 	.word	0x20000378

08000da0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_COMP_IRQHandler>
	...

08000da4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_Init+0x24>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_Init+0x24>)
 8000dae:	2110      	movs	r1, #16
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f809 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dba:	f7ff fde9 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_InitTick+0x5c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f9a1 	bl	8000128 <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f99c 	bl	8000128 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f90b 	bl	800100e <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e00f      	b.n	8000e20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80b      	bhi.n	8000e1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8d8 	bl	8000fc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_InitTick+0x64>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	20000040 	.word	0x20000040
 8000e2c:	20000048 	.word	0x20000048
 8000e30:	20000044 	.word	0x20000044

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	18d2      	adds	r2, r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000048 	.word	0x20000048
 8000e54:	2000022c 	.word	0x2000022c

08000e58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	2000022c 	.word	0x2000022c

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7e:	d809      	bhi.n	8000e94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	231f      	movs	r3, #31
 8000e88:	401a      	ands	r2, r3
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_EnableIRQ+0x30>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
  }
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb4:	d828      	bhi.n	8000f08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <__NVIC_SetPriority+0xd4>)
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	33c0      	adds	r3, #192	; 0xc0
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	589b      	ldr	r3, [r3, r2]
 8000ec6:	1dfa      	adds	r2, r7, #7
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	400a      	ands	r2, r1
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	21ff      	movs	r1, #255	; 0xff
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	43d2      	mvns	r2, r2
 8000eda:	401a      	ands	r2, r3
 8000edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	2303      	movs	r3, #3
 8000eee:	4003      	ands	r3, r0
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef4:	481f      	ldr	r0, [pc, #124]	; (8000f74 <__NVIC_SetPriority+0xd4>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	430a      	orrs	r2, r1
 8000f00:	33c0      	adds	r3, #192	; 0xc0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f06:	e031      	b.n	8000f6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <__NVIC_SetPriority+0xd8>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	230f      	movs	r3, #15
 8000f12:	400b      	ands	r3, r1
 8000f14:	3b08      	subs	r3, #8
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3306      	adds	r3, #6
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	18d3      	adds	r3, r2, r3
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	0011      	movs	r1, r2
 8000f28:	2203      	movs	r2, #3
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	00d2      	lsls	r2, r2, #3
 8000f2e:	21ff      	movs	r1, #255	; 0xff
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	401a      	ands	r2, r3
 8000f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	401a      	ands	r2, r3
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0018      	movs	r0, r3
 8000f48:	2303      	movs	r3, #3
 8000f4a:	4003      	ands	r3, r0
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	001c      	movs	r4, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	4023      	ands	r3, r4
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	3306      	adds	r3, #6
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	18c3      	adds	r3, r0, r3
 8000f68:	3304      	adds	r3, #4
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b003      	add	sp, #12
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	045b      	lsls	r3, r3, #17
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d301      	bcc.n	8000f94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f90:	2301      	movs	r3, #1
 8000f92:	e010      	b.n	8000fb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <SysTick_Config+0x44>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	3a01      	subs	r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff ff7c 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x44>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x44>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	210f      	movs	r1, #15
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	1c02      	adds	r2, r0, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b004      	add	sp, #16
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff33 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ffaf 	bl	8000f7c <SysTick_Config>
 800101e:	0003      	movs	r3, r0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e036      	b.n	80010ac <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2221      	movs	r2, #33	; 0x21
 8001042:	2102      	movs	r1, #2
 8001044:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <HAL_DMA_Init+0x8c>)
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800105e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0018      	movs	r0, r3
 8001090:	f000 f9c4 	bl	800141c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2221      	movs	r2, #33	; 0x21
 800109e:	2101      	movs	r1, #1
 80010a0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	ffffc00f 	.word	0xffffc00f

080010b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2317      	movs	r3, #23
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2220      	movs	r2, #32
 80010d2:	5c9b      	ldrb	r3, [r3, r2]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_DMA_Start_IT+0x24>
 80010d8:	2302      	movs	r3, #2
 80010da:	e04f      	b.n	800117c <HAL_DMA_Start_IT+0xc4>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2220      	movs	r2, #32
 80010e0:	2101      	movs	r1, #1
 80010e2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2221      	movs	r2, #33	; 0x21
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d13a      	bne.n	8001166 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2221      	movs	r2, #33	; 0x21
 80010f4:	2102      	movs	r1, #2
 80010f6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f954 	bl	80013c2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210e      	movs	r1, #14
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e00f      	b.n	8001154 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	210a      	movs	r1, #10
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2104      	movs	r1, #4
 8001150:	438a      	bics	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2101      	movs	r1, #1
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2220      	movs	r2, #32
 800116a:	2100      	movs	r1, #0
 800116c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800116e:	2317      	movs	r3, #23
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2202      	movs	r2, #2
 8001174:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001176:	2317      	movs	r3, #23
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b006      	add	sp, #24
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2221      	movs	r2, #33	; 0x21
 8001190:	5c9b      	ldrb	r3, [r3, r2]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d008      	beq.n	80011aa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2204      	movs	r2, #4
 800119c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2220      	movs	r2, #32
 80011a2:	2100      	movs	r1, #0
 80011a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e020      	b.n	80011ec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	210e      	movs	r1, #14
 80011b6:	438a      	bics	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	438a      	bics	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d2:	2101      	movs	r1, #1
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2221      	movs	r2, #33	; 0x21
 80011de:	2101      	movs	r1, #1
 80011e0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2220      	movs	r2, #32
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fc:	210f      	movs	r1, #15
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2221      	movs	r2, #33	; 0x21
 8001208:	5c9b      	ldrb	r3, [r3, r2]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d006      	beq.n	800121e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2204      	movs	r2, #4
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e028      	b.n	8001270 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	210e      	movs	r1, #14
 800122a:	438a      	bics	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	438a      	bics	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	2101      	movs	r1, #1
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2221      	movs	r2, #33	; 0x21
 8001252:	2101      	movs	r1, #1
 8001254:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2220      	movs	r2, #32
 800125a:	2100      	movs	r1, #0
 800125c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	0010      	movs	r0, r2
 800126e:	4798      	blx	r3
    }
  }
  return status;
 8001270:	230f      	movs	r3, #15
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	781b      	ldrb	r3, [r3, #0]
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2204      	movs	r2, #4
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	d024      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x72>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2204      	movs	r2, #4
 80012aa:	4013      	ands	r3, r2
 80012ac:	d020      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2220      	movs	r2, #32
 80012b6:	4013      	ands	r3, r2
 80012b8:	d107      	bne.n	80012ca <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2104      	movs	r1, #4
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	2104      	movs	r1, #4
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <HAL_DMA_IRQHandler+0x66>
 80012e2:	e06a      	b.n	80013ba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	0010      	movs	r0, r2
 80012ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012ee:	e064      	b.n	80013ba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	2202      	movs	r2, #2
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	d02b      	beq.n	8001358 <HAL_DMA_IRQHandler+0xda>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d027      	beq.n	8001358 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2220      	movs	r2, #32
 8001310:	4013      	ands	r3, r2
 8001312:	d10b      	bne.n	800132c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	210a      	movs	r1, #10
 8001320:	438a      	bics	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2221      	movs	r2, #33	; 0x21
 8001328:	2101      	movs	r1, #1
 800132a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	2102      	movs	r1, #2
 8001336:	4091      	lsls	r1, r2
 8001338:	000a      	movs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2220      	movs	r2, #32
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d036      	beq.n	80013ba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	0010      	movs	r0, r2
 8001354:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001356:	e030      	b.n	80013ba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2208      	movs	r2, #8
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	d028      	beq.n	80013ba <HAL_DMA_IRQHandler+0x13c>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2208      	movs	r2, #8
 800136c:	4013      	ands	r3, r2
 800136e:	d024      	beq.n	80013ba <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	210e      	movs	r1, #14
 800137c:	438a      	bics	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001388:	2101      	movs	r1, #1
 800138a:	4091      	lsls	r1, r2
 800138c:	000a      	movs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2221      	movs	r2, #33	; 0x21
 800139a:	2101      	movs	r1, #1
 800139c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	2100      	movs	r1, #0
 80013a4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	0010      	movs	r0, r2
 80013b6:	4798      	blx	r3
    }
  }
}
 80013b8:	e7ff      	b.n	80013ba <HAL_DMA_IRQHandler+0x13c>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d8:	2101      	movs	r1, #1
 80013da:	4091      	lsls	r1, r2
 80013dc:	000a      	movs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b10      	cmp	r3, #16
 80013ee:	d108      	bne.n	8001402 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001400:	e007      	b.n	8001412 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	60da      	str	r2, [r3, #12]
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	001a      	movs	r2, r3
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <DMA_CalcBaseAndBitshift+0x60>)
 800142c:	429a      	cmp	r2, r3
 800142e:	d810      	bhi.n	8001452 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <DMA_CalcBaseAndBitshift+0x64>)
 8001436:	4694      	mov	ip, r2
 8001438:	4463      	add	r3, ip
 800143a:	2114      	movs	r1, #20
 800143c:	0018      	movs	r0, r3
 800143e:	f7fe fe73 	bl	8000128 <__udivsi3>
 8001442:	0003      	movs	r3, r0
 8001444:	009a      	lsls	r2, r3, #2
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <DMA_CalcBaseAndBitshift+0x68>)
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001450:	e00f      	b.n	8001472 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <DMA_CalcBaseAndBitshift+0x6c>)
 8001458:	4694      	mov	ip, r2
 800145a:	4463      	add	r3, ip
 800145c:	2114      	movs	r1, #20
 800145e:	0018      	movs	r0, r3
 8001460:	f7fe fe62 	bl	8000128 <__udivsi3>
 8001464:	0003      	movs	r3, r0
 8001466:	009a      	lsls	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <DMA_CalcBaseAndBitshift+0x70>)
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40020407 	.word	0x40020407
 8001480:	bffdfff8 	.word	0xbffdfff8
 8001484:	40020000 	.word	0x40020000
 8001488:	bffdfbf8 	.word	0xbffdfbf8
 800148c:	40020400 	.word	0x40020400

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149e:	e155      	b.n	800174c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d100      	bne.n	80014b8 <HAL_GPIO_Init+0x28>
 80014b6:	e146      	b.n	8001746 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	409a      	lsls	r2, r3
 80014de:	0013      	movs	r3, r2
 80014e0:	43da      	mvns	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	2201      	movs	r2, #1
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2203      	movs	r2, #3
 8001538:	4013      	ands	r3, r2
 800153a:	2b03      	cmp	r3, #3
 800153c:	d017      	beq.n	800156e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	4013      	ands	r3, r2
 8001576:	2b02      	cmp	r3, #2
 8001578:	d123      	bne.n	80015c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	58d3      	ldr	r3, [r2, r3]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2207      	movs	r2, #7
 800158c:	4013      	ands	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2107      	movs	r1, #7
 80015a6:	400b      	ands	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	6939      	ldr	r1, [r7, #16]
 80015c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	401a      	ands	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d100      	bne.n	8001604 <HAL_GPIO_Init+0x174>
 8001602:	e0a0      	b.n	8001746 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_GPIO_Init+0x2d4>)
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	4b56      	ldr	r3, [pc, #344]	; (8001764 <HAL_GPIO_Init+0x2d4>)
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <HAL_GPIO_Init+0x2d4>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	589b      	ldr	r3, [r3, r2]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2203      	movs	r2, #3
 800162e:	4013      	ands	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	409a      	lsls	r2, r3
 8001636:	0013      	movs	r3, r2
 8001638:	43da      	mvns	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	2390      	movs	r3, #144	; 0x90
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	429a      	cmp	r2, r3
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x1ee>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_GPIO_Init+0x2dc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x1ea>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a46      	ldr	r2, [pc, #280]	; (8001770 <HAL_GPIO_Init+0x2e0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x1e6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a45      	ldr	r2, [pc, #276]	; (8001774 <HAL_GPIO_Init+0x2e4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x1e2>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a44      	ldr	r2, [pc, #272]	; (8001778 <HAL_GPIO_Init+0x2e8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x1de>
 800166a:	2304      	movs	r3, #4
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x1f0>
 800166e:	2305      	movs	r3, #5
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x1f0>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x1f0>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x1f0>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x1f0>
 800167e:	2300      	movs	r3, #0
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	2103      	movs	r1, #3
 8001684:	400a      	ands	r2, r1
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001690:	4935      	ldr	r1, [pc, #212]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_GPIO_Init+0x2ec>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	035b      	lsls	r3, r3, #13
 80016b6:	4013      	ands	r3, r2
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <HAL_GPIO_Init+0x2ec>)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_GPIO_Init+0x2ec>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43da      	mvns	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	039b      	lsls	r3, r3, #14
 80016e0:	4013      	ands	r3, r2
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_GPIO_Init+0x2ec>)
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_GPIO_Init+0x2ec>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43da      	mvns	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_GPIO_Init+0x2ec>)
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_GPIO_Init+0x2ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43da      	mvns	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	025b      	lsls	r3, r3, #9
 8001734:	4013      	ands	r3, r2
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_GPIO_Init+0x2ec>)
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	40da      	lsrs	r2, r3
 8001754:	1e13      	subs	r3, r2, #0
 8001756:	d000      	beq.n	800175a <HAL_GPIO_Init+0x2ca>
 8001758:	e6a2      	b.n	80014a0 <HAL_GPIO_Init+0x10>
  } 
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b006      	add	sp, #24
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	48000400 	.word	0x48000400
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00
 8001778:	48001000 	.word	0x48001000
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	0008      	movs	r0, r1
 800178a:	0011      	movs	r1, r2
 800178c:	1cbb      	adds	r3, r7, #2
 800178e:	1c02      	adds	r2, r0, #0
 8001790:	801a      	strh	r2, [r3, #0]
 8001792:	1c7b      	adds	r3, r7, #1
 8001794:	1c0a      	adds	r2, r1, #0
 8001796:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001798:	1c7b      	adds	r3, r7, #1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a0:	1cbb      	adds	r3, r7, #2
 80017a2:	881a      	ldrh	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017aa:	1cbb      	adds	r3, r7, #2
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dbb      	adds	r3, r7, #6
 80017c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	1dba      	adds	r2, r7, #6
 80017ce:	8812      	ldrh	r2, [r2, #0]
 80017d0:	4013      	ands	r3, r2
 80017d2:	d008      	beq.n	80017e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017d6:	1dba      	adds	r2, r7, #6
 80017d8:	8812      	ldrh	r2, [r2, #0]
 80017da:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017dc:	1dbb      	adds	r3, r7, #6
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff f807 	bl	80007f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	f000 fb76 	bl	8001ef4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_RCC_OscConfig+0x20>
 8001812:	e08e      	b.n	8001932 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001814:	4bc5      	ldr	r3, [pc, #788]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	220c      	movs	r2, #12
 800181a:	4013      	ands	r3, r2
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00e      	beq.n	800183e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4bc2      	ldr	r3, [pc, #776]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b08      	cmp	r3, #8
 800182a:	d117      	bne.n	800185c <HAL_RCC_OscConfig+0x68>
 800182c:	4bbf      	ldr	r3, [pc, #764]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	23c0      	movs	r3, #192	; 0xc0
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	401a      	ands	r2, r3
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	429a      	cmp	r2, r3
 800183c:	d10e      	bne.n	800185c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4bbb      	ldr	r3, [pc, #748]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4013      	ands	r3, r2
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x58>
 800184a:	e071      	b.n	8001930 <HAL_RCC_OscConfig+0x13c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d000      	beq.n	8001856 <HAL_RCC_OscConfig+0x62>
 8001854:	e06c      	b.n	8001930 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f000 fb4c 	bl	8001ef4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x80>
 8001864:	4bb1      	ldr	r3, [pc, #708]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4bb0      	ldr	r3, [pc, #704]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0249      	lsls	r1, r1, #9
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e02f      	b.n	80018d4 <HAL_RCC_OscConfig+0xe0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0xa2>
 800187c:	4bab      	ldr	r3, [pc, #684]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4baa      	ldr	r3, [pc, #680]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001882:	49ab      	ldr	r1, [pc, #684]	; (8001b30 <HAL_RCC_OscConfig+0x33c>)
 8001884:	400a      	ands	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4ba8      	ldr	r3, [pc, #672]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4ba7      	ldr	r3, [pc, #668]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800188e:	49a9      	ldr	r1, [pc, #676]	; (8001b34 <HAL_RCC_OscConfig+0x340>)
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e01e      	b.n	80018d4 <HAL_RCC_OscConfig+0xe0>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10e      	bne.n	80018bc <HAL_RCC_OscConfig+0xc8>
 800189e:	4ba3      	ldr	r3, [pc, #652]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4ba2      	ldr	r3, [pc, #648]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	02c9      	lsls	r1, r1, #11
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0249      	lsls	r1, r1, #9
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xe0>
 80018bc:	4b9b      	ldr	r3, [pc, #620]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b9a      	ldr	r3, [pc, #616]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018c2:	499b      	ldr	r1, [pc, #620]	; (8001b30 <HAL_RCC_OscConfig+0x33c>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	4b98      	ldr	r3, [pc, #608]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b97      	ldr	r3, [pc, #604]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018ce:	4999      	ldr	r1, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x340>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d014      	beq.n	8001906 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fabc 	bl	8000e58 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e6:	f7ff fab7 	bl	8000e58 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e2fd      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0xf2>
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff faa7 	bl	8000e58 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff faa2 	bl	8000e58 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e2e8      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	029b      	lsls	r3, r3, #10
 800192a:	4013      	ands	r3, r2
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x11c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x14a>
 800193c:	e06c      	b.n	8001a18 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800193e:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	220c      	movs	r2, #12
 8001944:	4013      	ands	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	220c      	movs	r2, #12
 800194e:	4013      	ands	r3, r2
 8001950:	2b08      	cmp	r3, #8
 8001952:	d11f      	bne.n	8001994 <HAL_RCC_OscConfig+0x1a0>
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	23c0      	movs	r3, #192	; 0xc0
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	401a      	ands	r2, r3
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	429a      	cmp	r2, r3
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x188>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e2bb      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	22f8      	movs	r2, #248	; 0xf8
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00da      	lsls	r2, r3, #3
 800198c:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e041      	b.n	8001a18 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d024      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fa56 	bl	8000e58 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa51 	bl	8000e58 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e297      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2202      	movs	r2, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d0f1      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	22f8      	movs	r2, #248	; 0xf8
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00da      	lsls	r2, r3, #3
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e018      	b.n	8001a18 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	438a      	bics	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fa31 	bl	8000e58 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa2c 	bl	8000e58 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e272      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f1      	bne.n	80019fc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d019      	beq.n	8001a5e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	430a      	orrs	r2, r1
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fa0f 	bl	8000e58 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fa0a 	bl	8000e58 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e250      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d0f1      	beq.n	8001a40 <HAL_RCC_OscConfig+0x24c>
 8001a5c:	e018      	b.n	8001a90 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	438a      	bics	r2, r1
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f9f5 	bl	8000e58 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff f9f0 	bl	8000e58 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e236      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d1f1      	bne.n	8001a74 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2204      	movs	r2, #4
 8001a96:	4013      	ands	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2a8>
 8001a9a:	e0b5      	b.n	8001c08 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9c:	201f      	movs	r0, #31
 8001a9e:	183b      	adds	r3, r7, r0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	055b      	lsls	r3, r3, #21
 8001aac:	4013      	ands	r3, r2
 8001aae:	d110      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0549      	lsls	r1, r1, #21
 8001aba:	430a      	orrs	r2, r1
 8001abc:	61da      	str	r2, [r3, #28]
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	055b      	lsls	r3, r3, #21
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001acc:	183b      	adds	r3, r7, r0
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x344>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d11a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_RCC_OscConfig+0x344>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_RCC_OscConfig+0x344>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0049      	lsls	r1, r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aec:	f7ff f9b4 	bl	8000e58 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff f9af 	bl	8000e58 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1f5      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x344>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x348>
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	621a      	str	r2, [r3, #32]
 8001b28:	e036      	b.n	8001b98 <HAL_RCC_OscConfig+0x3a4>
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	fffeffff 	.word	0xfffeffff
 8001b34:	fffbffff 	.word	0xfffbffff
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x36a>
 8001b44:	4bca      	ldr	r3, [pc, #808]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	4bc9      	ldr	r3, [pc, #804]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	621a      	str	r2, [r3, #32]
 8001b50:	4bc7      	ldr	r3, [pc, #796]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4bc6      	ldr	r3, [pc, #792]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	2104      	movs	r1, #4
 8001b58:	438a      	bics	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x3a4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x38c>
 8001b66:	4bc2      	ldr	r3, [pc, #776]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b68:	6a1a      	ldr	r2, [r3, #32]
 8001b6a:	4bc1      	ldr	r3, [pc, #772]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	621a      	str	r2, [r3, #32]
 8001b72:	4bbf      	ldr	r3, [pc, #764]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	4bbe      	ldr	r3, [pc, #760]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	621a      	str	r2, [r3, #32]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0x3a4>
 8001b80:	4bbb      	ldr	r3, [pc, #748]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	6a1a      	ldr	r2, [r3, #32]
 8001b84:	4bba      	ldr	r3, [pc, #744]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	438a      	bics	r2, r1
 8001b8a:	621a      	str	r2, [r3, #32]
 8001b8c:	4bb8      	ldr	r3, [pc, #736]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4bb7      	ldr	r3, [pc, #732]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2104      	movs	r1, #4
 8001b94:	438a      	bics	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d014      	beq.n	8001bca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f95a 	bl	8000e58 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f955 	bl	8000e58 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4aaf      	ldr	r2, [pc, #700]	; (8001e74 <HAL_RCC_OscConfig+0x680>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e19a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	4bac      	ldr	r3, [pc, #688]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x3b6>
 8001bc8:	e013      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f945 	bl	8000e58 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f940 	bl	8000e58 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4aa5      	ldr	r2, [pc, #660]	; (8001e74 <HAL_RCC_OscConfig+0x680>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e185      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4ba1      	ldr	r3, [pc, #644]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf2:	231f      	movs	r3, #31
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b9c      	ldr	r3, [pc, #624]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	4b9b      	ldr	r3, [pc, #620]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	499d      	ldr	r1, [pc, #628]	; (8001e78 <HAL_RCC_OscConfig+0x684>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12a      	bne.n	8001c70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c1a:	4b95      	ldr	r3, [pc, #596]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c20:	2104      	movs	r1, #4
 8001c22:	430a      	orrs	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c26:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7ff f911 	bl	8000e58 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c3c:	f7ff f90c 	bl	8000e58 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e152      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f1      	beq.n	8001c3c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c58:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	22f8      	movs	r2, #248	; 0xf8
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	00da      	lsls	r2, r3, #3
 8001c68:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6e:	e034      	b.n	8001cda <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	3305      	adds	r3, #5
 8001c76:	d111      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c78:	4b7d      	ldr	r3, [pc, #500]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7c:	4b7c      	ldr	r3, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c7e:	2104      	movs	r1, #4
 8001c80:	438a      	bics	r2, r1
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c84:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	22f8      	movs	r2, #248	; 0xf8
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	00da      	lsls	r2, r3, #3
 8001c94:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9a:	e01e      	b.n	8001cda <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c9c:	4b74      	ldr	r3, [pc, #464]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f8d0 	bl	8000e58 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cbe:	f7ff f8cb 	bl	8000e58 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e111      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cd0:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d1f1      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d05c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ce4:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	220c      	movs	r2, #12
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d00e      	beq.n	8001d0e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cf0:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d114      	bne.n	8001d26 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	23c0      	movs	r3, #192	; 0xc0
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	401a      	ands	r2, r3
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d0e:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	4013      	ands	r3, r2
 8001d18:	d040      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5a8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d03c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0e6      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d32:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0249      	lsls	r1, r1, #9
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f88c 	bl	8000e58 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d46:	f7ff f887 	bl	8000e58 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0cd      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d58:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x552>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d66:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d6c:	4943      	ldr	r1, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x688>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff f871 	bl	8000e58 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7c:	f7ff f86c 	bl	8000e58 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0b2      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x588>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d9c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d100      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5b4>
 8001da6:	e0a4      	b.n	8001ef2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	220c      	movs	r2, #12
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d100      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5c2>
 8001db4:	e078      	b.n	8001ea8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d14c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001dc4:	492e      	ldr	r1, [pc, #184]	; (8001e80 <HAL_RCC_OscConfig+0x68c>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff f845 	bl	8000e58 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f840 	bl	8000e58 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e086      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df2:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	220f      	movs	r2, #15
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x690>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0449      	lsls	r1, r1, #17
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f813 	bl	8000e58 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f80e 	bl	8000e58 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e054      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	049b      	lsls	r3, r3, #18
 8001e52:	4013      	ands	r3, r2
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x644>
 8001e56:	e04c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <HAL_RCC_OscConfig+0x68c>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fff8 	bl	8000e58 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x6a6>
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000
 8001e74:	00001388 	.word	0x00001388
 8001e78:	efffffff 	.word	0xefffffff
 8001e7c:	fffeffff 	.word	0xfffeffff
 8001e80:	feffffff 	.word	0xfeffffff
 8001e84:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe ffe6 	bl	8000e58 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e02c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCC_OscConfig+0x708>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	049b      	lsls	r3, r3, #18
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x694>
 8001ea6:	e024      	b.n	8001ef2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e01f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_OscConfig+0x708>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_OscConfig+0x708>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10e      	bne.n	8001eee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	23f0      	movs	r3, #240	; 0xf0
 8001ee2:	039b      	lsls	r3, r3, #14
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b008      	add	sp, #32
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0bf      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b61      	ldr	r3, [pc, #388]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d911      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4393      	bics	r3, r2
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0a6      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d015      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2204      	movs	r2, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d006      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f60:	21e0      	movs	r1, #224	; 0xe0
 8001f62:	00c9      	lsls	r1, r1, #3
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	22f0      	movs	r2, #240	; 0xf0
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d04c      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4013      	ands	r3, r2
 8001f98:	d120      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07a      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	049b      	lsls	r3, r3, #18
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06e      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e062      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e05b      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7fe ff32 	bl	8000e58 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff8:	e009      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffa:	f7fe ff2d 	bl	8000e58 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x1a4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e042      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	220c      	movs	r2, #12
 8002014:	401a      	ands	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1ec      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d211      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x19c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e020      	b.n	8002094 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x1a8>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002070:	f000 f820 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002074:	0001      	movs	r1, r0
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	220f      	movs	r2, #15
 800207e:	4013      	ands	r3, r2
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1ac>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1b0>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800208c:	2003      	movs	r0, #3
 800208e:	f7fe fe9d 	bl	8000dcc <HAL_InitTick>
  
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b004      	add	sp, #16
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	fffff8ff 	.word	0xfffff8ff
 80020ac:	08005d54 	.word	0x08005d54
 80020b0:	20000040 	.word	0x20000040

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	220c      	movs	r2, #12
 80020d8:	4013      	ands	r3, r2
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d046      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>
 80020de:	d848      	bhi.n	8002172 <HAL_RCC_GetSysClockFreq+0xbe>
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d002      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x36>
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d003      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x3c>
 80020e8:	e043      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ea:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020ec:	613b      	str	r3, [r7, #16]
      break;
 80020ee:	e043      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	0c9b      	lsrs	r3, r3, #18
 80020f4:	220f      	movs	r2, #15
 80020f6:	4013      	ands	r3, r2
 80020f8:	4a24      	ldr	r2, [pc, #144]	; (800218c <HAL_RCC_GetSysClockFreq+0xd8>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	220f      	movs	r2, #15
 8002104:	4013      	ands	r3, r2
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	23c0      	movs	r3, #192	; 0xc0
 8002110:	025b      	lsls	r3, r3, #9
 8002112:	401a      	ands	r2, r3
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	429a      	cmp	r2, r3
 800211a:	d109      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002120:	f7fe f802 	bl	8000128 <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	001a      	movs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4353      	muls	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e01a      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	401a      	ands	r2, r3
 8002138:	23c0      	movs	r3, #192	; 0xc0
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	429a      	cmp	r2, r3
 800213e:	d109      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	4814      	ldr	r0, [pc, #80]	; (8002194 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002144:	f7fd fff0 	bl	8000128 <__udivsi3>
 8002148:	0003      	movs	r3, r0
 800214a:	001a      	movs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4353      	muls	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e008      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002158:	f7fd ffe6 	bl	8000128 <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	001a      	movs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4353      	muls	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	613b      	str	r3, [r7, #16]
      break;
 800216a:	e005      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_GetSysClockFreq+0xe0>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e002      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002178:	693b      	ldr	r3, [r7, #16]
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b006      	add	sp, #24
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	08005d6c 	.word	0x08005d6c
 8002190:	08005d7c 	.word	0x08005d7c
 8002194:	02dc6c00 	.word	0x02dc6c00

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000040 	.word	0x20000040

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021b0:	f7ff fff2 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b4:	0001      	movs	r1, r0
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	2207      	movs	r2, #7
 80021be:	4013      	ands	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	40d9      	lsrs	r1, r3
 80021c6:	000b      	movs	r3, r1
}    
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08005d64 	.word	0x08005d64

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	025b      	lsls	r3, r3, #9
 80021f0:	4013      	ands	r3, r2
 80021f2:	d100      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021f4:	e08e      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2017      	movs	r0, #23
 80021f8:	183b      	adds	r3, r7, r0
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	055b      	lsls	r3, r3, #21
 8002206:	4013      	ands	r3, r2
 8002208:	d110      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	0549      	lsls	r1, r1, #21
 8002214:	430a      	orrs	r2, r1
 8002216:	61da      	str	r2, [r3, #28]
 8002218:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	183b      	adds	r3, r7, r0
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d11a      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002238:	4b60      	ldr	r3, [pc, #384]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	0049      	lsls	r1, r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002246:	f7fe fe07 	bl	8000e58 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	e008      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe fe02 	bl	8000e58 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0a6      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b56      	ldr	r3, [pc, #344]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d0f0      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800226e:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	23c0      	movs	r3, #192	; 0xc0
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4013      	ands	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d034      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	23c0      	movs	r3, #192	; 0xc0
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4013      	ands	r3, r2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d02c      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002290:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0249      	lsls	r1, r1, #9
 80022a4:	430a      	orrs	r2, r1
 80022a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ae:	4945      	ldr	r1, [pc, #276]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022b4:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fdc9 	bl	8000e58 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ca:	e009      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fdc4 	bl	8000e58 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e067      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ea:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022fe:	2317      	movs	r3, #23
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800230e:	492f      	ldr	r1, [pc, #188]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002310:	400a      	ands	r2, r1
 8002312:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	2203      	movs	r2, #3
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232e:	430a      	orrs	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d009      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800234c:	430a      	orrs	r2, r1
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	02db      	lsls	r3, r3, #11
 8002358:	4013      	ands	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800236c:	430a      	orrs	r2, r1
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	4013      	ands	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	2210      	movs	r2, #16
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800238a:	430a      	orrs	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4013      	ands	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b006      	add	sp, #24
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
 80023c0:	fffffcff 	.word	0xfffffcff
 80023c4:	fffeffff 	.word	0xfffeffff
 80023c8:	00001388 	.word	0x00001388
 80023cc:	efffffff 	.word	0xefffffff
 80023d0:	fffcffff 	.word	0xfffcffff
 80023d4:	fff3ffff 	.word	0xfff3ffff

080023d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e042      	b.n	8002470 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223d      	movs	r2, #61	; 0x3d
 80023ee:	5c9b      	ldrb	r3, [r3, r2]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	223c      	movs	r2, #60	; 0x3c
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f7fe fae9 	bl	80009d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	223d      	movs	r2, #61	; 0x3d
 800240a:	2102      	movs	r1, #2
 800240c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	0019      	movs	r1, r3
 8002418:	0010      	movs	r0, r2
 800241a:	f000 fc91 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2246      	movs	r2, #70	; 0x46
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223e      	movs	r2, #62	; 0x3e
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	223f      	movs	r2, #63	; 0x3f
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2240      	movs	r2, #64	; 0x40
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2241      	movs	r2, #65	; 0x41
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2242      	movs	r2, #66	; 0x42
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2243      	movs	r2, #67	; 0x43
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2244      	movs	r2, #68	; 0x44
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2245      	movs	r2, #69	; 0x45
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	223d      	movs	r2, #61	; 0x3d
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e042      	b.n	8002510 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	223d      	movs	r2, #61	; 0x3d
 800248e:	5c9b      	ldrb	r3, [r3, r2]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d107      	bne.n	80024a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	223c      	movs	r2, #60	; 0x3c
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 f839 	bl	8002518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223d      	movs	r2, #61	; 0x3d
 80024aa:	2102      	movs	r1, #2
 80024ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	0019      	movs	r1, r3
 80024b8:	0010      	movs	r0, r2
 80024ba:	f000 fc41 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2246      	movs	r2, #70	; 0x46
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223e      	movs	r2, #62	; 0x3e
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	223f      	movs	r2, #63	; 0x3f
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2241      	movs	r2, #65	; 0x41
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2242      	movs	r2, #66	; 0x42
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2243      	movs	r2, #67	; 0x43
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2244      	movs	r2, #68	; 0x44
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2245      	movs	r2, #69	; 0x45
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	223d      	movs	r2, #61	; 0x3d
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d108      	bne.n	800254a <HAL_TIM_PWM_Start+0x22>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	223e      	movs	r2, #62	; 0x3e
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	4193      	sbcs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e01f      	b.n	800258a <HAL_TIM_PWM_Start+0x62>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d108      	bne.n	8002562 <HAL_TIM_PWM_Start+0x3a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223f      	movs	r2, #63	; 0x3f
 8002554:	5c9b      	ldrb	r3, [r3, r2]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	1e5a      	subs	r2, r3, #1
 800255c:	4193      	sbcs	r3, r2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e013      	b.n	800258a <HAL_TIM_PWM_Start+0x62>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d108      	bne.n	800257a <HAL_TIM_PWM_Start+0x52>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	5c9b      	ldrb	r3, [r3, r2]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	4193      	sbcs	r3, r2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e007      	b.n	800258a <HAL_TIM_PWM_Start+0x62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2241      	movs	r2, #65	; 0x41
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	1e5a      	subs	r2, r3, #1
 8002586:	4193      	sbcs	r3, r2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e074      	b.n	800267c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x7a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	223e      	movs	r2, #62	; 0x3e
 800259c:	2102      	movs	r1, #2
 800259e:	5499      	strb	r1, [r3, r2]
 80025a0:	e013      	b.n	80025ca <HAL_TIM_PWM_Start+0xa2>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x8a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	223f      	movs	r2, #63	; 0x3f
 80025ac:	2102      	movs	r1, #2
 80025ae:	5499      	strb	r1, [r3, r2]
 80025b0:	e00b      	b.n	80025ca <HAL_TIM_PWM_Start+0xa2>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0x9a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]
 80025c0:	e003      	b.n	80025ca <HAL_TIM_PWM_Start+0xa2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2241      	movs	r2, #65	; 0x41
 80025c6:	2102      	movs	r1, #2
 80025c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 feca 	bl	800336c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_TIM_PWM_Start+0x15c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_TIM_PWM_Start+0xd8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_TIM_PWM_Start+0x160>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_TIM_PWM_Start+0xd8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_TIM_PWM_Start+0x164>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_TIM_PWM_Start+0xd8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a25      	ldr	r2, [pc, #148]	; (8002690 <HAL_TIM_PWM_Start+0x168>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_PWM_Start+0xdc>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_TIM_PWM_Start+0xde>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0209      	lsls	r1, r1, #8
 8002618:	430a      	orrs	r2, r1
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_TIM_PWM_Start+0x15c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00f      	beq.n	8002646 <HAL_TIM_PWM_Start+0x11e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	429a      	cmp	r2, r3
 8002630:	d009      	beq.n	8002646 <HAL_TIM_PWM_Start+0x11e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_TIM_PWM_Start+0x16c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_TIM_PWM_Start+0x11e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_TIM_PWM_Start+0x160>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d111      	bne.n	800266a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2207      	movs	r2, #7
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d010      	beq.n	800267a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2101      	movs	r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002668:	e007      	b.n	800267a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40014000 	.word	0x40014000
 800268c:	40014400 	.word	0x40014400
 8002690:	40014800 	.word	0x40014800
 8002694:	40000400 	.word	0x40000400

08002698 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6839      	ldr	r1, [r7, #0]
 80026a8:	2200      	movs	r2, #0
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fe5e 	bl	800336c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2f      	ldr	r2, [pc, #188]	; (8002774 <HAL_TIM_PWM_Stop+0xdc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00e      	beq.n	80026d8 <HAL_TIM_PWM_Stop+0x40>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <HAL_TIM_PWM_Stop+0xe0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_TIM_PWM_Stop+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2c      	ldr	r2, [pc, #176]	; (800277c <HAL_TIM_PWM_Stop+0xe4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d004      	beq.n	80026d8 <HAL_TIM_PWM_Stop+0x40>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_TIM_PWM_Stop+0xe8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_PWM_Stop+0x44>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_TIM_PWM_Stop+0x46>
 80026dc:	2300      	movs	r3, #0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d013      	beq.n	800270a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_TIM_PWM_Stop+0xec>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	d10d      	bne.n	800270a <HAL_TIM_PWM_Stop+0x72>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_TIM_PWM_Stop+0xf0>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	d107      	bne.n	800270a <HAL_TIM_PWM_Stop+0x72>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4921      	ldr	r1, [pc, #132]	; (800278c <HAL_TIM_PWM_Stop+0xf4>)
 8002706:	400a      	ands	r2, r1
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_TIM_PWM_Stop+0xec>)
 8002712:	4013      	ands	r3, r2
 8002714:	d10d      	bne.n	8002732 <HAL_TIM_PWM_Stop+0x9a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_TIM_PWM_Stop+0xf0>)
 800271e:	4013      	ands	r3, r2
 8002720:	d107      	bne.n	8002732 <HAL_TIM_PWM_Stop+0x9a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_TIM_PWM_Stop+0xaa>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	223e      	movs	r2, #62	; 0x3e
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]
 8002740:	e013      	b.n	800276a <HAL_TIM_PWM_Stop+0xd2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d104      	bne.n	8002752 <HAL_TIM_PWM_Stop+0xba>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	223f      	movs	r2, #63	; 0x3f
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]
 8002750:	e00b      	b.n	800276a <HAL_TIM_PWM_Stop+0xd2>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d104      	bne.n	8002762 <HAL_TIM_PWM_Stop+0xca>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
 8002760:	e003      	b.n	800276a <HAL_TIM_PWM_Stop+0xd2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2241      	movs	r2, #65	; 0x41
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800
 8002784:	00001111 	.word	0x00001111
 8002788:	00000444 	.word	0x00000444
 800278c:	ffff7fff 	.word	0xffff7fff

08002790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d124      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d11d      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2203      	movs	r2, #3
 80027ba:	4252      	negs	r2, r2
 80027bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2203      	movs	r2, #3
 80027cc:	4013      	ands	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fa9c 	bl	8002d10 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e007      	b.n	80027ea <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fa8f 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fa9b 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2204      	movs	r2, #4
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d125      	bne.n	800284a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2204      	movs	r2, #4
 8002806:	4013      	ands	r3, r2
 8002808:	2b04      	cmp	r3, #4
 800280a:	d11e      	bne.n	800284a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2205      	movs	r2, #5
 8002812:	4252      	negs	r2, r2
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d004      	beq.n	8002834 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f000 fa6f 	bl	8002d10 <HAL_TIM_IC_CaptureCallback>
 8002832:	e007      	b.n	8002844 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fa62 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fa6e 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2208      	movs	r2, #8
 8002852:	4013      	ands	r3, r2
 8002854:	2b08      	cmp	r3, #8
 8002856:	d124      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2208      	movs	r2, #8
 8002860:	4013      	ands	r3, r2
 8002862:	2b08      	cmp	r3, #8
 8002864:	d11d      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2209      	movs	r2, #9
 800286c:	4252      	negs	r2, r2
 800286e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2204      	movs	r2, #4
 8002874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2203      	movs	r2, #3
 800287e:	4013      	ands	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fa43 	bl	8002d10 <HAL_TIM_IC_CaptureCallback>
 800288a:	e007      	b.n	800289c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 fa36 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa42 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2210      	movs	r2, #16
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d125      	bne.n	80028fc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2210      	movs	r2, #16
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d11e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2211      	movs	r2, #17
 80028c4:	4252      	negs	r2, r2
 80028c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2208      	movs	r2, #8
 80028cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	23c0      	movs	r3, #192	; 0xc0
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 fa16 	bl	8002d10 <HAL_TIM_IC_CaptureCallback>
 80028e4:	e007      	b.n	80028f6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 fa09 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 fa15 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10f      	bne.n	800292a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	4013      	ands	r3, r2
 8002914:	2b01      	cmp	r3, #1
 8002916:	d108      	bne.n	800292a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2202      	movs	r2, #2
 800291e:	4252      	negs	r2, r2
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f9e3 	bl	8002cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	4013      	ands	r3, r2
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d10f      	bne.n	8002958 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	4013      	ands	r3, r2
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d108      	bne.n	8002958 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2281      	movs	r2, #129	; 0x81
 800294c:	4252      	negs	r2, r2
 800294e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fdf2 	bl	800353c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	4013      	ands	r3, r2
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d10f      	bne.n	8002986 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2240      	movs	r2, #64	; 0x40
 800296e:	4013      	ands	r3, r2
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d108      	bne.n	8002986 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2241      	movs	r2, #65	; 0x41
 800297a:	4252      	negs	r2, r2
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 f9d5 	bl	8002d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	2b20      	cmp	r3, #32
 8002992:	d10f      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	4013      	ands	r3, r2
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d108      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2221      	movs	r2, #33	; 0x21
 80029a8:	4252      	negs	r2, r2
 80029aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fdbc 	bl	800352c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2317      	movs	r3, #23
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	223c      	movs	r2, #60	; 0x3c
 80029d4:	5c9b      	ldrb	r3, [r3, r2]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PWM_ConfigChannel+0x22>
 80029da:	2302      	movs	r3, #2
 80029dc:	e0ad      	b.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	223c      	movs	r2, #60	; 0x3c
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d100      	bne.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80029ec:	e076      	b.n	8002adc <HAL_TIM_PWM_ConfigChannel+0x120>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d900      	bls.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80029f4:	e095      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x166>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d04e      	beq.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0xde>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d900      	bls.n	8002a04 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a02:	e08e      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d021      	beq.n	8002a54 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002a10:	e087      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fa10 	bl	8002e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2108      	movs	r1, #8
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]
      break;
 8002a52:	e06b      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fa77 	bl	8002f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0109      	lsls	r1, r1, #4
 8002a70:	430a      	orrs	r2, r1
 8002a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4931      	ldr	r1, [pc, #196]	; (8002b44 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6999      	ldr	r1, [r3, #24]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	619a      	str	r2, [r3, #24]
      break;
 8002a98:	e048      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 fad8 	bl	8003058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69d9      	ldr	r1, [r3, #28]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	61da      	str	r2, [r3, #28]
      break;
 8002ada:	e027      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 fb3d 	bl	8003164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0109      	lsls	r1, r1, #4
 8002af8:	430a      	orrs	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	490f      	ldr	r1, [pc, #60]	; (8002b44 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69d9      	ldr	r1, [r3, #28]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	021a      	lsls	r2, r3, #8
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e004      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002b22:	2317      	movs	r3, #23
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
      break;
 8002b2a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	223c      	movs	r2, #60	; 0x3c
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

  return status;
 8002b34:	2317      	movs	r3, #23
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	fffffbff 	.word	0xfffffbff

08002b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	230f      	movs	r3, #15
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223c      	movs	r2, #60	; 0x3c
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_TIM_ConfigClockSource+0x20>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0bc      	b.n	8002ce2 <HAL_TIM_ConfigClockSource+0x19a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	223c      	movs	r2, #60	; 0x3c
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	223d      	movs	r2, #61	; 0x3d
 8002b74:	2102      	movs	r1, #2
 8002b76:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2277      	movs	r2, #119	; 0x77
 8002b84:	4393      	bics	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0192      	lsls	r2, r2, #6
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0xde>
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	0192      	lsls	r2, r2, #6
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d900      	bls.n	8002bae <HAL_TIM_ConfigClockSource+0x66>
 8002bac:	e088      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	0152      	lsls	r2, r2, #5
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d100      	bne.n	8002bb8 <HAL_TIM_ConfigClockSource+0x70>
 8002bb6:	e088      	b.n	8002cca <HAL_TIM_ConfigClockSource+0x182>
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	0152      	lsls	r2, r2, #5
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d900      	bls.n	8002bc2 <HAL_TIM_ConfigClockSource+0x7a>
 8002bc0:	e07e      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bc2:	2b70      	cmp	r3, #112	; 0x70
 8002bc4:	d018      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xb0>
 8002bc6:	d900      	bls.n	8002bca <HAL_TIM_ConfigClockSource+0x82>
 8002bc8:	e07a      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bca:	2b60      	cmp	r3, #96	; 0x60
 8002bcc:	d04f      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x126>
 8002bce:	d900      	bls.n	8002bd2 <HAL_TIM_ConfigClockSource+0x8a>
 8002bd0:	e076      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bd2:	2b50      	cmp	r3, #80	; 0x50
 8002bd4:	d03b      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x106>
 8002bd6:	d900      	bls.n	8002bda <HAL_TIM_ConfigClockSource+0x92>
 8002bd8:	e072      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d057      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x146>
 8002bde:	d900      	bls.n	8002be2 <HAL_TIM_ConfigClockSource+0x9a>
 8002be0:	e06e      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d063      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002bec:	d868      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d05d      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d05b      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002bf6:	e063      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	f000 fb90 	bl	800332c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2277      	movs	r2, #119	; 0x77
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	609a      	str	r2, [r3, #8]
      break;
 8002c24:	e052      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c36:	f000 fb79 	bl	800332c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	01c9      	lsls	r1, r1, #7
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	f000 faec 	bl	8003238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	; 0x50
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 fb46 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	f000 fb0a 	bl	8003294 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	; 0x60
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fb36 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	f000 facc 	bl	8003238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 fb26 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	0010      	movs	r0, r2
 8002cba:	f000 fb1d 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e005      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
      break;
 8002cc8:	e000      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	223d      	movs	r2, #61	; 0x3d
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223c      	movs	r2, #60	; 0x3c
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]

  return status;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	ffff00ff 	.word	0xffff00ff

08002cf0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <TIM_Base_SetConfig+0xe4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d008      	beq.n	8002d6a <TIM_Base_SetConfig+0x2a>
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d003      	beq.n	8002d6a <TIM_Base_SetConfig+0x2a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <TIM_Base_SetConfig+0xe8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d108      	bne.n	8002d7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2270      	movs	r2, #112	; 0x70
 8002d6e:	4393      	bics	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <TIM_Base_SetConfig+0xe4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d018      	beq.n	8002db6 <TIM_Base_SetConfig+0x76>
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d013      	beq.n	8002db6 <TIM_Base_SetConfig+0x76>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <TIM_Base_SetConfig+0xe8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0x76>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <TIM_Base_SetConfig+0xec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0x76>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <TIM_Base_SetConfig+0xf0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0x76>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <TIM_Base_SetConfig+0xf4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0x76>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <TIM_Base_SetConfig+0xf8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <TIM_Base_SetConfig+0xfc>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	4393      	bics	r3, r2
 8002dce:	001a      	movs	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <TIM_Base_SetConfig+0xe4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <TIM_Base_SetConfig+0xce>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <TIM_Base_SetConfig+0xf0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_Base_SetConfig+0xce>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <TIM_Base_SetConfig+0xf4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_Base_SetConfig+0xce>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <TIM_Base_SetConfig+0xf8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d103      	bne.n	8002e16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	615a      	str	r2, [r3, #20]
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b004      	add	sp, #16
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40002000 	.word	0x40002000
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40014400 	.word	0x40014400
 8002e38:	40014800 	.word	0x40014800
 8002e3c:	fffffcff 	.word	0xfffffcff

08002e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4393      	bics	r3, r2
 8002e52:	001a      	movs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2270      	movs	r2, #112	; 0x70
 8002e6e:	4393      	bics	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2203      	movs	r2, #3
 8002e76:	4393      	bics	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2202      	movs	r2, #2
 8002e88:	4393      	bics	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <TIM_OC1_SetConfig+0xf8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <TIM_OC1_SetConfig+0x76>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <TIM_OC1_SetConfig+0xfc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <TIM_OC1_SetConfig+0x76>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_OC1_SetConfig+0x100>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_OC1_SetConfig+0x76>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <TIM_OC1_SetConfig+0x104>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10c      	bne.n	8002ed0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4393      	bics	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4393      	bics	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <TIM_OC1_SetConfig+0xf8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_OC1_SetConfig+0xb0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <TIM_OC1_SetConfig+0xfc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_OC1_SetConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <TIM_OC1_SetConfig+0x100>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_OC1_SetConfig+0xb0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <TIM_OC1_SetConfig+0x104>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <TIM_OC1_SetConfig+0x108>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <TIM_OC1_SetConfig+0x10c>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b006      	add	sp, #24
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40014400 	.word	0x40014400
 8002f44:	40014800 	.word	0x40014800
 8002f48:	fffffeff 	.word	0xfffffeff
 8002f4c:	fffffdff 	.word	0xfffffdff

08002f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	4393      	bics	r3, r2
 8002f62:	001a      	movs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a2e      	ldr	r2, [pc, #184]	; (8003038 <TIM_OC2_SetConfig+0xe8>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <TIM_OC2_SetConfig+0xec>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	4393      	bics	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a24      	ldr	r2, [pc, #144]	; (8003040 <TIM_OC2_SetConfig+0xf0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10d      	bne.n	8002fce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	4393      	bics	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	4393      	bics	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <TIM_OC2_SetConfig+0xf0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_OC2_SetConfig+0x9e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <TIM_OC2_SetConfig+0xf4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_OC2_SetConfig+0x9e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <TIM_OC2_SetConfig+0xf8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_OC2_SetConfig+0x9e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <TIM_OC2_SetConfig+0xfc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d113      	bne.n	8003016 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <TIM_OC2_SetConfig+0x100>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4a16      	ldr	r2, [pc, #88]	; (8003054 <TIM_OC2_SetConfig+0x104>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	621a      	str	r2, [r3, #32]
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b006      	add	sp, #24
 8003036:	bd80      	pop	{r7, pc}
 8003038:	ffff8fff 	.word	0xffff8fff
 800303c:	fffffcff 	.word	0xfffffcff
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	fffffbff 	.word	0xfffffbff
 8003054:	fffff7ff 	.word	0xfffff7ff

08003058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a35      	ldr	r2, [pc, #212]	; (800313c <TIM_OC3_SetConfig+0xe4>)
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2270      	movs	r2, #112	; 0x70
 8003084:	4393      	bics	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2203      	movs	r2, #3
 800308c:	4393      	bics	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4a28      	ldr	r2, [pc, #160]	; (8003140 <TIM_OC3_SetConfig+0xe8>)
 800309e:	4013      	ands	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <TIM_OC3_SetConfig+0xec>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10d      	bne.n	80030d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <TIM_OC3_SetConfig+0xf0>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <TIM_OC3_SetConfig+0xf4>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <TIM_OC3_SetConfig+0xec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_OC3_SetConfig+0x9a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <TIM_OC3_SetConfig+0xf8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_OC3_SetConfig+0x9a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <TIM_OC3_SetConfig+0xfc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_OC3_SetConfig+0x9a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <TIM_OC3_SetConfig+0x100>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d113      	bne.n	800311a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <TIM_OC3_SetConfig+0x104>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <TIM_OC3_SetConfig+0x108>)
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b006      	add	sp, #24
 800313a:	bd80      	pop	{r7, pc}
 800313c:	fffffeff 	.word	0xfffffeff
 8003140:	fffffdff 	.word	0xfffffdff
 8003144:	40012c00 	.word	0x40012c00
 8003148:	fffff7ff 	.word	0xfffff7ff
 800314c:	fffffbff 	.word	0xfffffbff
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800
 800315c:	ffffefff 	.word	0xffffefff
 8003160:	ffffdfff 	.word	0xffffdfff

08003164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a28      	ldr	r2, [pc, #160]	; (8003214 <TIM_OC4_SetConfig+0xb0>)
 8003174:	401a      	ands	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <TIM_OC4_SetConfig+0xb4>)
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a21      	ldr	r2, [pc, #132]	; (800321c <TIM_OC4_SetConfig+0xb8>)
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <TIM_OC4_SetConfig+0xbc>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <TIM_OC4_SetConfig+0xc0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00b      	beq.n	80031dc <TIM_OC4_SetConfig+0x78>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <TIM_OC4_SetConfig+0xc4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <TIM_OC4_SetConfig+0x78>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <TIM_OC4_SetConfig+0xc8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_OC4_SetConfig+0x78>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <TIM_OC4_SetConfig+0xcc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d109      	bne.n	80031f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <TIM_OC4_SetConfig+0xd0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	019b      	lsls	r3, r3, #6
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b006      	add	sp, #24
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	ffffefff 	.word	0xffffefff
 8003218:	ffff8fff 	.word	0xffff8fff
 800321c:	fffffcff 	.word	0xfffffcff
 8003220:	ffffdfff 	.word	0xffffdfff
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800
 8003234:	ffffbfff 	.word	0xffffbfff

08003238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2201      	movs	r2, #1
 8003250:	4393      	bics	r3, r2
 8003252:	001a      	movs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	22f0      	movs	r2, #240	; 0xf0
 8003262:	4393      	bics	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	220a      	movs	r2, #10
 8003274:	4393      	bics	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}

08003294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	2210      	movs	r2, #16
 80032a6:	4393      	bics	r3, r2
 80032a8:	001a      	movs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <TIM_TI2_ConfigInputStage+0x60>)
 80032be:	4013      	ands	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	031b      	lsls	r3, r3, #12
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	22a0      	movs	r2, #160	; 0xa0
 80032d0:	4393      	bics	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b006      	add	sp, #24
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	ffff0fff 	.word	0xffff0fff

080032f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2270      	movs	r2, #112	; 0x70
 800330c:	4393      	bics	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	2207      	movs	r2, #7
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	609a      	str	r2, [r3, #8]
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <TIM_ETR_SetConfig+0x3c>)
 8003344:	4013      	ands	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	431a      	orrs	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	ffff00ff 	.word	0xffff00ff

0800336c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	221f      	movs	r2, #31
 800337c:	4013      	ands	r3, r2
 800337e:	2201      	movs	r2, #1
 8003380:	409a      	lsls	r2, r3
 8003382:	0013      	movs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	43d2      	mvns	r2, r2
 800338e:	401a      	ands	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	211f      	movs	r1, #31
 800339c:	400b      	ands	r3, r1
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4099      	lsls	r1, r3
 80033a2:	000b      	movs	r3, r1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b006      	add	sp, #24
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	223c      	movs	r2, #60	; 0x3c
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e047      	b.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	223c      	movs	r2, #60	; 0x3c
 80033d0:	2101      	movs	r1, #1
 80033d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	223d      	movs	r2, #61	; 0x3d
 80033d8:	2102      	movs	r1, #2
 80033da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2270      	movs	r2, #112	; 0x70
 80033f0:	4393      	bics	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00f      	beq.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	05db      	lsls	r3, r3, #23
 8003418:	429a      	cmp	r2, r3
 800341a:	d009      	beq.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10c      	bne.n	800344a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	4393      	bics	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	223d      	movs	r2, #61	; 0x3d
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223c      	movs	r2, #60	; 0x3c
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400
 800346c:	40014000 	.word	0x40014000

08003470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223c      	movs	r2, #60	; 0x3c
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003488:	2302      	movs	r3, #2
 800348a:	e03e      	b.n	800350a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223c      	movs	r2, #60	; 0x3c
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	22ff      	movs	r2, #255	; 0xff
 8003498:	4393      	bics	r3, r2
 800349a:	001a      	movs	r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80034a8:	401a      	ands	r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80034b6:	401a      	ands	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80034c4:	401a      	ands	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80034d2:	401a      	ands	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80034e0:	401a      	ands	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80034ee:	401a      	ands	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223c      	movs	r2, #60	; 0x3c
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	fffffcff 	.word	0xfffffcff
 8003518:	fffffbff 	.word	0xfffffbff
 800351c:	fffff7ff 	.word	0xfffff7ff
 8003520:	ffffefff 	.word	0xffffefff
 8003524:	ffffdfff 	.word	0xffffdfff
 8003528:	ffffbfff 	.word	0xffffbfff

0800352c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e044      	b.n	80035e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d107      	bne.n	8003576 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2278      	movs	r2, #120	; 0x78
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f7fd fadb 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2224      	movs	r2, #36	; 0x24
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2101      	movs	r1, #1
 8003588:	438a      	bics	r2, r1
 800358a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fc2c 	bl	8003dec <UART_SetConfig>
 8003594:	0003      	movs	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e024      	b.n	80035e8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 fe07 	bl	80041bc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	490d      	ldr	r1, [pc, #52]	; (80035f0 <HAL_UART_Init+0xa4>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	212a      	movs	r1, #42	; 0x2a
 80035ca:	438a      	bics	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fe9f 	bl	8004324 <UART_CheckIdleState>
 80035e6:	0003      	movs	r3, r0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	ffffb7ff 	.word	0xffffb7ff

080035f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003608:	2b20      	cmp	r3, #32
 800360a:	d000      	beq.n	800360e <HAL_UART_Transmit+0x1a>
 800360c:	e08d      	b.n	800372a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_UART_Transmit+0x28>
 8003614:	1dbb      	adds	r3, r7, #6
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e085      	b.n	800372c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	015b      	lsls	r3, r3, #5
 8003628:	429a      	cmp	r2, r3
 800362a:	d109      	bne.n	8003640 <HAL_UART_Transmit+0x4c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2201      	movs	r2, #1
 8003638:	4013      	ands	r3, r2
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e075      	b.n	800372c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2284      	movs	r2, #132	; 0x84
 8003644:	2100      	movs	r1, #0
 8003646:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2221      	movs	r2, #33	; 0x21
 800364c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800364e:	f7fd fc03 	bl	8000e58 <HAL_GetTick>
 8003652:	0003      	movs	r3, r0
 8003654:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1dba      	adds	r2, r7, #6
 800365a:	2150      	movs	r1, #80	; 0x50
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1dba      	adds	r2, r7, #6
 8003664:	2152      	movs	r1, #82	; 0x52
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	015b      	lsls	r3, r3, #5
 8003672:	429a      	cmp	r2, r3
 8003674:	d108      	bne.n	8003688 <HAL_UART_Transmit+0x94>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e003      	b.n	8003690 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003690:	e030      	b.n	80036f4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	0013      	movs	r3, r2
 800369c:	2200      	movs	r2, #0
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	f000 fee8 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e03c      	b.n	800372c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	881a      	ldrh	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	05d2      	lsls	r2, r2, #23
 80036c2:	0dd2      	lsrs	r2, r2, #23
 80036c4:	b292      	uxth	r2, r2
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	3302      	adds	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e008      	b.n	80036e2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b292      	uxth	r2, r2
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	3301      	adds	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2252      	movs	r2, #82	; 0x52
 80036e6:	5a9b      	ldrh	r3, [r3, r2]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b299      	uxth	r1, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2252      	movs	r2, #82	; 0x52
 80036f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2252      	movs	r2, #82	; 0x52
 80036f8:	5a9b      	ldrh	r3, [r3, r2]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1c8      	bne.n	8003692 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	0013      	movs	r3, r2
 800370a:	2200      	movs	r2, #0
 800370c:	2140      	movs	r1, #64	; 0x40
 800370e:	f000 feb1 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d004      	beq.n	8003720 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e005      	b.n	800372c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b008      	add	sp, #32
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	589b      	ldr	r3, [r3, r2]
 8003748:	2b20      	cmp	r3, #32
 800374a:	d145      	bne.n	80037d8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_UART_Receive_DMA+0x26>
 8003752:	1dbb      	adds	r3, r7, #6
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e03d      	b.n	80037da <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	015b      	lsls	r3, r3, #5
 8003766:	429a      	cmp	r2, r3
 8003768:	d109      	bne.n	800377e <HAL_UART_Receive_DMA+0x4a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2201      	movs	r2, #1
 8003776:	4013      	ands	r3, r2
 8003778:	d001      	beq.n	800377e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e02d      	b.n	80037da <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	4013      	ands	r3, r2
 8003790:	d019      	beq.n	80037c6 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	613b      	str	r3, [r7, #16]
  return(result);
 8003798:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	2301      	movs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	04c9      	lsls	r1, r1, #19
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037c6:	1dbb      	adds	r3, r7, #6
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 feba 	bl	8004548 <UART_Start_Receive_DMA>
 80037d4:	0003      	movs	r3, r0
 80037d6:	e000      	b.n	80037da <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b008      	add	sp, #32
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b0ab      	sub	sp, #172	; 0xac
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	22a4      	movs	r2, #164	; 0xa4
 80037f4:	18b9      	adds	r1, r7, r2
 80037f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	20a0      	movs	r0, #160	; 0xa0
 8003800:	1839      	adds	r1, r7, r0
 8003802:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	219c      	movs	r1, #156	; 0x9c
 800380c:	1879      	adds	r1, r7, r1
 800380e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003810:	0011      	movs	r1, r2
 8003812:	18bb      	adds	r3, r7, r2
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a99      	ldr	r2, [pc, #612]	; (8003a7c <HAL_UART_IRQHandler+0x298>)
 8003818:	4013      	ands	r3, r2
 800381a:	2298      	movs	r2, #152	; 0x98
 800381c:	18bc      	adds	r4, r7, r2
 800381e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003820:	18bb      	adds	r3, r7, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d114      	bne.n	8003852 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003828:	187b      	adds	r3, r7, r1
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2220      	movs	r2, #32
 800382e:	4013      	ands	r3, r2
 8003830:	d00f      	beq.n	8003852 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003832:	183b      	adds	r3, r7, r0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2220      	movs	r2, #32
 8003838:	4013      	ands	r3, r2
 800383a:	d00a      	beq.n	8003852 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	2b00      	cmp	r3, #0
 8003842:	d100      	bne.n	8003846 <HAL_UART_IRQHandler+0x62>
 8003844:	e29e      	b.n	8003d84 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	0010      	movs	r0, r2
 800384e:	4798      	blx	r3
      }
      return;
 8003850:	e298      	b.n	8003d84 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003852:	2398      	movs	r3, #152	; 0x98
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d100      	bne.n	800385e <HAL_UART_IRQHandler+0x7a>
 800385c:	e114      	b.n	8003a88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800385e:	239c      	movs	r3, #156	; 0x9c
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	d106      	bne.n	8003878 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800386a:	23a0      	movs	r3, #160	; 0xa0
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a83      	ldr	r2, [pc, #524]	; (8003a80 <HAL_UART_IRQHandler+0x29c>)
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_UART_IRQHandler+0x94>
 8003876:	e107      	b.n	8003a88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003878:	23a4      	movs	r3, #164	; 0xa4
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d012      	beq.n	80038aa <HAL_UART_IRQHandler+0xc6>
 8003884:	23a0      	movs	r3, #160	; 0xa0
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2201      	movs	r2, #1
 8003898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2284      	movs	r2, #132	; 0x84
 800389e:	589b      	ldr	r3, [r3, r2]
 80038a0:	2201      	movs	r2, #1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2184      	movs	r1, #132	; 0x84
 80038a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038aa:	23a4      	movs	r3, #164	; 0xa4
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2202      	movs	r2, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	d011      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
 80038b6:	239c      	movs	r3, #156	; 0x9c
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2284      	movs	r2, #132	; 0x84
 80038ce:	589b      	ldr	r3, [r3, r2]
 80038d0:	2204      	movs	r2, #4
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2184      	movs	r1, #132	; 0x84
 80038d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038da:	23a4      	movs	r3, #164	; 0xa4
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2204      	movs	r2, #4
 80038e2:	4013      	ands	r3, r2
 80038e4:	d011      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
 80038e6:	239c      	movs	r3, #156	; 0x9c
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2284      	movs	r2, #132	; 0x84
 80038fe:	589b      	ldr	r3, [r3, r2]
 8003900:	2202      	movs	r2, #2
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2184      	movs	r1, #132	; 0x84
 8003908:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800390a:	23a4      	movs	r3, #164	; 0xa4
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	d017      	beq.n	8003946 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003916:	23a0      	movs	r3, #160	; 0xa0
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	4013      	ands	r3, r2
 8003920:	d105      	bne.n	800392e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003922:	239c      	movs	r3, #156	; 0x9c
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2208      	movs	r2, #8
 8003934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2284      	movs	r2, #132	; 0x84
 800393a:	589b      	ldr	r3, [r3, r2]
 800393c:	2208      	movs	r2, #8
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2184      	movs	r1, #132	; 0x84
 8003944:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003946:	23a4      	movs	r3, #164	; 0xa4
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4013      	ands	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_UART_IRQHandler+0x198>
 8003954:	23a0      	movs	r3, #160	; 0xa0
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	04db      	lsls	r3, r3, #19
 800395e:	4013      	ands	r3, r2
 8003960:	d00c      	beq.n	800397c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	; 0x84
 8003970:	589b      	ldr	r3, [r3, r2]
 8003972:	2220      	movs	r2, #32
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2184      	movs	r1, #132	; 0x84
 800397a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2284      	movs	r2, #132	; 0x84
 8003980:	589b      	ldr	r3, [r3, r2]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d100      	bne.n	8003988 <HAL_UART_IRQHandler+0x1a4>
 8003986:	e1ff      	b.n	8003d88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003988:	23a4      	movs	r3, #164	; 0xa4
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2220      	movs	r2, #32
 8003990:	4013      	ands	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003994:	23a0      	movs	r3, #160	; 0xa0
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
 800399e:	d008      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	0010      	movs	r0, r2
 80039b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2284      	movs	r2, #132	; 0x84
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	2194      	movs	r1, #148	; 0x94
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d004      	beq.n	80039d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2228      	movs	r2, #40	; 0x28
 80039d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d4:	d047      	beq.n	8003a66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 fe79 	bl	80046d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d137      	bne.n	8003a5c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ec:	f3ef 8310 	mrs	r3, PRIMASK
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80039f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f4:	2090      	movs	r0, #144	; 0x90
 80039f6:	183a      	adds	r2, r7, r0
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	438a      	bics	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <HAL_UART_IRQHandler+0x2a0>)
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd fbdb 	bl	80011f4 <HAL_DMA_Abort_IT>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d01a      	beq.n	8003a78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e012      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f9b5 	bl	8003dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5a:	e00d      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 f9b0 	bl	8003dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e008      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f9ab 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2284      	movs	r2, #132	; 0x84
 8003a72:	2100      	movs	r1, #0
 8003a74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a76:	e187      	b.n	8003d88 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	46c0      	nop			; (mov r8, r8)
    return;
 8003a7a:	e185      	b.n	8003d88 <HAL_UART_IRQHandler+0x5a4>
 8003a7c:	0000080f 	.word	0x0000080f
 8003a80:	04000120 	.word	0x04000120
 8003a84:	0800498b 	.word	0x0800498b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d000      	beq.n	8003a92 <HAL_UART_IRQHandler+0x2ae>
 8003a90:	e139      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a92:	23a4      	movs	r3, #164	; 0xa4
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2210      	movs	r2, #16
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x2bc>
 8003a9e:	e132      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aa0:	23a0      	movs	r3, #160	; 0xa0
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d100      	bne.n	8003aae <HAL_UART_IRQHandler+0x2ca>
 8003aac:	e12b      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d000      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x2e2>
 8003ac4:	e09f      	b.n	8003c06 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	217e      	movs	r1, #126	; 0x7e
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d100      	bne.n	8003ade <HAL_UART_IRQHandler+0x2fa>
 8003adc:	e156      	b.n	8003d8c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2258      	movs	r2, #88	; 0x58
 8003ae2:	5a9b      	ldrh	r3, [r3, r2]
 8003ae4:	187a      	adds	r2, r7, r1
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d300      	bcc.n	8003aee <HAL_UART_IRQHandler+0x30a>
 8003aec:	e14e      	b.n	8003d8c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	187a      	adds	r2, r7, r1
 8003af2:	215a      	movs	r1, #90	; 0x5a
 8003af4:	8812      	ldrh	r2, [r2, #0]
 8003af6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d06f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b02:	f3ef 8310 	mrs	r3, PRIMASK
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	499e      	ldr	r1, [pc, #632]	; (8003d9c <HAL_UART_IRQHandler+0x5b8>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3e:	2301      	movs	r3, #1
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	438a      	bics	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b66:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b70:	2301      	movs	r3, #1
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b76:	f383 8810 	msr	PRIMASK, r3
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2140      	movs	r1, #64	; 0x40
 8003b88:	438a      	bics	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b8e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fd fad1 	bl	8001184 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2258      	movs	r2, #88	; 0x58
 8003bec:	5a9a      	ldrh	r2, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	215a      	movs	r1, #90	; 0x5a
 8003bf2:	5a5b      	ldrh	r3, [r3, r1]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f8e8 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c04:	e0c2      	b.n	8003d8c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2258      	movs	r2, #88	; 0x58
 8003c0a:	5a99      	ldrh	r1, [r3, r2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	225a      	movs	r2, #90	; 0x5a
 8003c10:	5a9b      	ldrh	r3, [r3, r2]
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	208e      	movs	r0, #142	; 0x8e
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	1a8a      	subs	r2, r1, r2
 8003c1a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	225a      	movs	r2, #90	; 0x5a
 8003c20:	5a9b      	ldrh	r3, [r3, r2]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <HAL_UART_IRQHandler+0x446>
 8003c28:	e0b2      	b.n	8003d90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_UART_IRQHandler+0x450>
 8003c32:	e0ad      	b.n	8003d90 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3c:	2488      	movs	r4, #136	; 0x88
 8003c3e:	193a      	adds	r2, r7, r4
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	2301      	movs	r3, #1
 8003c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4951      	ldr	r1, [pc, #324]	; (8003da0 <HAL_UART_IRQHandler+0x5bc>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c72:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	2484      	movs	r4, #132	; 0x84
 8003c76:	193a      	adds	r2, r7, r4
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	438a      	bics	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	2480      	movs	r4, #128	; 0x80
 8003cc2:	193a      	adds	r2, r7, r4
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2110      	movs	r1, #16
 8003cde:	438a      	bics	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	193b      	adds	r3, r7, r4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf6:	183b      	adds	r3, r7, r0
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0011      	movs	r1, r2
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f868 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d04:	e044      	b.n	8003d90 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d06:	23a4      	movs	r3, #164	; 0xa4
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	035b      	lsls	r3, r3, #13
 8003d10:	4013      	ands	r3, r2
 8003d12:	d010      	beq.n	8003d36 <HAL_UART_IRQHandler+0x552>
 8003d14:	239c      	movs	r3, #156	; 0x9c
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	03db      	lsls	r3, r3, #15
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	0352      	lsls	r2, r2, #13
 8003d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fe6d 	bl	8004a0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d34:	e02f      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d36:	23a4      	movs	r3, #164	; 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d42:	23a0      	movs	r3, #160	; 0xa0
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01e      	beq.n	8003d94 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	0010      	movs	r0, r2
 8003d5e:	4798      	blx	r3
    }
    return;
 8003d60:	e018      	b.n	8003d94 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d62:	23a4      	movs	r3, #164	; 0xa4
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2240      	movs	r2, #64	; 0x40
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
 8003d6e:	23a0      	movs	r3, #160	; 0xa0
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2240      	movs	r2, #64	; 0x40
 8003d76:	4013      	ands	r3, r2
 8003d78:	d00d      	beq.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 fe1b 	bl	80049b8 <UART_EndTransmit_IT>
    return;
 8003d82:	e008      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	e006      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	e004      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	e002      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	e000      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003d94:	46c0      	nop			; (mov r8, r8)
  }

}
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b02b      	add	sp, #172	; 0xac
 8003d9a:	bd90      	pop	{r4, r7, pc}
 8003d9c:	fffffeff 	.word	0xfffffeff
 8003da0:	fffffedf 	.word	0xfffffedf

08003da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	000a      	movs	r2, r1
 8003dde:	1cbb      	adds	r3, r7, #2
 8003de0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df4:	231e      	movs	r3, #30
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4abe      	ldr	r2, [pc, #760]	; (8004114 <UART_SetConfig+0x328>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4ab9      	ldr	r2, [pc, #740]	; (8004118 <UART_SetConfig+0x32c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4ab0      	ldr	r2, [pc, #704]	; (800411c <UART_SetConfig+0x330>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4aac      	ldr	r2, [pc, #688]	; (8004120 <UART_SetConfig+0x334>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d127      	bne.n	8003ec2 <UART_SetConfig+0xd6>
 8003e72:	4bac      	ldr	r3, [pc, #688]	; (8004124 <UART_SetConfig+0x338>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	2203      	movs	r2, #3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d00d      	beq.n	8003e9a <UART_SetConfig+0xae>
 8003e7e:	d81b      	bhi.n	8003eb8 <UART_SetConfig+0xcc>
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d014      	beq.n	8003eae <UART_SetConfig+0xc2>
 8003e84:	d818      	bhi.n	8003eb8 <UART_SetConfig+0xcc>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <UART_SetConfig+0xa4>
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d00a      	beq.n	8003ea4 <UART_SetConfig+0xb8>
 8003e8e:	e013      	b.n	8003eb8 <UART_SetConfig+0xcc>
 8003e90:	231f      	movs	r3, #31
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e0bd      	b.n	8004016 <UART_SetConfig+0x22a>
 8003e9a:	231f      	movs	r3, #31
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e0b8      	b.n	8004016 <UART_SetConfig+0x22a>
 8003ea4:	231f      	movs	r3, #31
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e0b3      	b.n	8004016 <UART_SetConfig+0x22a>
 8003eae:	231f      	movs	r3, #31
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e0ae      	b.n	8004016 <UART_SetConfig+0x22a>
 8003eb8:	231f      	movs	r3, #31
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e0a9      	b.n	8004016 <UART_SetConfig+0x22a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a98      	ldr	r2, [pc, #608]	; (8004128 <UART_SetConfig+0x33c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d134      	bne.n	8003f36 <UART_SetConfig+0x14a>
 8003ecc:	4b95      	ldr	r3, [pc, #596]	; (8004124 <UART_SetConfig+0x338>)
 8003ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed0:	23c0      	movs	r3, #192	; 0xc0
 8003ed2:	029b      	lsls	r3, r3, #10
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	22c0      	movs	r2, #192	; 0xc0
 8003ed8:	0292      	lsls	r2, r2, #10
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <UART_SetConfig+0x122>
 8003ede:	22c0      	movs	r2, #192	; 0xc0
 8003ee0:	0292      	lsls	r2, r2, #10
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d822      	bhi.n	8003f2c <UART_SetConfig+0x140>
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	0292      	lsls	r2, r2, #10
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <UART_SetConfig+0x136>
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	0292      	lsls	r2, r2, #10
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d81a      	bhi.n	8003f2c <UART_SetConfig+0x140>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <UART_SetConfig+0x118>
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	0252      	lsls	r2, r2, #9
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00a      	beq.n	8003f18 <UART_SetConfig+0x12c>
 8003f02:	e013      	b.n	8003f2c <UART_SetConfig+0x140>
 8003f04:	231f      	movs	r3, #31
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e083      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f0e:	231f      	movs	r3, #31
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2202      	movs	r2, #2
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e07e      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f18:	231f      	movs	r3, #31
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e079      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f22:	231f      	movs	r3, #31
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e074      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f2c:	231f      	movs	r3, #31
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	2210      	movs	r2, #16
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e06f      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	; (800412c <UART_SetConfig+0x340>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d134      	bne.n	8003faa <UART_SetConfig+0x1be>
 8003f40:	4b78      	ldr	r3, [pc, #480]	; (8004124 <UART_SetConfig+0x338>)
 8003f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f44:	23c0      	movs	r3, #192	; 0xc0
 8003f46:	031b      	lsls	r3, r3, #12
 8003f48:	4013      	ands	r3, r2
 8003f4a:	22c0      	movs	r2, #192	; 0xc0
 8003f4c:	0312      	lsls	r2, r2, #12
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d017      	beq.n	8003f82 <UART_SetConfig+0x196>
 8003f52:	22c0      	movs	r2, #192	; 0xc0
 8003f54:	0312      	lsls	r2, r2, #12
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d822      	bhi.n	8003fa0 <UART_SetConfig+0x1b4>
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	0312      	lsls	r2, r2, #12
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d019      	beq.n	8003f96 <UART_SetConfig+0x1aa>
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	0312      	lsls	r2, r2, #12
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d81a      	bhi.n	8003fa0 <UART_SetConfig+0x1b4>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <UART_SetConfig+0x18c>
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	02d2      	lsls	r2, r2, #11
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00a      	beq.n	8003f8c <UART_SetConfig+0x1a0>
 8003f76:	e013      	b.n	8003fa0 <UART_SetConfig+0x1b4>
 8003f78:	231f      	movs	r3, #31
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e049      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f82:	231f      	movs	r3, #31
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e044      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f8c:	231f      	movs	r3, #31
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2204      	movs	r2, #4
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e03f      	b.n	8004016 <UART_SetConfig+0x22a>
 8003f96:	231f      	movs	r3, #31
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e03a      	b.n	8004016 <UART_SetConfig+0x22a>
 8003fa0:	231f      	movs	r3, #31
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e035      	b.n	8004016 <UART_SetConfig+0x22a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a60      	ldr	r2, [pc, #384]	; (8004130 <UART_SetConfig+0x344>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d104      	bne.n	8003fbe <UART_SetConfig+0x1d2>
 8003fb4:	231f      	movs	r3, #31
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e02b      	b.n	8004016 <UART_SetConfig+0x22a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5c      	ldr	r2, [pc, #368]	; (8004134 <UART_SetConfig+0x348>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d104      	bne.n	8003fd2 <UART_SetConfig+0x1e6>
 8003fc8:	231f      	movs	r3, #31
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e021      	b.n	8004016 <UART_SetConfig+0x22a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a58      	ldr	r2, [pc, #352]	; (8004138 <UART_SetConfig+0x34c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d104      	bne.n	8003fe6 <UART_SetConfig+0x1fa>
 8003fdc:	231f      	movs	r3, #31
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e017      	b.n	8004016 <UART_SetConfig+0x22a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a54      	ldr	r2, [pc, #336]	; (800413c <UART_SetConfig+0x350>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d104      	bne.n	8003ffa <UART_SetConfig+0x20e>
 8003ff0:	231f      	movs	r3, #31
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e00d      	b.n	8004016 <UART_SetConfig+0x22a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a50      	ldr	r2, [pc, #320]	; (8004140 <UART_SetConfig+0x354>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d104      	bne.n	800400e <UART_SetConfig+0x222>
 8004004:	231f      	movs	r3, #31
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e003      	b.n	8004016 <UART_SetConfig+0x22a>
 800400e:	231f      	movs	r3, #31
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2210      	movs	r2, #16
 8004014:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	429a      	cmp	r2, r3
 8004020:	d15c      	bne.n	80040dc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8004022:	231f      	movs	r3, #31
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d015      	beq.n	8004058 <UART_SetConfig+0x26c>
 800402c:	dc18      	bgt.n	8004060 <UART_SetConfig+0x274>
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00d      	beq.n	800404e <UART_SetConfig+0x262>
 8004032:	dc15      	bgt.n	8004060 <UART_SetConfig+0x274>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <UART_SetConfig+0x252>
 8004038:	2b02      	cmp	r3, #2
 800403a:	d005      	beq.n	8004048 <UART_SetConfig+0x25c>
 800403c:	e010      	b.n	8004060 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7fe f8b5 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8004042:	0003      	movs	r3, r0
 8004044:	61bb      	str	r3, [r7, #24]
        break;
 8004046:	e012      	b.n	800406e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b3e      	ldr	r3, [pc, #248]	; (8004144 <UART_SetConfig+0x358>)
 800404a:	61bb      	str	r3, [r7, #24]
        break;
 800404c:	e00f      	b.n	800406e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7fe f831 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8004052:	0003      	movs	r3, r0
 8004054:	61bb      	str	r3, [r7, #24]
        break;
 8004056:	e00a      	b.n	800406e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	61bb      	str	r3, [r7, #24]
        break;
 800405e:	e006      	b.n	800406e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004064:	231e      	movs	r3, #30
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
        break;
 800406c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d100      	bne.n	8004076 <UART_SetConfig+0x28a>
 8004074:	e095      	b.n	80041a2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	005a      	lsls	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	18d2      	adds	r2, r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	0019      	movs	r1, r3
 8004088:	0010      	movs	r0, r2
 800408a:	f7fc f84d 	bl	8000128 <__udivsi3>
 800408e:	0003      	movs	r3, r0
 8004090:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d91c      	bls.n	80040d2 <UART_SetConfig+0x2e6>
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	429a      	cmp	r2, r3
 80040a0:	d217      	bcs.n	80040d2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	200e      	movs	r0, #14
 80040a8:	183b      	adds	r3, r7, r0
 80040aa:	210f      	movs	r1, #15
 80040ac:	438a      	bics	r2, r1
 80040ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2207      	movs	r2, #7
 80040b8:	4013      	ands	r3, r2
 80040ba:	b299      	uxth	r1, r3
 80040bc:	183b      	adds	r3, r7, r0
 80040be:	183a      	adds	r2, r7, r0
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	183a      	adds	r2, r7, r0
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e067      	b.n	80041a2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80040d2:	231e      	movs	r3, #30
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e062      	b.n	80041a2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040dc:	231f      	movs	r3, #31
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d030      	beq.n	8004148 <UART_SetConfig+0x35c>
 80040e6:	dc33      	bgt.n	8004150 <UART_SetConfig+0x364>
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00d      	beq.n	8004108 <UART_SetConfig+0x31c>
 80040ec:	dc30      	bgt.n	8004150 <UART_SetConfig+0x364>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <UART_SetConfig+0x30c>
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d005      	beq.n	8004102 <UART_SetConfig+0x316>
 80040f6:	e02b      	b.n	8004150 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe f858 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 80040fc:	0003      	movs	r3, r0
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e02d      	b.n	800415e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <UART_SetConfig+0x358>)
 8004104:	61bb      	str	r3, [r7, #24]
        break;
 8004106:	e02a      	b.n	800415e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004108:	f7fd ffd4 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 800410c:	0003      	movs	r3, r0
 800410e:	61bb      	str	r3, [r7, #24]
        break;
 8004110:	e025      	b.n	800415e <UART_SetConfig+0x372>
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	efff69f3 	.word	0xefff69f3
 8004118:	ffffcfff 	.word	0xffffcfff
 800411c:	fffff4ff 	.word	0xfffff4ff
 8004120:	40013800 	.word	0x40013800
 8004124:	40021000 	.word	0x40021000
 8004128:	40004400 	.word	0x40004400
 800412c:	40004800 	.word	0x40004800
 8004130:	40004c00 	.word	0x40004c00
 8004134:	40005000 	.word	0x40005000
 8004138:	40011400 	.word	0x40011400
 800413c:	40011800 	.word	0x40011800
 8004140:	40011c00 	.word	0x40011c00
 8004144:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	61bb      	str	r3, [r7, #24]
        break;
 800414e:	e006      	b.n	800415e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004154:	231e      	movs	r3, #30
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
        break;
 800415c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01e      	beq.n	80041a2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	085a      	lsrs	r2, r3, #1
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	18d2      	adds	r2, r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	0019      	movs	r1, r3
 8004174:	0010      	movs	r0, r2
 8004176:	f7fb ffd7 	bl	8000128 <__udivsi3>
 800417a:	0003      	movs	r3, r0
 800417c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d90a      	bls.n	800419a <UART_SetConfig+0x3ae>
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	025b      	lsls	r3, r3, #9
 800418a:	429a      	cmp	r2, r3
 800418c:	d205      	bcs.n	800419a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	b29a      	uxth	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	e003      	b.n	80041a2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800419a:	231e      	movs	r3, #30
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041ae:	231e      	movs	r3, #30
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b008      	add	sp, #32
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2201      	movs	r2, #1
 80041ca:	4013      	ands	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a4a      	ldr	r2, [pc, #296]	; (8004300 <UART_AdvFeatureConfig+0x144>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2202      	movs	r2, #2
 80041ec:	4013      	ands	r3, r2
 80041ee:	d00b      	beq.n	8004208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4a43      	ldr	r2, [pc, #268]	; (8004304 <UART_AdvFeatureConfig+0x148>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	0019      	movs	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2204      	movs	r2, #4
 800420e:	4013      	ands	r3, r2
 8004210:	d00b      	beq.n	800422a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <UART_AdvFeatureConfig+0x14c>)
 800421a:	4013      	ands	r3, r2
 800421c:	0019      	movs	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2208      	movs	r2, #8
 8004230:	4013      	ands	r3, r2
 8004232:	d00b      	beq.n	800424c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4a34      	ldr	r2, [pc, #208]	; (800430c <UART_AdvFeatureConfig+0x150>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2210      	movs	r2, #16
 8004252:	4013      	ands	r3, r2
 8004254:	d00b      	beq.n	800426e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <UART_AdvFeatureConfig+0x154>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	2220      	movs	r2, #32
 8004274:	4013      	ands	r3, r2
 8004276:	d00b      	beq.n	8004290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	4a25      	ldr	r2, [pc, #148]	; (8004314 <UART_AdvFeatureConfig+0x158>)
 8004280:	4013      	ands	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2240      	movs	r2, #64	; 0x40
 8004296:	4013      	ands	r3, r2
 8004298:	d01d      	beq.n	80042d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <UART_AdvFeatureConfig+0x15c>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	035b      	lsls	r3, r3, #13
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d10b      	bne.n	80042d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a15      	ldr	r2, [pc, #84]	; (800431c <UART_AdvFeatureConfig+0x160>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	4013      	ands	r3, r2
 80042de:	d00b      	beq.n	80042f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <UART_AdvFeatureConfig+0x164>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	fffdffff 	.word	0xfffdffff
 8004304:	fffeffff 	.word	0xfffeffff
 8004308:	fffbffff 	.word	0xfffbffff
 800430c:	ffff7fff 	.word	0xffff7fff
 8004310:	ffffefff 	.word	0xffffefff
 8004314:	ffffdfff 	.word	0xffffdfff
 8004318:	ffefffff 	.word	0xffefffff
 800431c:	ff9fffff 	.word	0xff9fffff
 8004320:	fff7ffff 	.word	0xfff7ffff

08004324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b092      	sub	sp, #72	; 0x48
 8004328:	af02      	add	r7, sp, #8
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2284      	movs	r2, #132	; 0x84
 8004330:	2100      	movs	r1, #0
 8004332:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004334:	f7fc fd90 	bl	8000e58 <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2208      	movs	r2, #8
 8004344:	4013      	ands	r3, r2
 8004346:	2b08      	cmp	r3, #8
 8004348:	d12c      	bne.n	80043a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	0391      	lsls	r1, r2, #14
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4a46      	ldr	r2, [pc, #280]	; (800446c <UART_CheckIdleState+0x148>)
 8004354:	9200      	str	r2, [sp, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	f000 f88c 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d021      	beq.n	80043a4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004360:	f3ef 8310 	mrs	r3, PRIMASK
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38
 800436a:	2301      	movs	r3, #1
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2180      	movs	r1, #128	; 0x80
 8004382:	438a      	bics	r2, r1
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2278      	movs	r2, #120	; 0x78
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e05f      	b.n	8004464 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2204      	movs	r2, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d146      	bne.n	8004440 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	03d1      	lsls	r1, r2, #15
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <UART_CheckIdleState+0x148>)
 80043bc:	9200      	str	r2, [sp, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	f000 f858 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d03b      	beq.n	8004440 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c8:	f3ef 8310 	mrs	r3, PRIMASK
 80043cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
 80043d2:	2301      	movs	r3, #1
 80043d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f383 8810 	msr	PRIMASK, r3
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4921      	ldr	r1, [pc, #132]	; (8004470 <UART_CheckIdleState+0x14c>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004400:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004402:	633b      	str	r3, [r7, #48]	; 0x30
 8004404:	2301      	movs	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	438a      	bics	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2280      	movs	r2, #128	; 0x80
 8004430:	2120      	movs	r1, #32
 8004432:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2278      	movs	r2, #120	; 0x78
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e011      	b.n	8004464 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	2120      	movs	r1, #32
 800444c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2278      	movs	r2, #120	; 0x78
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b010      	add	sp, #64	; 0x40
 800446a:	bd80      	pop	{r7, pc}
 800446c:	01ffffff 	.word	0x01ffffff
 8004470:	fffffedf 	.word	0xfffffedf

08004474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	1dfb      	adds	r3, r7, #7
 8004482:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	e04b      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3301      	adds	r3, #1
 800448a:	d048      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fc fce4 	bl	8000e58 <HAL_GetTick>
 8004490:	0002      	movs	r2, r0
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e04b      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2204      	movs	r2, #4
 80044ae:	4013      	ands	r3, r2
 80044b0:	d035      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2208      	movs	r2, #8
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d111      	bne.n	80044e4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2208      	movs	r2, #8
 80044c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 f900 	bl	80046d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2284      	movs	r2, #132	; 0x84
 80044d4:	2108      	movs	r1, #8
 80044d6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2278      	movs	r2, #120	; 0x78
 80044dc:	2100      	movs	r1, #0
 80044de:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e02c      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	401a      	ands	r2, r3
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d112      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 f8e3 	bl	80046d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2284      	movs	r2, #132	; 0x84
 800450e:	2120      	movs	r1, #32
 8004510:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2278      	movs	r2, #120	; 0x78
 8004516:	2100      	movs	r1, #0
 8004518:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e00f      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	425a      	negs	r2, r3
 800452e:	4153      	adcs	r3, r2
 8004530:	b2db      	uxtb	r3, r3
 8004532:	001a      	movs	r2, r3
 8004534:	1dfb      	adds	r3, r7, #7
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d0a4      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b004      	add	sp, #16
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b090      	sub	sp, #64	; 0x40
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	1dbb      	adds	r3, r7, #6
 8004554:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1dba      	adds	r2, r7, #6
 8004560:	2158      	movs	r1, #88	; 0x58
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2284      	movs	r2, #132	; 0x84
 800456a:	2100      	movs	r1, #0
 800456c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2280      	movs	r2, #128	; 0x80
 8004572:	2122      	movs	r1, #34	; 0x22
 8004574:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457a:	2b00      	cmp	r3, #0
 800457c:	d028      	beq.n	80045d0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	4a3e      	ldr	r2, [pc, #248]	; (800467c <UART_Start_Receive_DMA+0x134>)
 8004584:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	4a3d      	ldr	r2, [pc, #244]	; (8004680 <UART_Start_Receive_DMA+0x138>)
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004592:	4a3c      	ldr	r2, [pc, #240]	; (8004684 <UART_Start_Receive_DMA+0x13c>)
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	2200      	movs	r2, #0
 800459c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	0019      	movs	r1, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	001a      	movs	r2, r3
 80045b0:	1dbb      	adds	r3, r7, #6
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	f7fc fd80 	bl	80010b8 <HAL_DMA_Start_IT>
 80045b8:	1e03      	subs	r3, r0, #0
 80045ba:	d009      	beq.n	80045d0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2284      	movs	r2, #132	; 0x84
 80045c0:	2110      	movs	r1, #16
 80045c2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	2120      	movs	r1, #32
 80045ca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e050      	b.n	8004672 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d8:	f3ef 8310 	mrs	r3, PRIMASK
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e2:	2301      	movs	r3, #1
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2180      	movs	r1, #128	; 0x80
 80045fa:	0049      	lsls	r1, r1, #1
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	f383 8810 	msr	PRIMASK, r3
}
 800460a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460c:	f3ef 8310 	mrs	r3, PRIMASK
 8004610:	613b      	str	r3, [r7, #16]
  return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
 8004616:	2301      	movs	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f383 8810 	msr	PRIMASK, r3
}
 800463c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	61fb      	str	r3, [r7, #28]
  return(result);
 8004644:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
 8004648:	2301      	movs	r3, #1
 800464a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	430a      	orrs	r2, r1
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f383 8810 	msr	PRIMASK, r3
}
 800466e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	0018      	movs	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	b010      	add	sp, #64	; 0x40
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	08004799 	.word	0x08004799
 8004680:	080048c5 	.word	0x080048c5
 8004684:	08004907 	.word	0x08004907

08004688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004690:	f3ef 8310 	mrs	r3, PRIMASK
 8004694:	60bb      	str	r3, [r7, #8]
  return(result);
 8004696:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	2301      	movs	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f383 8810 	msr	PRIMASK, r3
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	21c0      	movs	r1, #192	; 0xc0
 80046b2:	438a      	bics	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08e      	sub	sp, #56	; 0x38
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d8:	f3ef 8310 	mrs	r3, PRIMASK
 80046dc:	617b      	str	r3, [r7, #20]
  return(result);
 80046de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
 80046e2:	2301      	movs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4926      	ldr	r1, [pc, #152]	; (8004794 <UART_EndRxTransfer+0xc4>)
 80046fa:	400a      	ands	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f383 8810 	msr	PRIMASK, r3
}
 8004708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470a:	f3ef 8310 	mrs	r3, PRIMASK
 800470e:	623b      	str	r3, [r7, #32]
  return(result);
 8004710:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
 8004714:	2301      	movs	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f383 8810 	msr	PRIMASK, r3
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2101      	movs	r1, #1
 800472c:	438a      	bics	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	f383 8810 	msr	PRIMASK, r3
}
 800473a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004740:	2b01      	cmp	r3, #1
 8004742:	d118      	bne.n	8004776 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004744:	f3ef 8310 	mrs	r3, PRIMASK
 8004748:	60bb      	str	r3, [r7, #8]
  return(result);
 800474a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474e:	2301      	movs	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f383 8810 	msr	PRIMASK, r3
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2110      	movs	r1, #16
 8004766:	438a      	bics	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	2120      	movs	r1, #32
 800477c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	669a      	str	r2, [r3, #104]	; 0x68
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b00e      	add	sp, #56	; 0x38
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	fffffedf 	.word	0xfffffedf

08004798 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b094      	sub	sp, #80	; 0x50
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d06f      	beq.n	800488e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	225a      	movs	r2, #90	; 0x5a
 80047b2:	2100      	movs	r1, #0
 80047b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80047bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047be:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c0:	2301      	movs	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f383 8810 	msr	PRIMASK, r3
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	493a      	ldr	r1, [pc, #232]	; (80048c0 <UART_DMAReceiveCplt+0x128>)
 80047d8:	400a      	ands	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f383 8810 	msr	PRIMASK, r3
}
 80047e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
 80047f2:	2301      	movs	r3, #1
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2101      	movs	r1, #1
 800480a:	438a      	bics	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481a:	f3ef 8310 	mrs	r3, PRIMASK
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	643b      	str	r3, [r7, #64]	; 0x40
 8004824:	2301      	movs	r3, #1
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	438a      	bics	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800484c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	2120      	movs	r1, #32
 8004852:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004858:	2b01      	cmp	r3, #1
 800485a:	d118      	bne.n	800488e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8310 	mrs	r3, PRIMASK
 8004860:	60fb      	str	r3, [r7, #12]
  return(result);
 8004862:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004866:	2301      	movs	r3, #1
 8004868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f383 8810 	msr	PRIMASK, r3
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2110      	movs	r1, #16
 800487e:	438a      	bics	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	2b01      	cmp	r3, #1
 800489a:	d108      	bne.n	80048ae <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	2258      	movs	r2, #88	; 0x58
 80048a0:	5a9a      	ldrh	r2, [r3, r2]
 80048a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff fa94 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ac:	e003      	b.n	80048b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80048ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fc f81f 	bl	80008f4 <HAL_UART_RxCpltCallback>
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b014      	add	sp, #80	; 0x50
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	fffffeff 	.word	0xfffffeff

080048c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10a      	bne.n	80048f6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2258      	movs	r2, #88	; 0x58
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	0011      	movs	r1, r2
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7ff fa70 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048f4:	e003      	b.n	80048fe <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7ff fa5b 	bl	8003db4 <HAL_UART_RxHalfCpltCallback>
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}

08004906 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004918:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	589b      	ldr	r3, [r3, r2]
 8004920:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	4013      	ands	r3, r2
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d10a      	bne.n	8004946 <UART_DMAError+0x40>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b21      	cmp	r3, #33	; 0x21
 8004934:	d107      	bne.n	8004946 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2252      	movs	r2, #82	; 0x52
 800493a:	2100      	movs	r1, #0
 800493c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	0018      	movs	r0, r3
 8004942:	f7ff fea1 	bl	8004688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2240      	movs	r2, #64	; 0x40
 800494e:	4013      	ands	r3, r2
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d10a      	bne.n	800496a <UART_DMAError+0x64>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b22      	cmp	r3, #34	; 0x22
 8004958:	d107      	bne.n	800496a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	225a      	movs	r2, #90	; 0x5a
 800495e:	2100      	movs	r1, #0
 8004960:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	0018      	movs	r0, r3
 8004966:	f7ff feb3 	bl	80046d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2284      	movs	r2, #132	; 0x84
 800496e:	589b      	ldr	r3, [r3, r2]
 8004970:	2210      	movs	r2, #16
 8004972:	431a      	orrs	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2184      	movs	r1, #132	; 0x84
 8004978:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0018      	movs	r0, r3
 800497e:	f7ff fa21 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	b006      	add	sp, #24
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	225a      	movs	r2, #90	; 0x5a
 800499c:	2100      	movs	r1, #0
 800499e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2252      	movs	r2, #82	; 0x52
 80049a4:	2100      	movs	r1, #0
 80049a6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff fa0a 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b004      	add	sp, #16
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c0:	f3ef 8310 	mrs	r3, PRIMASK
 80049c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	2301      	movs	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	438a      	bics	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff f9cf 	bl	8003da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b006      	add	sp, #24
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b002      	add	sp, #8
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <siprintf>:
 8004a20:	b40e      	push	{r1, r2, r3}
 8004a22:	b500      	push	{lr}
 8004a24:	490b      	ldr	r1, [pc, #44]	; (8004a54 <siprintf+0x34>)
 8004a26:	b09c      	sub	sp, #112	; 0x70
 8004a28:	ab1d      	add	r3, sp, #116	; 0x74
 8004a2a:	9002      	str	r0, [sp, #8]
 8004a2c:	9006      	str	r0, [sp, #24]
 8004a2e:	9107      	str	r1, [sp, #28]
 8004a30:	9104      	str	r1, [sp, #16]
 8004a32:	4809      	ldr	r0, [pc, #36]	; (8004a58 <siprintf+0x38>)
 8004a34:	4909      	ldr	r1, [pc, #36]	; (8004a5c <siprintf+0x3c>)
 8004a36:	cb04      	ldmia	r3!, {r2}
 8004a38:	9105      	str	r1, [sp, #20]
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	a902      	add	r1, sp, #8
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f000 f9cc 	bl	8004ddc <_svfiprintf_r>
 8004a44:	2200      	movs	r2, #0
 8004a46:	9b02      	ldr	r3, [sp, #8]
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	b01c      	add	sp, #112	; 0x70
 8004a4c:	bc08      	pop	{r3}
 8004a4e:	b003      	add	sp, #12
 8004a50:	4718      	bx	r3
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	7fffffff 	.word	0x7fffffff
 8004a58:	20000098 	.word	0x20000098
 8004a5c:	ffff0208 	.word	0xffff0208

08004a60 <siscanf>:
 8004a60:	b40e      	push	{r1, r2, r3}
 8004a62:	b530      	push	{r4, r5, lr}
 8004a64:	2381      	movs	r3, #129	; 0x81
 8004a66:	b09c      	sub	sp, #112	; 0x70
 8004a68:	466a      	mov	r2, sp
 8004a6a:	ac1f      	add	r4, sp, #124	; 0x7c
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	cc20      	ldmia	r4!, {r5}
 8004a70:	8293      	strh	r3, [r2, #20]
 8004a72:	9002      	str	r0, [sp, #8]
 8004a74:	9006      	str	r0, [sp, #24]
 8004a76:	f7fb fb45 	bl	8000104 <strlen>
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <siscanf+0x48>)
 8004a7c:	466a      	mov	r2, sp
 8004a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a80:	2300      	movs	r3, #0
 8004a82:	9003      	str	r0, [sp, #12]
 8004a84:	9007      	str	r0, [sp, #28]
 8004a86:	4809      	ldr	r0, [pc, #36]	; (8004aac <siscanf+0x4c>)
 8004a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a8a:	9314      	str	r3, [sp, #80]	; 0x50
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	82d3      	strh	r3, [r2, #22]
 8004a90:	a902      	add	r1, sp, #8
 8004a92:	0023      	movs	r3, r4
 8004a94:	002a      	movs	r2, r5
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	9401      	str	r4, [sp, #4]
 8004a9a:	f000 fafb 	bl	8005094 <__ssvfiscanf_r>
 8004a9e:	b01c      	add	sp, #112	; 0x70
 8004aa0:	bc30      	pop	{r4, r5}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	b003      	add	sp, #12
 8004aa6:	4718      	bx	r3
 8004aa8:	08004ab1 	.word	0x08004ab1
 8004aac:	20000098 	.word	0x20000098

08004ab0 <__seofread>:
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	4770      	bx	lr

08004ab4 <memset>:
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	1882      	adds	r2, r0, r2
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d100      	bne.n	8004abe <memset+0xa>
 8004abc:	4770      	bx	lr
 8004abe:	7019      	strb	r1, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	e7f9      	b.n	8004ab8 <memset+0x4>

08004ac4 <__errno>:
 8004ac4:	4b01      	ldr	r3, [pc, #4]	; (8004acc <__errno+0x8>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	4770      	bx	lr
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	20000098 	.word	0x20000098

08004ad0 <__libc_init_array>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	4c0c      	ldr	r4, [pc, #48]	; (8004b08 <__libc_init_array+0x38>)
 8004ad6:	4d0d      	ldr	r5, [pc, #52]	; (8004b0c <__libc_init_array+0x3c>)
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	42a6      	cmp	r6, r4
 8004ade:	d109      	bne.n	8004af4 <__libc_init_array+0x24>
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	f001 f91f 	bl	8005d24 <_init>
 8004ae6:	4c0a      	ldr	r4, [pc, #40]	; (8004b10 <__libc_init_array+0x40>)
 8004ae8:	4d0a      	ldr	r5, [pc, #40]	; (8004b14 <__libc_init_array+0x44>)
 8004aea:	1b64      	subs	r4, r4, r5
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	42a6      	cmp	r6, r4
 8004af0:	d105      	bne.n	8004afe <__libc_init_array+0x2e>
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	00b3      	lsls	r3, r6, #2
 8004af6:	58eb      	ldr	r3, [r5, r3]
 8004af8:	4798      	blx	r3
 8004afa:	3601      	adds	r6, #1
 8004afc:	e7ee      	b.n	8004adc <__libc_init_array+0xc>
 8004afe:	00b3      	lsls	r3, r6, #2
 8004b00:	58eb      	ldr	r3, [r5, r3]
 8004b02:	4798      	blx	r3
 8004b04:	3601      	adds	r6, #1
 8004b06:	e7f2      	b.n	8004aee <__libc_init_array+0x1e>
 8004b08:	08005edc 	.word	0x08005edc
 8004b0c:	08005edc 	.word	0x08005edc
 8004b10:	08005ee0 	.word	0x08005ee0
 8004b14:	08005edc 	.word	0x08005edc

08004b18 <__retarget_lock_acquire_recursive>:
 8004b18:	4770      	bx	lr

08004b1a <__retarget_lock_release_recursive>:
 8004b1a:	4770      	bx	lr

08004b1c <_free_r>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	0005      	movs	r5, r0
 8004b20:	2900      	cmp	r1, #0
 8004b22:	d010      	beq.n	8004b46 <_free_r+0x2a>
 8004b24:	1f0c      	subs	r4, r1, #4
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da00      	bge.n	8004b2e <_free_r+0x12>
 8004b2c:	18e4      	adds	r4, r4, r3
 8004b2e:	0028      	movs	r0, r5
 8004b30:	f000 f8e2 	bl	8004cf8 <__malloc_lock>
 8004b34:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <_free_r+0x90>)
 8004b36:	6813      	ldr	r3, [r2, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <_free_r+0x2c>
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	6014      	str	r4, [r2, #0]
 8004b40:	0028      	movs	r0, r5
 8004b42:	f000 f8e1 	bl	8004d08 <__malloc_unlock>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d908      	bls.n	8004b5e <_free_r+0x42>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	1821      	adds	r1, r4, r0
 8004b50:	428b      	cmp	r3, r1
 8004b52:	d1f3      	bne.n	8004b3c <_free_r+0x20>
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	1809      	adds	r1, r1, r0
 8004b5a:	6021      	str	r1, [r4, #0]
 8004b5c:	e7ee      	b.n	8004b3c <_free_r+0x20>
 8004b5e:	001a      	movs	r2, r3
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <_free_r+0x4e>
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	d9f9      	bls.n	8004b5e <_free_r+0x42>
 8004b6a:	6811      	ldr	r1, [r2, #0]
 8004b6c:	1850      	adds	r0, r2, r1
 8004b6e:	42a0      	cmp	r0, r4
 8004b70:	d10b      	bne.n	8004b8a <_free_r+0x6e>
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	1809      	adds	r1, r1, r0
 8004b76:	1850      	adds	r0, r2, r1
 8004b78:	6011      	str	r1, [r2, #0]
 8004b7a:	4283      	cmp	r3, r0
 8004b7c:	d1e0      	bne.n	8004b40 <_free_r+0x24>
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	1841      	adds	r1, r0, r1
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	6053      	str	r3, [r2, #4]
 8004b88:	e7da      	b.n	8004b40 <_free_r+0x24>
 8004b8a:	42a0      	cmp	r0, r4
 8004b8c:	d902      	bls.n	8004b94 <_free_r+0x78>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	e7d5      	b.n	8004b40 <_free_r+0x24>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	1821      	adds	r1, r4, r0
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	d103      	bne.n	8004ba4 <_free_r+0x88>
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	1809      	adds	r1, r1, r0
 8004ba2:	6021      	str	r1, [r4, #0]
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	6054      	str	r4, [r2, #4]
 8004ba8:	e7ca      	b.n	8004b40 <_free_r+0x24>
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	20000370 	.word	0x20000370

08004bb0 <sbrk_aligned>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	4e0f      	ldr	r6, [pc, #60]	; (8004bf0 <sbrk_aligned+0x40>)
 8004bb4:	000d      	movs	r5, r1
 8004bb6:	6831      	ldr	r1, [r6, #0]
 8004bb8:	0004      	movs	r4, r0
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	d102      	bne.n	8004bc4 <sbrk_aligned+0x14>
 8004bbe:	f000 ff43 	bl	8005a48 <_sbrk_r>
 8004bc2:	6030      	str	r0, [r6, #0]
 8004bc4:	0029      	movs	r1, r5
 8004bc6:	0020      	movs	r0, r4
 8004bc8:	f000 ff3e 	bl	8005a48 <_sbrk_r>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d00a      	beq.n	8004be6 <sbrk_aligned+0x36>
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	1cc5      	adds	r5, r0, #3
 8004bd4:	439d      	bics	r5, r3
 8004bd6:	42a8      	cmp	r0, r5
 8004bd8:	d007      	beq.n	8004bea <sbrk_aligned+0x3a>
 8004bda:	1a29      	subs	r1, r5, r0
 8004bdc:	0020      	movs	r0, r4
 8004bde:	f000 ff33 	bl	8005a48 <_sbrk_r>
 8004be2:	3001      	adds	r0, #1
 8004be4:	d101      	bne.n	8004bea <sbrk_aligned+0x3a>
 8004be6:	2501      	movs	r5, #1
 8004be8:	426d      	negs	r5, r5
 8004bea:	0028      	movs	r0, r5
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	20000374 	.word	0x20000374

08004bf4 <_malloc_r>:
 8004bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	1ccb      	adds	r3, r1, #3
 8004bfa:	4393      	bics	r3, r2
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	0006      	movs	r6, r0
 8004c00:	001f      	movs	r7, r3
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d238      	bcs.n	8004c78 <_malloc_r+0x84>
 8004c06:	270c      	movs	r7, #12
 8004c08:	42b9      	cmp	r1, r7
 8004c0a:	d837      	bhi.n	8004c7c <_malloc_r+0x88>
 8004c0c:	0030      	movs	r0, r6
 8004c0e:	f000 f873 	bl	8004cf8 <__malloc_lock>
 8004c12:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <_malloc_r+0x100>)
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	001c      	movs	r4, r3
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	d133      	bne.n	8004c86 <_malloc_r+0x92>
 8004c1e:	0039      	movs	r1, r7
 8004c20:	0030      	movs	r0, r6
 8004c22:	f7ff ffc5 	bl	8004bb0 <sbrk_aligned>
 8004c26:	0004      	movs	r4, r0
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d15e      	bne.n	8004cea <_malloc_r+0xf6>
 8004c2c:	9b00      	ldr	r3, [sp, #0]
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	0025      	movs	r5, r4
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	d14e      	bne.n	8004cd4 <_malloc_r+0xe0>
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	d051      	beq.n	8004cde <_malloc_r+0xea>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	0029      	movs	r1, r5
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	0030      	movs	r0, r6
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	f000 ff00 	bl	8005a48 <_sbrk_r>
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	4283      	cmp	r3, r0
 8004c4c:	d147      	bne.n	8004cde <_malloc_r+0xea>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	0030      	movs	r0, r6
 8004c52:	1aff      	subs	r7, r7, r3
 8004c54:	0039      	movs	r1, r7
 8004c56:	f7ff ffab 	bl	8004bb0 <sbrk_aligned>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d03f      	beq.n	8004cde <_malloc_r+0xea>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	19db      	adds	r3, r3, r7
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	9b00      	ldr	r3, [sp, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d040      	beq.n	8004cee <_malloc_r+0xfa>
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	42a2      	cmp	r2, r4
 8004c70:	d133      	bne.n	8004cda <_malloc_r+0xe6>
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e014      	b.n	8004ca2 <_malloc_r+0xae>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dac5      	bge.n	8004c08 <_malloc_r+0x14>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	2500      	movs	r5, #0
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	0028      	movs	r0, r5
 8004c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c86:	6821      	ldr	r1, [r4, #0]
 8004c88:	1bc9      	subs	r1, r1, r7
 8004c8a:	d420      	bmi.n	8004cce <_malloc_r+0xda>
 8004c8c:	290b      	cmp	r1, #11
 8004c8e:	d918      	bls.n	8004cc2 <_malloc_r+0xce>
 8004c90:	19e2      	adds	r2, r4, r7
 8004c92:	6027      	str	r7, [r4, #0]
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d112      	bne.n	8004cbe <_malloc_r+0xca>
 8004c98:	9b00      	ldr	r3, [sp, #0]
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	6011      	str	r1, [r2, #0]
 8004ca0:	6053      	str	r3, [r2, #4]
 8004ca2:	0030      	movs	r0, r6
 8004ca4:	0025      	movs	r5, r4
 8004ca6:	f000 f82f 	bl	8004d08 <__malloc_unlock>
 8004caa:	2207      	movs	r2, #7
 8004cac:	350b      	adds	r5, #11
 8004cae:	1d23      	adds	r3, r4, #4
 8004cb0:	4395      	bics	r5, r2
 8004cb2:	1aea      	subs	r2, r5, r3
 8004cb4:	429d      	cmp	r5, r3
 8004cb6:	d0e4      	beq.n	8004c82 <_malloc_r+0x8e>
 8004cb8:	1b5b      	subs	r3, r3, r5
 8004cba:	50a3      	str	r3, [r4, r2]
 8004cbc:	e7e1      	b.n	8004c82 <_malloc_r+0x8e>
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	e7ec      	b.n	8004c9c <_malloc_r+0xa8>
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	d1d5      	bne.n	8004c74 <_malloc_r+0x80>
 8004cc8:	9b00      	ldr	r3, [sp, #0]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e7e9      	b.n	8004ca2 <_malloc_r+0xae>
 8004cce:	0023      	movs	r3, r4
 8004cd0:	6864      	ldr	r4, [r4, #4]
 8004cd2:	e7a2      	b.n	8004c1a <_malloc_r+0x26>
 8004cd4:	002c      	movs	r4, r5
 8004cd6:	686d      	ldr	r5, [r5, #4]
 8004cd8:	e7ab      	b.n	8004c32 <_malloc_r+0x3e>
 8004cda:	0013      	movs	r3, r2
 8004cdc:	e7c4      	b.n	8004c68 <_malloc_r+0x74>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	0030      	movs	r0, r6
 8004ce2:	6033      	str	r3, [r6, #0]
 8004ce4:	f000 f810 	bl	8004d08 <__malloc_unlock>
 8004ce8:	e7cb      	b.n	8004c82 <_malloc_r+0x8e>
 8004cea:	6027      	str	r7, [r4, #0]
 8004cec:	e7d9      	b.n	8004ca2 <_malloc_r+0xae>
 8004cee:	605b      	str	r3, [r3, #4]
 8004cf0:	deff      	udf	#255	; 0xff
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	20000370 	.word	0x20000370

08004cf8 <__malloc_lock>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4802      	ldr	r0, [pc, #8]	; (8004d04 <__malloc_lock+0xc>)
 8004cfc:	f7ff ff0c 	bl	8004b18 <__retarget_lock_acquire_recursive>
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	2000036c 	.word	0x2000036c

08004d08 <__malloc_unlock>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4802      	ldr	r0, [pc, #8]	; (8004d14 <__malloc_unlock+0xc>)
 8004d0c:	f7ff ff05 	bl	8004b1a <__retarget_lock_release_recursive>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	2000036c 	.word	0x2000036c

08004d18 <__ssputs_r>:
 8004d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	688e      	ldr	r6, [r1, #8]
 8004d22:	9a01      	ldr	r2, [sp, #4]
 8004d24:	0007      	movs	r7, r0
 8004d26:	000c      	movs	r4, r1
 8004d28:	680b      	ldr	r3, [r1, #0]
 8004d2a:	4296      	cmp	r6, r2
 8004d2c:	d831      	bhi.n	8004d92 <__ssputs_r+0x7a>
 8004d2e:	898a      	ldrh	r2, [r1, #12]
 8004d30:	2190      	movs	r1, #144	; 0x90
 8004d32:	00c9      	lsls	r1, r1, #3
 8004d34:	420a      	tst	r2, r1
 8004d36:	d029      	beq.n	8004d8c <__ssputs_r+0x74>
 8004d38:	2003      	movs	r0, #3
 8004d3a:	6921      	ldr	r1, [r4, #16]
 8004d3c:	1a5b      	subs	r3, r3, r1
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	6963      	ldr	r3, [r4, #20]
 8004d42:	4343      	muls	r3, r0
 8004d44:	0fdd      	lsrs	r5, r3, #31
 8004d46:	18ed      	adds	r5, r5, r3
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	9802      	ldr	r0, [sp, #8]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	181b      	adds	r3, r3, r0
 8004d50:	106d      	asrs	r5, r5, #1
 8004d52:	42ab      	cmp	r3, r5
 8004d54:	d900      	bls.n	8004d58 <__ssputs_r+0x40>
 8004d56:	001d      	movs	r5, r3
 8004d58:	0552      	lsls	r2, r2, #21
 8004d5a:	d529      	bpl.n	8004db0 <__ssputs_r+0x98>
 8004d5c:	0029      	movs	r1, r5
 8004d5e:	0038      	movs	r0, r7
 8004d60:	f7ff ff48 	bl	8004bf4 <_malloc_r>
 8004d64:	1e06      	subs	r6, r0, #0
 8004d66:	d02d      	beq.n	8004dc4 <__ssputs_r+0xac>
 8004d68:	9a02      	ldr	r2, [sp, #8]
 8004d6a:	6921      	ldr	r1, [r4, #16]
 8004d6c:	f000 fe89 	bl	8005a82 <memcpy>
 8004d70:	89a2      	ldrh	r2, [r4, #12]
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <__ssputs_r+0xc0>)
 8004d74:	401a      	ands	r2, r3
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	81a3      	strh	r3, [r4, #12]
 8004d7c:	9b02      	ldr	r3, [sp, #8]
 8004d7e:	6126      	str	r6, [r4, #16]
 8004d80:	18f6      	adds	r6, r6, r3
 8004d82:	6026      	str	r6, [r4, #0]
 8004d84:	6165      	str	r5, [r4, #20]
 8004d86:	9e01      	ldr	r6, [sp, #4]
 8004d88:	1aed      	subs	r5, r5, r3
 8004d8a:	60a5      	str	r5, [r4, #8]
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	429e      	cmp	r6, r3
 8004d90:	d900      	bls.n	8004d94 <__ssputs_r+0x7c>
 8004d92:	9e01      	ldr	r6, [sp, #4]
 8004d94:	0032      	movs	r2, r6
 8004d96:	9903      	ldr	r1, [sp, #12]
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	f000 fe41 	bl	8005a20 <memmove>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	1b9b      	subs	r3, r3, r6
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	199b      	adds	r3, r3, r6
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	b005      	add	sp, #20
 8004dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db0:	002a      	movs	r2, r5
 8004db2:	0038      	movs	r0, r7
 8004db4:	f000 fe6e 	bl	8005a94 <_realloc_r>
 8004db8:	1e06      	subs	r6, r0, #0
 8004dba:	d1df      	bne.n	8004d7c <__ssputs_r+0x64>
 8004dbc:	0038      	movs	r0, r7
 8004dbe:	6921      	ldr	r1, [r4, #16]
 8004dc0:	f7ff feac 	bl	8004b1c <_free_r>
 8004dc4:	230c      	movs	r3, #12
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	89a2      	ldrh	r2, [r4, #12]
 8004dcc:	3334      	adds	r3, #52	; 0x34
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	4240      	negs	r0, r0
 8004dd4:	e7ea      	b.n	8004dac <__ssputs_r+0x94>
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	fffffb7f 	.word	0xfffffb7f

08004ddc <_svfiprintf_r>:
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	b0a1      	sub	sp, #132	; 0x84
 8004de0:	9003      	str	r0, [sp, #12]
 8004de2:	001d      	movs	r5, r3
 8004de4:	898b      	ldrh	r3, [r1, #12]
 8004de6:	000f      	movs	r7, r1
 8004de8:	0016      	movs	r6, r2
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	d511      	bpl.n	8004e12 <_svfiprintf_r+0x36>
 8004dee:	690b      	ldr	r3, [r1, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10e      	bne.n	8004e12 <_svfiprintf_r+0x36>
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	f7ff fefd 	bl	8004bf4 <_malloc_r>
 8004dfa:	6038      	str	r0, [r7, #0]
 8004dfc:	6138      	str	r0, [r7, #16]
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d105      	bne.n	8004e0e <_svfiprintf_r+0x32>
 8004e02:	230c      	movs	r3, #12
 8004e04:	9a03      	ldr	r2, [sp, #12]
 8004e06:	3801      	subs	r0, #1
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	b021      	add	sp, #132	; 0x84
 8004e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	2300      	movs	r3, #0
 8004e14:	ac08      	add	r4, sp, #32
 8004e16:	6163      	str	r3, [r4, #20]
 8004e18:	3320      	adds	r3, #32
 8004e1a:	7663      	strb	r3, [r4, #25]
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	76a3      	strb	r3, [r4, #26]
 8004e20:	9507      	str	r5, [sp, #28]
 8004e22:	0035      	movs	r5, r6
 8004e24:	782b      	ldrb	r3, [r5, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <_svfiprintf_r+0x52>
 8004e2a:	2b25      	cmp	r3, #37	; 0x25
 8004e2c:	d148      	bne.n	8004ec0 <_svfiprintf_r+0xe4>
 8004e2e:	1bab      	subs	r3, r5, r6
 8004e30:	9305      	str	r3, [sp, #20]
 8004e32:	42b5      	cmp	r5, r6
 8004e34:	d00b      	beq.n	8004e4e <_svfiprintf_r+0x72>
 8004e36:	0032      	movs	r2, r6
 8004e38:	0039      	movs	r1, r7
 8004e3a:	9803      	ldr	r0, [sp, #12]
 8004e3c:	f7ff ff6c 	bl	8004d18 <__ssputs_r>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d100      	bne.n	8004e46 <_svfiprintf_r+0x6a>
 8004e44:	e0af      	b.n	8004fa6 <_svfiprintf_r+0x1ca>
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	9a05      	ldr	r2, [sp, #20]
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	6163      	str	r3, [r4, #20]
 8004e4e:	782b      	ldrb	r3, [r5, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d100      	bne.n	8004e56 <_svfiprintf_r+0x7a>
 8004e54:	e0a7      	b.n	8004fa6 <_svfiprintf_r+0x1ca>
 8004e56:	2201      	movs	r2, #1
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4252      	negs	r2, r2
 8004e5c:	6062      	str	r2, [r4, #4]
 8004e5e:	a904      	add	r1, sp, #16
 8004e60:	3254      	adds	r2, #84	; 0x54
 8004e62:	1852      	adds	r2, r2, r1
 8004e64:	1c6e      	adds	r6, r5, #1
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	60e3      	str	r3, [r4, #12]
 8004e6a:	60a3      	str	r3, [r4, #8]
 8004e6c:	7013      	strb	r3, [r2, #0]
 8004e6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e70:	4b55      	ldr	r3, [pc, #340]	; (8004fc8 <_svfiprintf_r+0x1ec>)
 8004e72:	2205      	movs	r2, #5
 8004e74:	0018      	movs	r0, r3
 8004e76:	7831      	ldrb	r1, [r6, #0]
 8004e78:	9305      	str	r3, [sp, #20]
 8004e7a:	f000 fdf7 	bl	8005a6c <memchr>
 8004e7e:	1c75      	adds	r5, r6, #1
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d11f      	bne.n	8004ec4 <_svfiprintf_r+0xe8>
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	06d3      	lsls	r3, r2, #27
 8004e88:	d504      	bpl.n	8004e94 <_svfiprintf_r+0xb8>
 8004e8a:	2353      	movs	r3, #83	; 0x53
 8004e8c:	a904      	add	r1, sp, #16
 8004e8e:	185b      	adds	r3, r3, r1
 8004e90:	2120      	movs	r1, #32
 8004e92:	7019      	strb	r1, [r3, #0]
 8004e94:	0713      	lsls	r3, r2, #28
 8004e96:	d504      	bpl.n	8004ea2 <_svfiprintf_r+0xc6>
 8004e98:	2353      	movs	r3, #83	; 0x53
 8004e9a:	a904      	add	r1, sp, #16
 8004e9c:	185b      	adds	r3, r3, r1
 8004e9e:	212b      	movs	r1, #43	; 0x2b
 8004ea0:	7019      	strb	r1, [r3, #0]
 8004ea2:	7833      	ldrb	r3, [r6, #0]
 8004ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea6:	d016      	beq.n	8004ed6 <_svfiprintf_r+0xfa>
 8004ea8:	0035      	movs	r5, r6
 8004eaa:	2100      	movs	r1, #0
 8004eac:	200a      	movs	r0, #10
 8004eae:	68e3      	ldr	r3, [r4, #12]
 8004eb0:	782a      	ldrb	r2, [r5, #0]
 8004eb2:	1c6e      	adds	r6, r5, #1
 8004eb4:	3a30      	subs	r2, #48	; 0x30
 8004eb6:	2a09      	cmp	r2, #9
 8004eb8:	d94e      	bls.n	8004f58 <_svfiprintf_r+0x17c>
 8004eba:	2900      	cmp	r1, #0
 8004ebc:	d111      	bne.n	8004ee2 <_svfiprintf_r+0x106>
 8004ebe:	e017      	b.n	8004ef0 <_svfiprintf_r+0x114>
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	e7af      	b.n	8004e24 <_svfiprintf_r+0x48>
 8004ec4:	9b05      	ldr	r3, [sp, #20]
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	1ac0      	subs	r0, r0, r3
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4083      	lsls	r3, r0
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	002e      	movs	r6, r5
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	e7cc      	b.n	8004e70 <_svfiprintf_r+0x94>
 8004ed6:	9b07      	ldr	r3, [sp, #28]
 8004ed8:	1d19      	adds	r1, r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	9107      	str	r1, [sp, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db01      	blt.n	8004ee6 <_svfiprintf_r+0x10a>
 8004ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee4:	e004      	b.n	8004ef0 <_svfiprintf_r+0x114>
 8004ee6:	425b      	negs	r3, r3
 8004ee8:	60e3      	str	r3, [r4, #12]
 8004eea:	2302      	movs	r3, #2
 8004eec:	4313      	orrs	r3, r2
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	782b      	ldrb	r3, [r5, #0]
 8004ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ef4:	d10a      	bne.n	8004f0c <_svfiprintf_r+0x130>
 8004ef6:	786b      	ldrb	r3, [r5, #1]
 8004ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8004efa:	d135      	bne.n	8004f68 <_svfiprintf_r+0x18c>
 8004efc:	9b07      	ldr	r3, [sp, #28]
 8004efe:	3502      	adds	r5, #2
 8004f00:	1d1a      	adds	r2, r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	9207      	str	r2, [sp, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	db2b      	blt.n	8004f62 <_svfiprintf_r+0x186>
 8004f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0c:	4e2f      	ldr	r6, [pc, #188]	; (8004fcc <_svfiprintf_r+0x1f0>)
 8004f0e:	2203      	movs	r2, #3
 8004f10:	0030      	movs	r0, r6
 8004f12:	7829      	ldrb	r1, [r5, #0]
 8004f14:	f000 fdaa 	bl	8005a6c <memchr>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d006      	beq.n	8004f2a <_svfiprintf_r+0x14e>
 8004f1c:	2340      	movs	r3, #64	; 0x40
 8004f1e:	1b80      	subs	r0, r0, r6
 8004f20:	4083      	lsls	r3, r0
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	3501      	adds	r5, #1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	7829      	ldrb	r1, [r5, #0]
 8004f2c:	2206      	movs	r2, #6
 8004f2e:	4828      	ldr	r0, [pc, #160]	; (8004fd0 <_svfiprintf_r+0x1f4>)
 8004f30:	1c6e      	adds	r6, r5, #1
 8004f32:	7621      	strb	r1, [r4, #24]
 8004f34:	f000 fd9a 	bl	8005a6c <memchr>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d03c      	beq.n	8004fb6 <_svfiprintf_r+0x1da>
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <_svfiprintf_r+0x1f8>)
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d125      	bne.n	8004f8e <_svfiprintf_r+0x1b2>
 8004f42:	2207      	movs	r2, #7
 8004f44:	9b07      	ldr	r3, [sp, #28]
 8004f46:	3307      	adds	r3, #7
 8004f48:	4393      	bics	r3, r2
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	9307      	str	r3, [sp, #28]
 8004f4e:	6963      	ldr	r3, [r4, #20]
 8004f50:	9a04      	ldr	r2, [sp, #16]
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	6163      	str	r3, [r4, #20]
 8004f56:	e764      	b.n	8004e22 <_svfiprintf_r+0x46>
 8004f58:	4343      	muls	r3, r0
 8004f5a:	0035      	movs	r5, r6
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	e7a6      	b.n	8004eb0 <_svfiprintf_r+0xd4>
 8004f62:	2301      	movs	r3, #1
 8004f64:	425b      	negs	r3, r3
 8004f66:	e7d0      	b.n	8004f0a <_svfiprintf_r+0x12e>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	200a      	movs	r0, #10
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	3501      	adds	r5, #1
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	7829      	ldrb	r1, [r5, #0]
 8004f74:	1c6e      	adds	r6, r5, #1
 8004f76:	3930      	subs	r1, #48	; 0x30
 8004f78:	2909      	cmp	r1, #9
 8004f7a:	d903      	bls.n	8004f84 <_svfiprintf_r+0x1a8>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0c5      	beq.n	8004f0c <_svfiprintf_r+0x130>
 8004f80:	9209      	str	r2, [sp, #36]	; 0x24
 8004f82:	e7c3      	b.n	8004f0c <_svfiprintf_r+0x130>
 8004f84:	4342      	muls	r2, r0
 8004f86:	0035      	movs	r5, r6
 8004f88:	2301      	movs	r3, #1
 8004f8a:	1852      	adds	r2, r2, r1
 8004f8c:	e7f1      	b.n	8004f72 <_svfiprintf_r+0x196>
 8004f8e:	aa07      	add	r2, sp, #28
 8004f90:	9200      	str	r2, [sp, #0]
 8004f92:	0021      	movs	r1, r4
 8004f94:	003a      	movs	r2, r7
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <_svfiprintf_r+0x1fc>)
 8004f98:	9803      	ldr	r0, [sp, #12]
 8004f9a:	e000      	b.n	8004f9e <_svfiprintf_r+0x1c2>
 8004f9c:	bf00      	nop
 8004f9e:	9004      	str	r0, [sp, #16]
 8004fa0:	9b04      	ldr	r3, [sp, #16]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	d1d3      	bne.n	8004f4e <_svfiprintf_r+0x172>
 8004fa6:	89bb      	ldrh	r3, [r7, #12]
 8004fa8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004faa:	065b      	lsls	r3, r3, #25
 8004fac:	d400      	bmi.n	8004fb0 <_svfiprintf_r+0x1d4>
 8004fae:	e72c      	b.n	8004e0a <_svfiprintf_r+0x2e>
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	4240      	negs	r0, r0
 8004fb4:	e729      	b.n	8004e0a <_svfiprintf_r+0x2e>
 8004fb6:	aa07      	add	r2, sp, #28
 8004fb8:	9200      	str	r2, [sp, #0]
 8004fba:	0021      	movs	r1, r4
 8004fbc:	003a      	movs	r2, r7
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <_svfiprintf_r+0x1fc>)
 8004fc0:	9803      	ldr	r0, [sp, #12]
 8004fc2:	f000 fa41 	bl	8005448 <_printf_i>
 8004fc6:	e7ea      	b.n	8004f9e <_svfiprintf_r+0x1c2>
 8004fc8:	08005d8c 	.word	0x08005d8c
 8004fcc:	08005d92 	.word	0x08005d92
 8004fd0:	08005d96 	.word	0x08005d96
 8004fd4:	00000000 	.word	0x00000000
 8004fd8:	08004d19 	.word	0x08004d19

08004fdc <_sungetc_r>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	0014      	movs	r4, r2
 8004fe0:	1c4b      	adds	r3, r1, #1
 8004fe2:	d103      	bne.n	8004fec <_sungetc_r+0x10>
 8004fe4:	2501      	movs	r5, #1
 8004fe6:	426d      	negs	r5, r5
 8004fe8:	0028      	movs	r0, r5
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	8993      	ldrh	r3, [r2, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	4393      	bics	r3, r2
 8004ff2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	b2ce      	uxtb	r6, r1
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	b2cd      	uxtb	r5, r1
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	d010      	beq.n	8005022 <_sungetc_r+0x46>
 8005000:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005002:	429a      	cmp	r2, r3
 8005004:	dd07      	ble.n	8005016 <_sungetc_r+0x3a>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	3b01      	subs	r3, #1
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	701e      	strb	r6, [r3, #0]
 800500e:	6863      	ldr	r3, [r4, #4]
 8005010:	3301      	adds	r3, #1
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	e7e8      	b.n	8004fe8 <_sungetc_r+0xc>
 8005016:	0021      	movs	r1, r4
 8005018:	f000 fcc4 	bl	80059a4 <__submore>
 800501c:	2800      	cmp	r0, #0
 800501e:	d0f2      	beq.n	8005006 <_sungetc_r+0x2a>
 8005020:	e7e0      	b.n	8004fe4 <_sungetc_r+0x8>
 8005022:	6921      	ldr	r1, [r4, #16]
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	2900      	cmp	r1, #0
 8005028:	d007      	beq.n	800503a <_sungetc_r+0x5e>
 800502a:	4291      	cmp	r1, r2
 800502c:	d205      	bcs.n	800503a <_sungetc_r+0x5e>
 800502e:	1e51      	subs	r1, r2, #1
 8005030:	7808      	ldrb	r0, [r1, #0]
 8005032:	42a8      	cmp	r0, r5
 8005034:	d101      	bne.n	800503a <_sungetc_r+0x5e>
 8005036:	6021      	str	r1, [r4, #0]
 8005038:	e7ea      	b.n	8005010 <_sungetc_r+0x34>
 800503a:	6423      	str	r3, [r4, #64]	; 0x40
 800503c:	0023      	movs	r3, r4
 800503e:	3344      	adds	r3, #68	; 0x44
 8005040:	6363      	str	r3, [r4, #52]	; 0x34
 8005042:	2303      	movs	r3, #3
 8005044:	63a3      	str	r3, [r4, #56]	; 0x38
 8005046:	0023      	movs	r3, r4
 8005048:	3346      	adds	r3, #70	; 0x46
 800504a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800504c:	701e      	strb	r6, [r3, #0]
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	2301      	movs	r3, #1
 8005052:	e7de      	b.n	8005012 <_sungetc_r+0x36>

08005054 <__ssrefill_r>:
 8005054:	b510      	push	{r4, lr}
 8005056:	000c      	movs	r4, r1
 8005058:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800505a:	2900      	cmp	r1, #0
 800505c:	d00e      	beq.n	800507c <__ssrefill_r+0x28>
 800505e:	0023      	movs	r3, r4
 8005060:	3344      	adds	r3, #68	; 0x44
 8005062:	4299      	cmp	r1, r3
 8005064:	d001      	beq.n	800506a <__ssrefill_r+0x16>
 8005066:	f7ff fd59 	bl	8004b1c <_free_r>
 800506a:	2000      	movs	r0, #0
 800506c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800506e:	6360      	str	r0, [r4, #52]	; 0x34
 8005070:	6063      	str	r3, [r4, #4]
 8005072:	4283      	cmp	r3, r0
 8005074:	d002      	beq.n	800507c <__ssrefill_r+0x28>
 8005076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd10      	pop	{r4, pc}
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	2001      	movs	r0, #1
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	89a2      	ldrh	r2, [r4, #12]
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	3320      	adds	r3, #32
 800508a:	4313      	orrs	r3, r2
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	4240      	negs	r0, r0
 8005090:	e7f3      	b.n	800507a <__ssrefill_r+0x26>
	...

08005094 <__ssvfiscanf_r>:
 8005094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005096:	4cae      	ldr	r4, [pc, #696]	; (8005350 <__ssvfiscanf_r+0x2bc>)
 8005098:	0006      	movs	r6, r0
 800509a:	44a5      	add	sp, r4
 800509c:	000c      	movs	r4, r1
 800509e:	2100      	movs	r1, #0
 80050a0:	20be      	movs	r0, #190	; 0xbe
 80050a2:	9146      	str	r1, [sp, #280]	; 0x118
 80050a4:	9147      	str	r1, [sp, #284]	; 0x11c
 80050a6:	a903      	add	r1, sp, #12
 80050a8:	9148      	str	r1, [sp, #288]	; 0x120
 80050aa:	49aa      	ldr	r1, [pc, #680]	; (8005354 <__ssvfiscanf_r+0x2c0>)
 80050ac:	0040      	lsls	r0, r0, #1
 80050ae:	ad43      	add	r5, sp, #268	; 0x10c
 80050b0:	5029      	str	r1, [r5, r0]
 80050b2:	25c0      	movs	r5, #192	; 0xc0
 80050b4:	49a8      	ldr	r1, [pc, #672]	; (8005358 <__ssvfiscanf_r+0x2c4>)
 80050b6:	006d      	lsls	r5, r5, #1
 80050b8:	a843      	add	r0, sp, #268	; 0x10c
 80050ba:	5141      	str	r1, [r0, r5]
 80050bc:	9302      	str	r3, [sp, #8]
 80050be:	7815      	ldrb	r5, [r2, #0]
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	d100      	bne.n	80050c6 <__ssvfiscanf_r+0x32>
 80050c4:	e141      	b.n	800534a <__ssvfiscanf_r+0x2b6>
 80050c6:	4ba5      	ldr	r3, [pc, #660]	; (800535c <__ssvfiscanf_r+0x2c8>)
 80050c8:	2008      	movs	r0, #8
 80050ca:	5d59      	ldrb	r1, [r3, r5]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2308      	movs	r3, #8
 80050d0:	1c57      	adds	r7, r2, #1
 80050d2:	400b      	ands	r3, r1
 80050d4:	4201      	tst	r1, r0
 80050d6:	d01e      	beq.n	8005116 <__ssvfiscanf_r+0x82>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dd11      	ble.n	8005102 <__ssvfiscanf_r+0x6e>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	9900      	ldr	r1, [sp, #0]
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	5c8a      	ldrb	r2, [r1, r2]
 80050e6:	2108      	movs	r1, #8
 80050e8:	420a      	tst	r2, r1
 80050ea:	d101      	bne.n	80050f0 <__ssvfiscanf_r+0x5c>
 80050ec:	003a      	movs	r2, r7
 80050ee:	e7e6      	b.n	80050be <__ssvfiscanf_r+0x2a>
 80050f0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80050f2:	3301      	adds	r3, #1
 80050f4:	3201      	adds	r2, #1
 80050f6:	9247      	str	r2, [sp, #284]	; 0x11c
 80050f8:	6862      	ldr	r2, [r4, #4]
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	3a01      	subs	r2, #1
 80050fe:	6062      	str	r2, [r4, #4]
 8005100:	e7ea      	b.n	80050d8 <__ssvfiscanf_r+0x44>
 8005102:	22c0      	movs	r2, #192	; 0xc0
 8005104:	ab43      	add	r3, sp, #268	; 0x10c
 8005106:	0052      	lsls	r2, r2, #1
 8005108:	0021      	movs	r1, r4
 800510a:	0030      	movs	r0, r6
 800510c:	589b      	ldr	r3, [r3, r2]
 800510e:	4798      	blx	r3
 8005110:	2800      	cmp	r0, #0
 8005112:	d0e4      	beq.n	80050de <__ssvfiscanf_r+0x4a>
 8005114:	e7ea      	b.n	80050ec <__ssvfiscanf_r+0x58>
 8005116:	2d25      	cmp	r5, #37	; 0x25
 8005118:	d162      	bne.n	80051e0 <__ssvfiscanf_r+0x14c>
 800511a:	9345      	str	r3, [sp, #276]	; 0x114
 800511c:	9343      	str	r3, [sp, #268]	; 0x10c
 800511e:	7853      	ldrb	r3, [r2, #1]
 8005120:	2b2a      	cmp	r3, #42	; 0x2a
 8005122:	d102      	bne.n	800512a <__ssvfiscanf_r+0x96>
 8005124:	3b1a      	subs	r3, #26
 8005126:	9343      	str	r3, [sp, #268]	; 0x10c
 8005128:	1c97      	adds	r7, r2, #2
 800512a:	003d      	movs	r5, r7
 800512c:	220a      	movs	r2, #10
 800512e:	7829      	ldrb	r1, [r5, #0]
 8005130:	1c6b      	adds	r3, r5, #1
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	000b      	movs	r3, r1
 8005136:	3b30      	subs	r3, #48	; 0x30
 8005138:	2b09      	cmp	r3, #9
 800513a:	d91e      	bls.n	800517a <__ssvfiscanf_r+0xe6>
 800513c:	4f88      	ldr	r7, [pc, #544]	; (8005360 <__ssvfiscanf_r+0x2cc>)
 800513e:	2203      	movs	r2, #3
 8005140:	0038      	movs	r0, r7
 8005142:	f000 fc93 	bl	8005a6c <memchr>
 8005146:	2800      	cmp	r0, #0
 8005148:	d006      	beq.n	8005158 <__ssvfiscanf_r+0xc4>
 800514a:	2301      	movs	r3, #1
 800514c:	1bc0      	subs	r0, r0, r7
 800514e:	4083      	lsls	r3, r0
 8005150:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005152:	9d01      	ldr	r5, [sp, #4]
 8005154:	4313      	orrs	r3, r2
 8005156:	9343      	str	r3, [sp, #268]	; 0x10c
 8005158:	1c6f      	adds	r7, r5, #1
 800515a:	782d      	ldrb	r5, [r5, #0]
 800515c:	2d78      	cmp	r5, #120	; 0x78
 800515e:	d807      	bhi.n	8005170 <__ssvfiscanf_r+0xdc>
 8005160:	2d57      	cmp	r5, #87	; 0x57
 8005162:	d811      	bhi.n	8005188 <__ssvfiscanf_r+0xf4>
 8005164:	2d25      	cmp	r5, #37	; 0x25
 8005166:	d03b      	beq.n	80051e0 <__ssvfiscanf_r+0x14c>
 8005168:	d835      	bhi.n	80051d6 <__ssvfiscanf_r+0x142>
 800516a:	2d00      	cmp	r5, #0
 800516c:	d100      	bne.n	8005170 <__ssvfiscanf_r+0xdc>
 800516e:	e0e9      	b.n	8005344 <__ssvfiscanf_r+0x2b0>
 8005170:	2303      	movs	r3, #3
 8005172:	9349      	str	r3, [sp, #292]	; 0x124
 8005174:	3307      	adds	r3, #7
 8005176:	9344      	str	r3, [sp, #272]	; 0x110
 8005178:	e06d      	b.n	8005256 <__ssvfiscanf_r+0x1c2>
 800517a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800517c:	9d01      	ldr	r5, [sp, #4]
 800517e:	4353      	muls	r3, r2
 8005180:	3b30      	subs	r3, #48	; 0x30
 8005182:	185b      	adds	r3, r3, r1
 8005184:	9345      	str	r3, [sp, #276]	; 0x114
 8005186:	e7d2      	b.n	800512e <__ssvfiscanf_r+0x9a>
 8005188:	0028      	movs	r0, r5
 800518a:	3858      	subs	r0, #88	; 0x58
 800518c:	2820      	cmp	r0, #32
 800518e:	d8ef      	bhi.n	8005170 <__ssvfiscanf_r+0xdc>
 8005190:	f7fa ffc0 	bl	8000114 <__gnu_thumb1_case_shi>
 8005194:	ffee004d 	.word	0xffee004d
 8005198:	007fffee 	.word	0x007fffee
 800519c:	ffeeffee 	.word	0xffeeffee
 80051a0:	ffeeffee 	.word	0xffeeffee
 80051a4:	ffeeffee 	.word	0xffeeffee
 80051a8:	008affee 	.word	0x008affee
 80051ac:	0024007d 	.word	0x0024007d
 80051b0:	00240024 	.word	0x00240024
 80051b4:	0059ffee 	.word	0x0059ffee
 80051b8:	ffeeffee 	.word	0xffeeffee
 80051bc:	ffeeffee 	.word	0xffeeffee
 80051c0:	005d0092 	.word	0x005d0092
 80051c4:	ffee0049 	.word	0xffee0049
 80051c8:	0090ffee 	.word	0x0090ffee
 80051cc:	007dffee 	.word	0x007dffee
 80051d0:	ffeeffee 	.word	0xffeeffee
 80051d4:	004d      	.short	0x004d
 80051d6:	3d45      	subs	r5, #69	; 0x45
 80051d8:	2d02      	cmp	r5, #2
 80051da:	d8c9      	bhi.n	8005170 <__ssvfiscanf_r+0xdc>
 80051dc:	2305      	movs	r3, #5
 80051de:	e039      	b.n	8005254 <__ssvfiscanf_r+0x1c0>
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dd0d      	ble.n	8005202 <__ssvfiscanf_r+0x16e>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	42aa      	cmp	r2, r5
 80051ec:	d000      	beq.n	80051f0 <__ssvfiscanf_r+0x15c>
 80051ee:	e0ac      	b.n	800534a <__ssvfiscanf_r+0x2b6>
 80051f0:	3301      	adds	r3, #1
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80051f8:	3a01      	subs	r2, #1
 80051fa:	3301      	adds	r3, #1
 80051fc:	6062      	str	r2, [r4, #4]
 80051fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8005200:	e774      	b.n	80050ec <__ssvfiscanf_r+0x58>
 8005202:	22c0      	movs	r2, #192	; 0xc0
 8005204:	ab43      	add	r3, sp, #268	; 0x10c
 8005206:	0052      	lsls	r2, r2, #1
 8005208:	0021      	movs	r1, r4
 800520a:	0030      	movs	r0, r6
 800520c:	589b      	ldr	r3, [r3, r2]
 800520e:	4798      	blx	r3
 8005210:	2800      	cmp	r0, #0
 8005212:	d0e8      	beq.n	80051e6 <__ssvfiscanf_r+0x152>
 8005214:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005216:	2800      	cmp	r0, #0
 8005218:	d000      	beq.n	800521c <__ssvfiscanf_r+0x188>
 800521a:	e08f      	b.n	800533c <__ssvfiscanf_r+0x2a8>
 800521c:	3801      	subs	r0, #1
 800521e:	23a5      	movs	r3, #165	; 0xa5
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	449d      	add	sp, r3
 8005224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005226:	2320      	movs	r3, #32
 8005228:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800522a:	4313      	orrs	r3, r2
 800522c:	9343      	str	r3, [sp, #268]	; 0x10c
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4313      	orrs	r3, r2
 8005236:	9343      	str	r3, [sp, #268]	; 0x10c
 8005238:	2310      	movs	r3, #16
 800523a:	9344      	str	r3, [sp, #272]	; 0x110
 800523c:	236e      	movs	r3, #110	; 0x6e
 800523e:	42ab      	cmp	r3, r5
 8005240:	419b      	sbcs	r3, r3
 8005242:	425b      	negs	r3, r3
 8005244:	e001      	b.n	800524a <__ssvfiscanf_r+0x1b6>
 8005246:	2300      	movs	r3, #0
 8005248:	9344      	str	r3, [sp, #272]	; 0x110
 800524a:	3303      	adds	r3, #3
 800524c:	e002      	b.n	8005254 <__ssvfiscanf_r+0x1c0>
 800524e:	2308      	movs	r3, #8
 8005250:	9344      	str	r3, [sp, #272]	; 0x110
 8005252:	3b04      	subs	r3, #4
 8005254:	9349      	str	r3, [sp, #292]	; 0x124
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	dd3c      	ble.n	80052d6 <__ssvfiscanf_r+0x242>
 800525c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800525e:	065b      	lsls	r3, r3, #25
 8005260:	d406      	bmi.n	8005270 <__ssvfiscanf_r+0x1dc>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	9900      	ldr	r1, [sp, #0]
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	5c8a      	ldrb	r2, [r1, r2]
 800526a:	2108      	movs	r1, #8
 800526c:	420a      	tst	r2, r1
 800526e:	d13c      	bne.n	80052ea <__ssvfiscanf_r+0x256>
 8005270:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005272:	2b02      	cmp	r3, #2
 8005274:	dc4e      	bgt.n	8005314 <__ssvfiscanf_r+0x280>
 8005276:	0022      	movs	r2, r4
 8005278:	0030      	movs	r0, r6
 800527a:	ab02      	add	r3, sp, #8
 800527c:	a943      	add	r1, sp, #268	; 0x10c
 800527e:	f000 f9f3 	bl	8005668 <_scanf_chars>
 8005282:	2801      	cmp	r0, #1
 8005284:	d061      	beq.n	800534a <__ssvfiscanf_r+0x2b6>
 8005286:	2802      	cmp	r0, #2
 8005288:	d000      	beq.n	800528c <__ssvfiscanf_r+0x1f8>
 800528a:	e72f      	b.n	80050ec <__ssvfiscanf_r+0x58>
 800528c:	e7c2      	b.n	8005214 <__ssvfiscanf_r+0x180>
 800528e:	230a      	movs	r3, #10
 8005290:	e7d3      	b.n	800523a <__ssvfiscanf_r+0x1a6>
 8005292:	0039      	movs	r1, r7
 8005294:	a803      	add	r0, sp, #12
 8005296:	f000 fb49 	bl	800592c <__sccl>
 800529a:	2340      	movs	r3, #64	; 0x40
 800529c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800529e:	0007      	movs	r7, r0
 80052a0:	4313      	orrs	r3, r2
 80052a2:	9343      	str	r3, [sp, #268]	; 0x10c
 80052a4:	2301      	movs	r3, #1
 80052a6:	e7d5      	b.n	8005254 <__ssvfiscanf_r+0x1c0>
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80052ac:	4313      	orrs	r3, r2
 80052ae:	9343      	str	r3, [sp, #268]	; 0x10c
 80052b0:	2300      	movs	r3, #0
 80052b2:	e7cf      	b.n	8005254 <__ssvfiscanf_r+0x1c0>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e7cd      	b.n	8005254 <__ssvfiscanf_r+0x1c0>
 80052b8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80052ba:	06d3      	lsls	r3, r2, #27
 80052bc:	d500      	bpl.n	80052c0 <__ssvfiscanf_r+0x22c>
 80052be:	e715      	b.n	80050ec <__ssvfiscanf_r+0x58>
 80052c0:	9b02      	ldr	r3, [sp, #8]
 80052c2:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80052c4:	1d18      	adds	r0, r3, #4
 80052c6:	9002      	str	r0, [sp, #8]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	07d5      	lsls	r5, r2, #31
 80052cc:	d501      	bpl.n	80052d2 <__ssvfiscanf_r+0x23e>
 80052ce:	8019      	strh	r1, [r3, #0]
 80052d0:	e70c      	b.n	80050ec <__ssvfiscanf_r+0x58>
 80052d2:	6019      	str	r1, [r3, #0]
 80052d4:	e70a      	b.n	80050ec <__ssvfiscanf_r+0x58>
 80052d6:	22c0      	movs	r2, #192	; 0xc0
 80052d8:	ab43      	add	r3, sp, #268	; 0x10c
 80052da:	0052      	lsls	r2, r2, #1
 80052dc:	0021      	movs	r1, r4
 80052de:	0030      	movs	r0, r6
 80052e0:	589b      	ldr	r3, [r3, r2]
 80052e2:	4798      	blx	r3
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d0b9      	beq.n	800525c <__ssvfiscanf_r+0x1c8>
 80052e8:	e794      	b.n	8005214 <__ssvfiscanf_r+0x180>
 80052ea:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80052ec:	3201      	adds	r2, #1
 80052ee:	9247      	str	r2, [sp, #284]	; 0x11c
 80052f0:	6862      	ldr	r2, [r4, #4]
 80052f2:	3a01      	subs	r2, #1
 80052f4:	6062      	str	r2, [r4, #4]
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	dd02      	ble.n	8005300 <__ssvfiscanf_r+0x26c>
 80052fa:	3301      	adds	r3, #1
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	e7b0      	b.n	8005262 <__ssvfiscanf_r+0x1ce>
 8005300:	22c0      	movs	r2, #192	; 0xc0
 8005302:	ab43      	add	r3, sp, #268	; 0x10c
 8005304:	0052      	lsls	r2, r2, #1
 8005306:	0021      	movs	r1, r4
 8005308:	0030      	movs	r0, r6
 800530a:	589b      	ldr	r3, [r3, r2]
 800530c:	4798      	blx	r3
 800530e:	2800      	cmp	r0, #0
 8005310:	d0a7      	beq.n	8005262 <__ssvfiscanf_r+0x1ce>
 8005312:	e77f      	b.n	8005214 <__ssvfiscanf_r+0x180>
 8005314:	2b04      	cmp	r3, #4
 8005316:	dc06      	bgt.n	8005326 <__ssvfiscanf_r+0x292>
 8005318:	0022      	movs	r2, r4
 800531a:	0030      	movs	r0, r6
 800531c:	ab02      	add	r3, sp, #8
 800531e:	a943      	add	r1, sp, #268	; 0x10c
 8005320:	f000 fa00 	bl	8005724 <_scanf_i>
 8005324:	e7ad      	b.n	8005282 <__ssvfiscanf_r+0x1ee>
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <__ssvfiscanf_r+0x2d0>)
 8005328:	2b00      	cmp	r3, #0
 800532a:	d100      	bne.n	800532e <__ssvfiscanf_r+0x29a>
 800532c:	e6de      	b.n	80050ec <__ssvfiscanf_r+0x58>
 800532e:	0022      	movs	r2, r4
 8005330:	0030      	movs	r0, r6
 8005332:	ab02      	add	r3, sp, #8
 8005334:	a943      	add	r1, sp, #268	; 0x10c
 8005336:	e000      	b.n	800533a <__ssvfiscanf_r+0x2a6>
 8005338:	bf00      	nop
 800533a:	e7a2      	b.n	8005282 <__ssvfiscanf_r+0x1ee>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	065b      	lsls	r3, r3, #25
 8005340:	d400      	bmi.n	8005344 <__ssvfiscanf_r+0x2b0>
 8005342:	e76c      	b.n	800521e <__ssvfiscanf_r+0x18a>
 8005344:	2001      	movs	r0, #1
 8005346:	4240      	negs	r0, r0
 8005348:	e769      	b.n	800521e <__ssvfiscanf_r+0x18a>
 800534a:	9846      	ldr	r0, [sp, #280]	; 0x118
 800534c:	e767      	b.n	800521e <__ssvfiscanf_r+0x18a>
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	fffffd6c 	.word	0xfffffd6c
 8005354:	08004fdd 	.word	0x08004fdd
 8005358:	08005055 	.word	0x08005055
 800535c:	08005ddb 	.word	0x08005ddb
 8005360:	08005d92 	.word	0x08005d92
 8005364:	00000000 	.word	0x00000000

08005368 <_printf_common>:
 8005368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536a:	0016      	movs	r6, r2
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	688a      	ldr	r2, [r1, #8]
 8005370:	690b      	ldr	r3, [r1, #16]
 8005372:	000c      	movs	r4, r1
 8005374:	9000      	str	r0, [sp, #0]
 8005376:	4293      	cmp	r3, r2
 8005378:	da00      	bge.n	800537c <_printf_common+0x14>
 800537a:	0013      	movs	r3, r2
 800537c:	0022      	movs	r2, r4
 800537e:	6033      	str	r3, [r6, #0]
 8005380:	3243      	adds	r2, #67	; 0x43
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	2a00      	cmp	r2, #0
 8005386:	d001      	beq.n	800538c <_printf_common+0x24>
 8005388:	3301      	adds	r3, #1
 800538a:	6033      	str	r3, [r6, #0]
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	069b      	lsls	r3, r3, #26
 8005390:	d502      	bpl.n	8005398 <_printf_common+0x30>
 8005392:	6833      	ldr	r3, [r6, #0]
 8005394:	3302      	adds	r3, #2
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	2306      	movs	r3, #6
 800539c:	0015      	movs	r5, r2
 800539e:	401d      	ands	r5, r3
 80053a0:	421a      	tst	r2, r3
 80053a2:	d027      	beq.n	80053f4 <_printf_common+0x8c>
 80053a4:	0023      	movs	r3, r4
 80053a6:	3343      	adds	r3, #67	; 0x43
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	1e5a      	subs	r2, r3, #1
 80053ac:	4193      	sbcs	r3, r2
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	0692      	lsls	r2, r2, #26
 80053b2:	d430      	bmi.n	8005416 <_printf_common+0xae>
 80053b4:	0022      	movs	r2, r4
 80053b6:	9901      	ldr	r1, [sp, #4]
 80053b8:	9800      	ldr	r0, [sp, #0]
 80053ba:	9d08      	ldr	r5, [sp, #32]
 80053bc:	3243      	adds	r2, #67	; 0x43
 80053be:	47a8      	blx	r5
 80053c0:	3001      	adds	r0, #1
 80053c2:	d025      	beq.n	8005410 <_printf_common+0xa8>
 80053c4:	2206      	movs	r2, #6
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	2500      	movs	r5, #0
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d105      	bne.n	80053dc <_printf_common+0x74>
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	68e5      	ldr	r5, [r4, #12]
 80053d4:	1aed      	subs	r5, r5, r3
 80053d6:	43eb      	mvns	r3, r5
 80053d8:	17db      	asrs	r3, r3, #31
 80053da:	401d      	ands	r5, r3
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	4293      	cmp	r3, r2
 80053e2:	dd01      	ble.n	80053e8 <_printf_common+0x80>
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	18ed      	adds	r5, r5, r3
 80053e8:	2600      	movs	r6, #0
 80053ea:	42b5      	cmp	r5, r6
 80053ec:	d120      	bne.n	8005430 <_printf_common+0xc8>
 80053ee:	2000      	movs	r0, #0
 80053f0:	e010      	b.n	8005414 <_printf_common+0xac>
 80053f2:	3501      	adds	r5, #1
 80053f4:	68e3      	ldr	r3, [r4, #12]
 80053f6:	6832      	ldr	r2, [r6, #0]
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	42ab      	cmp	r3, r5
 80053fc:	ddd2      	ble.n	80053a4 <_printf_common+0x3c>
 80053fe:	0022      	movs	r2, r4
 8005400:	2301      	movs	r3, #1
 8005402:	9901      	ldr	r1, [sp, #4]
 8005404:	9800      	ldr	r0, [sp, #0]
 8005406:	9f08      	ldr	r7, [sp, #32]
 8005408:	3219      	adds	r2, #25
 800540a:	47b8      	blx	r7
 800540c:	3001      	adds	r0, #1
 800540e:	d1f0      	bne.n	80053f2 <_printf_common+0x8a>
 8005410:	2001      	movs	r0, #1
 8005412:	4240      	negs	r0, r0
 8005414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005416:	2030      	movs	r0, #48	; 0x30
 8005418:	18e1      	adds	r1, r4, r3
 800541a:	3143      	adds	r1, #67	; 0x43
 800541c:	7008      	strb	r0, [r1, #0]
 800541e:	0021      	movs	r1, r4
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	3145      	adds	r1, #69	; 0x45
 8005424:	7809      	ldrb	r1, [r1, #0]
 8005426:	18a2      	adds	r2, r4, r2
 8005428:	3243      	adds	r2, #67	; 0x43
 800542a:	3302      	adds	r3, #2
 800542c:	7011      	strb	r1, [r2, #0]
 800542e:	e7c1      	b.n	80053b4 <_printf_common+0x4c>
 8005430:	0022      	movs	r2, r4
 8005432:	2301      	movs	r3, #1
 8005434:	9901      	ldr	r1, [sp, #4]
 8005436:	9800      	ldr	r0, [sp, #0]
 8005438:	9f08      	ldr	r7, [sp, #32]
 800543a:	321a      	adds	r2, #26
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	d0e6      	beq.n	8005410 <_printf_common+0xa8>
 8005442:	3601      	adds	r6, #1
 8005444:	e7d1      	b.n	80053ea <_printf_common+0x82>
	...

08005448 <_printf_i>:
 8005448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544a:	b08b      	sub	sp, #44	; 0x2c
 800544c:	9206      	str	r2, [sp, #24]
 800544e:	000a      	movs	r2, r1
 8005450:	3243      	adds	r2, #67	; 0x43
 8005452:	9307      	str	r3, [sp, #28]
 8005454:	9005      	str	r0, [sp, #20]
 8005456:	9204      	str	r2, [sp, #16]
 8005458:	7e0a      	ldrb	r2, [r1, #24]
 800545a:	000c      	movs	r4, r1
 800545c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800545e:	2a78      	cmp	r2, #120	; 0x78
 8005460:	d809      	bhi.n	8005476 <_printf_i+0x2e>
 8005462:	2a62      	cmp	r2, #98	; 0x62
 8005464:	d80b      	bhi.n	800547e <_printf_i+0x36>
 8005466:	2a00      	cmp	r2, #0
 8005468:	d100      	bne.n	800546c <_printf_i+0x24>
 800546a:	e0be      	b.n	80055ea <_printf_i+0x1a2>
 800546c:	497c      	ldr	r1, [pc, #496]	; (8005660 <_printf_i+0x218>)
 800546e:	9103      	str	r1, [sp, #12]
 8005470:	2a58      	cmp	r2, #88	; 0x58
 8005472:	d100      	bne.n	8005476 <_printf_i+0x2e>
 8005474:	e093      	b.n	800559e <_printf_i+0x156>
 8005476:	0026      	movs	r6, r4
 8005478:	3642      	adds	r6, #66	; 0x42
 800547a:	7032      	strb	r2, [r6, #0]
 800547c:	e022      	b.n	80054c4 <_printf_i+0x7c>
 800547e:	0010      	movs	r0, r2
 8005480:	3863      	subs	r0, #99	; 0x63
 8005482:	2815      	cmp	r0, #21
 8005484:	d8f7      	bhi.n	8005476 <_printf_i+0x2e>
 8005486:	f7fa fe45 	bl	8000114 <__gnu_thumb1_case_shi>
 800548a:	0016      	.short	0x0016
 800548c:	fff6001f 	.word	0xfff6001f
 8005490:	fff6fff6 	.word	0xfff6fff6
 8005494:	001ffff6 	.word	0x001ffff6
 8005498:	fff6fff6 	.word	0xfff6fff6
 800549c:	fff6fff6 	.word	0xfff6fff6
 80054a0:	003600a3 	.word	0x003600a3
 80054a4:	fff60083 	.word	0xfff60083
 80054a8:	00b4fff6 	.word	0x00b4fff6
 80054ac:	0036fff6 	.word	0x0036fff6
 80054b0:	fff6fff6 	.word	0xfff6fff6
 80054b4:	0087      	.short	0x0087
 80054b6:	0026      	movs	r6, r4
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	3642      	adds	r6, #66	; 0x42
 80054bc:	1d11      	adds	r1, r2, #4
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	6813      	ldr	r3, [r2, #0]
 80054c2:	7033      	strb	r3, [r6, #0]
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0a2      	b.n	800560e <_printf_i+0x1c6>
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	6809      	ldr	r1, [r1, #0]
 80054cc:	1d02      	adds	r2, r0, #4
 80054ce:	060d      	lsls	r5, r1, #24
 80054d0:	d50b      	bpl.n	80054ea <_printf_i+0xa2>
 80054d2:	6805      	ldr	r5, [r0, #0]
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	da03      	bge.n	80054e2 <_printf_i+0x9a>
 80054da:	232d      	movs	r3, #45	; 0x2d
 80054dc:	9a04      	ldr	r2, [sp, #16]
 80054de:	426d      	negs	r5, r5
 80054e0:	7013      	strb	r3, [r2, #0]
 80054e2:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <_printf_i+0x218>)
 80054e4:	270a      	movs	r7, #10
 80054e6:	9303      	str	r3, [sp, #12]
 80054e8:	e01b      	b.n	8005522 <_printf_i+0xda>
 80054ea:	6805      	ldr	r5, [r0, #0]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	0649      	lsls	r1, r1, #25
 80054f0:	d5f1      	bpl.n	80054d6 <_printf_i+0x8e>
 80054f2:	b22d      	sxth	r5, r5
 80054f4:	e7ef      	b.n	80054d6 <_printf_i+0x8e>
 80054f6:	680d      	ldr	r5, [r1, #0]
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	1d08      	adds	r0, r1, #4
 80054fc:	6018      	str	r0, [r3, #0]
 80054fe:	062e      	lsls	r6, r5, #24
 8005500:	d501      	bpl.n	8005506 <_printf_i+0xbe>
 8005502:	680d      	ldr	r5, [r1, #0]
 8005504:	e003      	b.n	800550e <_printf_i+0xc6>
 8005506:	066d      	lsls	r5, r5, #25
 8005508:	d5fb      	bpl.n	8005502 <_printf_i+0xba>
 800550a:	680d      	ldr	r5, [r1, #0]
 800550c:	b2ad      	uxth	r5, r5
 800550e:	4b54      	ldr	r3, [pc, #336]	; (8005660 <_printf_i+0x218>)
 8005510:	2708      	movs	r7, #8
 8005512:	9303      	str	r3, [sp, #12]
 8005514:	2a6f      	cmp	r2, #111	; 0x6f
 8005516:	d000      	beq.n	800551a <_printf_i+0xd2>
 8005518:	3702      	adds	r7, #2
 800551a:	0023      	movs	r3, r4
 800551c:	2200      	movs	r2, #0
 800551e:	3343      	adds	r3, #67	; 0x43
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	60a3      	str	r3, [r4, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	db03      	blt.n	8005532 <_printf_i+0xea>
 800552a:	2104      	movs	r1, #4
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	438a      	bics	r2, r1
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	2d00      	cmp	r5, #0
 8005534:	d102      	bne.n	800553c <_printf_i+0xf4>
 8005536:	9e04      	ldr	r6, [sp, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <_printf_i+0x10e>
 800553c:	9e04      	ldr	r6, [sp, #16]
 800553e:	0028      	movs	r0, r5
 8005540:	0039      	movs	r1, r7
 8005542:	f7fa fe77 	bl	8000234 <__aeabi_uidivmod>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	3e01      	subs	r6, #1
 800554a:	5c5b      	ldrb	r3, [r3, r1]
 800554c:	7033      	strb	r3, [r6, #0]
 800554e:	002b      	movs	r3, r5
 8005550:	0005      	movs	r5, r0
 8005552:	429f      	cmp	r7, r3
 8005554:	d9f3      	bls.n	800553e <_printf_i+0xf6>
 8005556:	2f08      	cmp	r7, #8
 8005558:	d109      	bne.n	800556e <_printf_i+0x126>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	07db      	lsls	r3, r3, #31
 800555e:	d506      	bpl.n	800556e <_printf_i+0x126>
 8005560:	6862      	ldr	r2, [r4, #4]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	dc02      	bgt.n	800556e <_printf_i+0x126>
 8005568:	2330      	movs	r3, #48	; 0x30
 800556a:	3e01      	subs	r6, #1
 800556c:	7033      	strb	r3, [r6, #0]
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	1b9b      	subs	r3, r3, r6
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	0021      	movs	r1, r4
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	9805      	ldr	r0, [sp, #20]
 800557c:	9b06      	ldr	r3, [sp, #24]
 800557e:	aa09      	add	r2, sp, #36	; 0x24
 8005580:	f7ff fef2 	bl	8005368 <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	d147      	bne.n	8005618 <_printf_i+0x1d0>
 8005588:	2001      	movs	r0, #1
 800558a:	4240      	negs	r0, r0
 800558c:	b00b      	add	sp, #44	; 0x2c
 800558e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005590:	2220      	movs	r2, #32
 8005592:	6809      	ldr	r1, [r1, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	6022      	str	r2, [r4, #0]
 8005598:	2278      	movs	r2, #120	; 0x78
 800559a:	4932      	ldr	r1, [pc, #200]	; (8005664 <_printf_i+0x21c>)
 800559c:	9103      	str	r1, [sp, #12]
 800559e:	0021      	movs	r1, r4
 80055a0:	3145      	adds	r1, #69	; 0x45
 80055a2:	700a      	strb	r2, [r1, #0]
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	c920      	ldmia	r1!, {r5}
 80055aa:	0610      	lsls	r0, r2, #24
 80055ac:	d402      	bmi.n	80055b4 <_printf_i+0x16c>
 80055ae:	0650      	lsls	r0, r2, #25
 80055b0:	d500      	bpl.n	80055b4 <_printf_i+0x16c>
 80055b2:	b2ad      	uxth	r5, r5
 80055b4:	6019      	str	r1, [r3, #0]
 80055b6:	07d3      	lsls	r3, r2, #31
 80055b8:	d502      	bpl.n	80055c0 <_printf_i+0x178>
 80055ba:	2320      	movs	r3, #32
 80055bc:	4313      	orrs	r3, r2
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	2710      	movs	r7, #16
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	d1a9      	bne.n	800551a <_printf_i+0xd2>
 80055c6:	2220      	movs	r2, #32
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	4393      	bics	r3, r2
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	e7a4      	b.n	800551a <_printf_i+0xd2>
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	680d      	ldr	r5, [r1, #0]
 80055d4:	1d10      	adds	r0, r2, #4
 80055d6:	6949      	ldr	r1, [r1, #20]
 80055d8:	6018      	str	r0, [r3, #0]
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	062e      	lsls	r6, r5, #24
 80055de:	d501      	bpl.n	80055e4 <_printf_i+0x19c>
 80055e0:	6019      	str	r1, [r3, #0]
 80055e2:	e002      	b.n	80055ea <_printf_i+0x1a2>
 80055e4:	066d      	lsls	r5, r5, #25
 80055e6:	d5fb      	bpl.n	80055e0 <_printf_i+0x198>
 80055e8:	8019      	strh	r1, [r3, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9e04      	ldr	r6, [sp, #16]
 80055ee:	6123      	str	r3, [r4, #16]
 80055f0:	e7c0      	b.n	8005574 <_printf_i+0x12c>
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	1d11      	adds	r1, r2, #4
 80055f6:	6019      	str	r1, [r3, #0]
 80055f8:	6816      	ldr	r6, [r2, #0]
 80055fa:	2100      	movs	r1, #0
 80055fc:	0030      	movs	r0, r6
 80055fe:	6862      	ldr	r2, [r4, #4]
 8005600:	f000 fa34 	bl	8005a6c <memchr>
 8005604:	2800      	cmp	r0, #0
 8005606:	d001      	beq.n	800560c <_printf_i+0x1c4>
 8005608:	1b80      	subs	r0, r0, r6
 800560a:	6060      	str	r0, [r4, #4]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	6123      	str	r3, [r4, #16]
 8005610:	2300      	movs	r3, #0
 8005612:	9a04      	ldr	r2, [sp, #16]
 8005614:	7013      	strb	r3, [r2, #0]
 8005616:	e7ad      	b.n	8005574 <_printf_i+0x12c>
 8005618:	0032      	movs	r2, r6
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	9906      	ldr	r1, [sp, #24]
 800561e:	9805      	ldr	r0, [sp, #20]
 8005620:	9d07      	ldr	r5, [sp, #28]
 8005622:	47a8      	blx	r5
 8005624:	3001      	adds	r0, #1
 8005626:	d0af      	beq.n	8005588 <_printf_i+0x140>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	079b      	lsls	r3, r3, #30
 800562c:	d415      	bmi.n	800565a <_printf_i+0x212>
 800562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005630:	68e0      	ldr	r0, [r4, #12]
 8005632:	4298      	cmp	r0, r3
 8005634:	daaa      	bge.n	800558c <_printf_i+0x144>
 8005636:	0018      	movs	r0, r3
 8005638:	e7a8      	b.n	800558c <_printf_i+0x144>
 800563a:	0022      	movs	r2, r4
 800563c:	2301      	movs	r3, #1
 800563e:	9906      	ldr	r1, [sp, #24]
 8005640:	9805      	ldr	r0, [sp, #20]
 8005642:	9e07      	ldr	r6, [sp, #28]
 8005644:	3219      	adds	r2, #25
 8005646:	47b0      	blx	r6
 8005648:	3001      	adds	r0, #1
 800564a:	d09d      	beq.n	8005588 <_printf_i+0x140>
 800564c:	3501      	adds	r5, #1
 800564e:	68e3      	ldr	r3, [r4, #12]
 8005650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	42ab      	cmp	r3, r5
 8005656:	dcf0      	bgt.n	800563a <_printf_i+0x1f2>
 8005658:	e7e9      	b.n	800562e <_printf_i+0x1e6>
 800565a:	2500      	movs	r5, #0
 800565c:	e7f7      	b.n	800564e <_printf_i+0x206>
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	08005d9d 	.word	0x08005d9d
 8005664:	08005dae 	.word	0x08005dae

08005668 <_scanf_chars>:
 8005668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800566a:	0015      	movs	r5, r2
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	000c      	movs	r4, r1
 8005670:	9001      	str	r0, [sp, #4]
 8005672:	2a00      	cmp	r2, #0
 8005674:	d105      	bne.n	8005682 <_scanf_chars+0x1a>
 8005676:	6989      	ldr	r1, [r1, #24]
 8005678:	3201      	adds	r2, #1
 800567a:	2900      	cmp	r1, #0
 800567c:	d000      	beq.n	8005680 <_scanf_chars+0x18>
 800567e:	3a02      	subs	r2, #2
 8005680:	60a2      	str	r2, [r4, #8]
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	06d2      	lsls	r2, r2, #27
 8005686:	d403      	bmi.n	8005690 <_scanf_chars+0x28>
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	1d11      	adds	r1, r2, #4
 800568c:	6019      	str	r1, [r3, #0]
 800568e:	6817      	ldr	r7, [r2, #0]
 8005690:	2600      	movs	r6, #0
 8005692:	69a0      	ldr	r0, [r4, #24]
 8005694:	2800      	cmp	r0, #0
 8005696:	d013      	beq.n	80056c0 <_scanf_chars+0x58>
 8005698:	2801      	cmp	r0, #1
 800569a:	d108      	bne.n	80056ae <_scanf_chars+0x46>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	6962      	ldr	r2, [r4, #20]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	5cd3      	ldrb	r3, [r2, r3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <_scanf_chars+0x58>
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	d038      	beq.n	800571e <_scanf_chars+0xb6>
 80056ac:	e026      	b.n	80056fc <_scanf_chars+0x94>
 80056ae:	2802      	cmp	r0, #2
 80056b0:	d124      	bne.n	80056fc <_scanf_chars+0x94>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <_scanf_chars+0xb8>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	5cd3      	ldrb	r3, [r2, r3]
 80056ba:	2208      	movs	r2, #8
 80056bc:	4213      	tst	r3, r2
 80056be:	d11d      	bne.n	80056fc <_scanf_chars+0x94>
 80056c0:	2210      	movs	r2, #16
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	3601      	adds	r6, #1
 80056c6:	4213      	tst	r3, r2
 80056c8:	d103      	bne.n	80056d2 <_scanf_chars+0x6a>
 80056ca:	682b      	ldr	r3, [r5, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	703b      	strb	r3, [r7, #0]
 80056d0:	3701      	adds	r7, #1
 80056d2:	682a      	ldr	r2, [r5, #0]
 80056d4:	686b      	ldr	r3, [r5, #4]
 80056d6:	3201      	adds	r2, #1
 80056d8:	602a      	str	r2, [r5, #0]
 80056da:	68a2      	ldr	r2, [r4, #8]
 80056dc:	3b01      	subs	r3, #1
 80056de:	3a01      	subs	r2, #1
 80056e0:	606b      	str	r3, [r5, #4]
 80056e2:	60a2      	str	r2, [r4, #8]
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	d009      	beq.n	80056fc <_scanf_chars+0x94>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dcd2      	bgt.n	8005692 <_scanf_chars+0x2a>
 80056ec:	23c0      	movs	r3, #192	; 0xc0
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	0029      	movs	r1, r5
 80056f2:	58e3      	ldr	r3, [r4, r3]
 80056f4:	9801      	ldr	r0, [sp, #4]
 80056f6:	4798      	blx	r3
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0ca      	beq.n	8005692 <_scanf_chars+0x2a>
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	2310      	movs	r3, #16
 8005700:	0011      	movs	r1, r2
 8005702:	4019      	ands	r1, r3
 8005704:	421a      	tst	r2, r3
 8005706:	d106      	bne.n	8005716 <_scanf_chars+0xae>
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60e3      	str	r3, [r4, #12]
 800570e:	69a3      	ldr	r3, [r4, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d000      	beq.n	8005716 <_scanf_chars+0xae>
 8005714:	7039      	strb	r1, [r7, #0]
 8005716:	2000      	movs	r0, #0
 8005718:	6923      	ldr	r3, [r4, #16]
 800571a:	199b      	adds	r3, r3, r6
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005720:	08005ddb 	.word	0x08005ddb

08005724 <_scanf_i>:
 8005724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005726:	b08b      	sub	sp, #44	; 0x2c
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	4b7a      	ldr	r3, [pc, #488]	; (8005914 <_scanf_i+0x1f0>)
 800572c:	0016      	movs	r6, r2
 800572e:	9004      	str	r0, [sp, #16]
 8005730:	aa07      	add	r2, sp, #28
 8005732:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005734:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005736:	4a78      	ldr	r2, [pc, #480]	; (8005918 <_scanf_i+0x1f4>)
 8005738:	698b      	ldr	r3, [r1, #24]
 800573a:	000c      	movs	r4, r1
 800573c:	9205      	str	r2, [sp, #20]
 800573e:	2b03      	cmp	r3, #3
 8005740:	d001      	beq.n	8005746 <_scanf_i+0x22>
 8005742:	4b76      	ldr	r3, [pc, #472]	; (800591c <_scanf_i+0x1f8>)
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	22ae      	movs	r2, #174	; 0xae
 8005748:	2000      	movs	r0, #0
 800574a:	68a3      	ldr	r3, [r4, #8]
 800574c:	0052      	lsls	r2, r2, #1
 800574e:	1e59      	subs	r1, r3, #1
 8005750:	9003      	str	r0, [sp, #12]
 8005752:	4291      	cmp	r1, r2
 8005754:	d905      	bls.n	8005762 <_scanf_i+0x3e>
 8005756:	3b5e      	subs	r3, #94	; 0x5e
 8005758:	3bff      	subs	r3, #255	; 0xff
 800575a:	9303      	str	r3, [sp, #12]
 800575c:	235e      	movs	r3, #94	; 0x5e
 800575e:	33ff      	adds	r3, #255	; 0xff
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	0023      	movs	r3, r4
 8005764:	331c      	adds	r3, #28
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	23d0      	movs	r3, #208	; 0xd0
 800576a:	2700      	movs	r7, #0
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4313      	orrs	r3, r2
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	9b00      	ldr	r3, [sp, #0]
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	a807      	add	r0, sp, #28
 800577c:	7819      	ldrb	r1, [r3, #0]
 800577e:	00bb      	lsls	r3, r7, #2
 8005780:	2202      	movs	r2, #2
 8005782:	5818      	ldr	r0, [r3, r0]
 8005784:	f000 f972 	bl	8005a6c <memchr>
 8005788:	2800      	cmp	r0, #0
 800578a:	d02a      	beq.n	80057e2 <_scanf_i+0xbe>
 800578c:	2f01      	cmp	r7, #1
 800578e:	d161      	bne.n	8005854 <_scanf_i+0x130>
 8005790:	6863      	ldr	r3, [r4, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <_scanf_i+0x80>
 8005796:	3308      	adds	r3, #8
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	33f9      	adds	r3, #249	; 0xf9
 800579e:	33ff      	adds	r3, #255	; 0xff
 80057a0:	4313      	orrs	r3, r2
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	4a5e      	ldr	r2, [pc, #376]	; (8005920 <_scanf_i+0x1fc>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	60a2      	str	r2, [r4, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d015      	beq.n	80057e2 <_scanf_i+0xbe>
 80057b6:	6833      	ldr	r3, [r6, #0]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	6032      	str	r2, [r6, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	9a02      	ldr	r2, [sp, #8]
 80057c0:	7013      	strb	r3, [r2, #0]
 80057c2:	6873      	ldr	r3, [r6, #4]
 80057c4:	1c55      	adds	r5, r2, #1
 80057c6:	3b01      	subs	r3, #1
 80057c8:	6073      	str	r3, [r6, #4]
 80057ca:	9502      	str	r5, [sp, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc08      	bgt.n	80057e2 <_scanf_i+0xbe>
 80057d0:	23c0      	movs	r3, #192	; 0xc0
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	0031      	movs	r1, r6
 80057d6:	58e3      	ldr	r3, [r4, r3]
 80057d8:	9804      	ldr	r0, [sp, #16]
 80057da:	4798      	blx	r3
 80057dc:	2800      	cmp	r0, #0
 80057de:	d000      	beq.n	80057e2 <_scanf_i+0xbe>
 80057e0:	e080      	b.n	80058e4 <_scanf_i+0x1c0>
 80057e2:	3701      	adds	r7, #1
 80057e4:	2f03      	cmp	r7, #3
 80057e6:	d1c7      	bne.n	8005778 <_scanf_i+0x54>
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <_scanf_i+0xce>
 80057ee:	330a      	adds	r3, #10
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	2110      	movs	r1, #16
 80057f4:	2700      	movs	r7, #0
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	6960      	ldr	r0, [r4, #20]
 80057fa:	1ac9      	subs	r1, r1, r3
 80057fc:	4b49      	ldr	r3, [pc, #292]	; (8005924 <_scanf_i+0x200>)
 80057fe:	18c9      	adds	r1, r1, r3
 8005800:	f000 f894 	bl	800592c <__sccl>
 8005804:	9d02      	ldr	r5, [sp, #8]
 8005806:	68a3      	ldr	r3, [r4, #8]
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d040      	beq.n	8005892 <_scanf_i+0x16e>
 8005810:	6831      	ldr	r1, [r6, #0]
 8005812:	6963      	ldr	r3, [r4, #20]
 8005814:	780a      	ldrb	r2, [r1, #0]
 8005816:	5c9b      	ldrb	r3, [r3, r2]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d03a      	beq.n	8005892 <_scanf_i+0x16e>
 800581c:	2a30      	cmp	r2, #48	; 0x30
 800581e:	d129      	bne.n	8005874 <_scanf_i+0x150>
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4218      	tst	r0, r3
 8005826:	d025      	beq.n	8005874 <_scanf_i+0x150>
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	3701      	adds	r7, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <_scanf_i+0x118>
 8005830:	001a      	movs	r2, r3
 8005832:	9b02      	ldr	r3, [sp, #8]
 8005834:	3a01      	subs	r2, #1
 8005836:	3301      	adds	r3, #1
 8005838:	9203      	str	r2, [sp, #12]
 800583a:	60a3      	str	r3, [r4, #8]
 800583c:	6873      	ldr	r3, [r6, #4]
 800583e:	3b01      	subs	r3, #1
 8005840:	6073      	str	r3, [r6, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	dd1d      	ble.n	8005882 <_scanf_i+0x15e>
 8005846:	6833      	ldr	r3, [r6, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	6033      	str	r3, [r6, #0]
 800584c:	68a3      	ldr	r3, [r4, #8]
 800584e:	3b01      	subs	r3, #1
 8005850:	60a3      	str	r3, [r4, #8]
 8005852:	e7d8      	b.n	8005806 <_scanf_i+0xe2>
 8005854:	2f02      	cmp	r7, #2
 8005856:	d1a9      	bne.n	80057ac <_scanf_i+0x88>
 8005858:	21c0      	movs	r1, #192	; 0xc0
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	00c9      	lsls	r1, r1, #3
 8005860:	4011      	ands	r1, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4299      	cmp	r1, r3
 8005866:	d1bf      	bne.n	80057e8 <_scanf_i+0xc4>
 8005868:	3bf1      	subs	r3, #241	; 0xf1
 800586a:	3bff      	subs	r3, #255	; 0xff
 800586c:	6063      	str	r3, [r4, #4]
 800586e:	33f0      	adds	r3, #240	; 0xf0
 8005870:	4313      	orrs	r3, r2
 8005872:	e79a      	b.n	80057aa <_scanf_i+0x86>
 8005874:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <_scanf_i+0x204>)
 8005876:	4003      	ands	r3, r0
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	780b      	ldrb	r3, [r1, #0]
 800587c:	702b      	strb	r3, [r5, #0]
 800587e:	3501      	adds	r5, #1
 8005880:	e7dc      	b.n	800583c <_scanf_i+0x118>
 8005882:	23c0      	movs	r3, #192	; 0xc0
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	0031      	movs	r1, r6
 8005888:	58e3      	ldr	r3, [r4, r3]
 800588a:	9804      	ldr	r0, [sp, #16]
 800588c:	4798      	blx	r3
 800588e:	2800      	cmp	r0, #0
 8005890:	d0dc      	beq.n	800584c <_scanf_i+0x128>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	05db      	lsls	r3, r3, #23
 8005896:	d50e      	bpl.n	80058b6 <_scanf_i+0x192>
 8005898:	9b00      	ldr	r3, [sp, #0]
 800589a:	429d      	cmp	r5, r3
 800589c:	d907      	bls.n	80058ae <_scanf_i+0x18a>
 800589e:	23be      	movs	r3, #190	; 0xbe
 80058a0:	3d01      	subs	r5, #1
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	0032      	movs	r2, r6
 80058a6:	7829      	ldrb	r1, [r5, #0]
 80058a8:	58e3      	ldr	r3, [r4, r3]
 80058aa:	9804      	ldr	r0, [sp, #16]
 80058ac:	4798      	blx	r3
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	2001      	movs	r0, #1
 80058b2:	429d      	cmp	r5, r3
 80058b4:	d029      	beq.n	800590a <_scanf_i+0x1e6>
 80058b6:	6821      	ldr	r1, [r4, #0]
 80058b8:	2310      	movs	r3, #16
 80058ba:	000a      	movs	r2, r1
 80058bc:	401a      	ands	r2, r3
 80058be:	4219      	tst	r1, r3
 80058c0:	d11c      	bne.n	80058fc <_scanf_i+0x1d8>
 80058c2:	702a      	strb	r2, [r5, #0]
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	9900      	ldr	r1, [sp, #0]
 80058c8:	9804      	ldr	r0, [sp, #16]
 80058ca:	9e05      	ldr	r6, [sp, #20]
 80058cc:	47b0      	blx	r6
 80058ce:	9b01      	ldr	r3, [sp, #4]
 80058d0:	6822      	ldr	r2, [r4, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	0691      	lsls	r1, r2, #26
 80058d6:	d507      	bpl.n	80058e8 <_scanf_i+0x1c4>
 80058d8:	9901      	ldr	r1, [sp, #4]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	600a      	str	r2, [r1, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6018      	str	r0, [r3, #0]
 80058e2:	e008      	b.n	80058f6 <_scanf_i+0x1d2>
 80058e4:	2700      	movs	r7, #0
 80058e6:	e7d4      	b.n	8005892 <_scanf_i+0x16e>
 80058e8:	1d19      	adds	r1, r3, #4
 80058ea:	07d6      	lsls	r6, r2, #31
 80058ec:	d50f      	bpl.n	800590e <_scanf_i+0x1ea>
 80058ee:	9a01      	ldr	r2, [sp, #4]
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	8018      	strh	r0, [r3, #0]
 80058f6:	68e3      	ldr	r3, [r4, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60e3      	str	r3, [r4, #12]
 80058fc:	2000      	movs	r0, #0
 80058fe:	9b00      	ldr	r3, [sp, #0]
 8005900:	1aed      	subs	r5, r5, r3
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	19ed      	adds	r5, r5, r7
 8005906:	195b      	adds	r3, r3, r5
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	b00b      	add	sp, #44	; 0x2c
 800590c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800590e:	9a01      	ldr	r2, [sp, #4]
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	e7e4      	b.n	80058de <_scanf_i+0x1ba>
 8005914:	08005d48 	.word	0x08005d48
 8005918:	08005c01 	.word	0x08005c01
 800591c:	08005d0d 	.word	0x08005d0d
 8005920:	fffffaff 	.word	0xfffffaff
 8005924:	08005dbf 	.word	0x08005dbf
 8005928:	fffff6ff 	.word	0xfffff6ff

0800592c <__sccl>:
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	780b      	ldrb	r3, [r1, #0]
 8005930:	0004      	movs	r4, r0
 8005932:	2b5e      	cmp	r3, #94	; 0x5e
 8005934:	d019      	beq.n	800596a <__sccl+0x3e>
 8005936:	2200      	movs	r2, #0
 8005938:	1c4d      	adds	r5, r1, #1
 800593a:	0021      	movs	r1, r4
 800593c:	1c60      	adds	r0, r4, #1
 800593e:	30ff      	adds	r0, #255	; 0xff
 8005940:	700a      	strb	r2, [r1, #0]
 8005942:	3101      	adds	r1, #1
 8005944:	4281      	cmp	r1, r0
 8005946:	d1fb      	bne.n	8005940 <__sccl+0x14>
 8005948:	1e68      	subs	r0, r5, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <__sccl+0x3c>
 800594e:	2101      	movs	r1, #1
 8005950:	262d      	movs	r6, #45	; 0x2d
 8005952:	404a      	eors	r2, r1
 8005954:	0028      	movs	r0, r5
 8005956:	54e2      	strb	r2, [r4, r3]
 8005958:	7801      	ldrb	r1, [r0, #0]
 800595a:	1c45      	adds	r5, r0, #1
 800595c:	292d      	cmp	r1, #45	; 0x2d
 800595e:	d00c      	beq.n	800597a <__sccl+0x4e>
 8005960:	295d      	cmp	r1, #93	; 0x5d
 8005962:	d01d      	beq.n	80059a0 <__sccl+0x74>
 8005964:	2900      	cmp	r1, #0
 8005966:	d104      	bne.n	8005972 <__sccl+0x46>
 8005968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596a:	2201      	movs	r2, #1
 800596c:	784b      	ldrb	r3, [r1, #1]
 800596e:	1c8d      	adds	r5, r1, #2
 8005970:	e7e3      	b.n	800593a <__sccl+0xe>
 8005972:	000b      	movs	r3, r1
 8005974:	e7ee      	b.n	8005954 <__sccl+0x28>
 8005976:	0033      	movs	r3, r6
 8005978:	e7ec      	b.n	8005954 <__sccl+0x28>
 800597a:	7841      	ldrb	r1, [r0, #1]
 800597c:	295d      	cmp	r1, #93	; 0x5d
 800597e:	d0fa      	beq.n	8005976 <__sccl+0x4a>
 8005980:	428b      	cmp	r3, r1
 8005982:	dcf8      	bgt.n	8005976 <__sccl+0x4a>
 8005984:	001d      	movs	r5, r3
 8005986:	3002      	adds	r0, #2
 8005988:	3501      	adds	r5, #1
 800598a:	5562      	strb	r2, [r4, r5]
 800598c:	42a9      	cmp	r1, r5
 800598e:	dcfb      	bgt.n	8005988 <__sccl+0x5c>
 8005990:	2500      	movs	r5, #0
 8005992:	1c5f      	adds	r7, r3, #1
 8005994:	428b      	cmp	r3, r1
 8005996:	da01      	bge.n	800599c <__sccl+0x70>
 8005998:	1acd      	subs	r5, r1, r3
 800599a:	3d01      	subs	r5, #1
 800599c:	197b      	adds	r3, r7, r5
 800599e:	e7db      	b.n	8005958 <__sccl+0x2c>
 80059a0:	0028      	movs	r0, r5
 80059a2:	e7e1      	b.n	8005968 <__sccl+0x3c>

080059a4 <__submore>:
 80059a4:	000b      	movs	r3, r1
 80059a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80059aa:	3344      	adds	r3, #68	; 0x44
 80059ac:	000c      	movs	r4, r1
 80059ae:	429d      	cmp	r5, r3
 80059b0:	d11c      	bne.n	80059ec <__submore+0x48>
 80059b2:	2680      	movs	r6, #128	; 0x80
 80059b4:	00f6      	lsls	r6, r6, #3
 80059b6:	0031      	movs	r1, r6
 80059b8:	f7ff f91c 	bl	8004bf4 <_malloc_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d102      	bne.n	80059c6 <__submore+0x22>
 80059c0:	2001      	movs	r0, #1
 80059c2:	4240      	negs	r0, r0
 80059c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059c6:	0023      	movs	r3, r4
 80059c8:	6360      	str	r0, [r4, #52]	; 0x34
 80059ca:	63a6      	str	r6, [r4, #56]	; 0x38
 80059cc:	3346      	adds	r3, #70	; 0x46
 80059ce:	781a      	ldrb	r2, [r3, #0]
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <__submore+0x70>)
 80059d2:	54c2      	strb	r2, [r0, r3]
 80059d4:	0023      	movs	r3, r4
 80059d6:	3345      	adds	r3, #69	; 0x45
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <__submore+0x74>)
 80059dc:	54c2      	strb	r2, [r0, r3]
 80059de:	782a      	ldrb	r2, [r5, #0]
 80059e0:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <__submore+0x78>)
 80059e2:	54c2      	strb	r2, [r0, r3]
 80059e4:	18c0      	adds	r0, r0, r3
 80059e6:	6020      	str	r0, [r4, #0]
 80059e8:	2000      	movs	r0, #0
 80059ea:	e7eb      	b.n	80059c4 <__submore+0x20>
 80059ec:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80059ee:	0029      	movs	r1, r5
 80059f0:	0073      	lsls	r3, r6, #1
 80059f2:	001a      	movs	r2, r3
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	f000 f84d 	bl	8005a94 <_realloc_r>
 80059fa:	1e05      	subs	r5, r0, #0
 80059fc:	d0e0      	beq.n	80059c0 <__submore+0x1c>
 80059fe:	1987      	adds	r7, r0, r6
 8005a00:	0001      	movs	r1, r0
 8005a02:	0032      	movs	r2, r6
 8005a04:	0038      	movs	r0, r7
 8005a06:	f000 f83c 	bl	8005a82 <memcpy>
 8005a0a:	9b01      	ldr	r3, [sp, #4]
 8005a0c:	6027      	str	r7, [r4, #0]
 8005a0e:	6365      	str	r5, [r4, #52]	; 0x34
 8005a10:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a12:	e7e9      	b.n	80059e8 <__submore+0x44>
 8005a14:	000003ff 	.word	0x000003ff
 8005a18:	000003fe 	.word	0x000003fe
 8005a1c:	000003fd 	.word	0x000003fd

08005a20 <memmove>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4288      	cmp	r0, r1
 8005a24:	d902      	bls.n	8005a2c <memmove+0xc>
 8005a26:	188b      	adds	r3, r1, r2
 8005a28:	4298      	cmp	r0, r3
 8005a2a:	d303      	bcc.n	8005a34 <memmove+0x14>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e007      	b.n	8005a40 <memmove+0x20>
 8005a30:	5c8b      	ldrb	r3, [r1, r2]
 8005a32:	5483      	strb	r3, [r0, r2]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	d2fb      	bcs.n	8005a30 <memmove+0x10>
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	5ccc      	ldrb	r4, [r1, r3]
 8005a3c:	54c4      	strb	r4, [r0, r3]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d1fa      	bne.n	8005a3a <memmove+0x1a>
 8005a44:	e7f8      	b.n	8005a38 <memmove+0x18>
	...

08005a48 <_sbrk_r>:
 8005a48:	2300      	movs	r3, #0
 8005a4a:	b570      	push	{r4, r5, r6, lr}
 8005a4c:	4d06      	ldr	r5, [pc, #24]	; (8005a68 <_sbrk_r+0x20>)
 8005a4e:	0004      	movs	r4, r0
 8005a50:	0008      	movs	r0, r1
 8005a52:	602b      	str	r3, [r5, #0]
 8005a54:	f7fb f940 	bl	8000cd8 <_sbrk>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d103      	bne.n	8005a64 <_sbrk_r+0x1c>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d000      	beq.n	8005a64 <_sbrk_r+0x1c>
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	20000368 	.word	0x20000368

08005a6c <memchr>:
 8005a6c:	b2c9      	uxtb	r1, r1
 8005a6e:	1882      	adds	r2, r0, r2
 8005a70:	4290      	cmp	r0, r2
 8005a72:	d101      	bne.n	8005a78 <memchr+0xc>
 8005a74:	2000      	movs	r0, #0
 8005a76:	4770      	bx	lr
 8005a78:	7803      	ldrb	r3, [r0, #0]
 8005a7a:	428b      	cmp	r3, r1
 8005a7c:	d0fb      	beq.n	8005a76 <memchr+0xa>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	e7f6      	b.n	8005a70 <memchr+0x4>

08005a82 <memcpy>:
 8005a82:	2300      	movs	r3, #0
 8005a84:	b510      	push	{r4, lr}
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d100      	bne.n	8005a8c <memcpy+0xa>
 8005a8a:	bd10      	pop	{r4, pc}
 8005a8c:	5ccc      	ldrb	r4, [r1, r3]
 8005a8e:	54c4      	strb	r4, [r0, r3]
 8005a90:	3301      	adds	r3, #1
 8005a92:	e7f8      	b.n	8005a86 <memcpy+0x4>

08005a94 <_realloc_r>:
 8005a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a96:	0007      	movs	r7, r0
 8005a98:	000e      	movs	r6, r1
 8005a9a:	0014      	movs	r4, r2
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d105      	bne.n	8005aac <_realloc_r+0x18>
 8005aa0:	0011      	movs	r1, r2
 8005aa2:	f7ff f8a7 	bl	8004bf4 <_malloc_r>
 8005aa6:	0005      	movs	r5, r0
 8005aa8:	0028      	movs	r0, r5
 8005aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aac:	2a00      	cmp	r2, #0
 8005aae:	d103      	bne.n	8005ab8 <_realloc_r+0x24>
 8005ab0:	f7ff f834 	bl	8004b1c <_free_r>
 8005ab4:	0025      	movs	r5, r4
 8005ab6:	e7f7      	b.n	8005aa8 <_realloc_r+0x14>
 8005ab8:	f000 f92c 	bl	8005d14 <_malloc_usable_size_r>
 8005abc:	9001      	str	r0, [sp, #4]
 8005abe:	4284      	cmp	r4, r0
 8005ac0:	d803      	bhi.n	8005aca <_realloc_r+0x36>
 8005ac2:	0035      	movs	r5, r6
 8005ac4:	0843      	lsrs	r3, r0, #1
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	d3ee      	bcc.n	8005aa8 <_realloc_r+0x14>
 8005aca:	0021      	movs	r1, r4
 8005acc:	0038      	movs	r0, r7
 8005ace:	f7ff f891 	bl	8004bf4 <_malloc_r>
 8005ad2:	1e05      	subs	r5, r0, #0
 8005ad4:	d0e8      	beq.n	8005aa8 <_realloc_r+0x14>
 8005ad6:	9b01      	ldr	r3, [sp, #4]
 8005ad8:	0022      	movs	r2, r4
 8005ada:	429c      	cmp	r4, r3
 8005adc:	d900      	bls.n	8005ae0 <_realloc_r+0x4c>
 8005ade:	001a      	movs	r2, r3
 8005ae0:	0031      	movs	r1, r6
 8005ae2:	0028      	movs	r0, r5
 8005ae4:	f7ff ffcd 	bl	8005a82 <memcpy>
 8005ae8:	0031      	movs	r1, r6
 8005aea:	0038      	movs	r0, r7
 8005aec:	f7ff f816 	bl	8004b1c <_free_r>
 8005af0:	e7da      	b.n	8005aa8 <_realloc_r+0x14>
	...

08005af4 <_strtol_l.constprop.0>:
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af6:	b087      	sub	sp, #28
 8005af8:	001e      	movs	r6, r3
 8005afa:	9005      	str	r0, [sp, #20]
 8005afc:	9101      	str	r1, [sp, #4]
 8005afe:	9202      	str	r2, [sp, #8]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d048      	beq.n	8005b96 <_strtol_l.constprop.0+0xa2>
 8005b04:	000b      	movs	r3, r1
 8005b06:	2e24      	cmp	r6, #36	; 0x24
 8005b08:	d845      	bhi.n	8005b96 <_strtol_l.constprop.0+0xa2>
 8005b0a:	4a3b      	ldr	r2, [pc, #236]	; (8005bf8 <_strtol_l.constprop.0+0x104>)
 8005b0c:	2108      	movs	r1, #8
 8005b0e:	4694      	mov	ip, r2
 8005b10:	001a      	movs	r2, r3
 8005b12:	4660      	mov	r0, ip
 8005b14:	7814      	ldrb	r4, [r2, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	5d00      	ldrb	r0, [r0, r4]
 8005b1a:	001d      	movs	r5, r3
 8005b1c:	0007      	movs	r7, r0
 8005b1e:	400f      	ands	r7, r1
 8005b20:	4208      	tst	r0, r1
 8005b22:	d1f5      	bne.n	8005b10 <_strtol_l.constprop.0+0x1c>
 8005b24:	2c2d      	cmp	r4, #45	; 0x2d
 8005b26:	d13d      	bne.n	8005ba4 <_strtol_l.constprop.0+0xb0>
 8005b28:	2701      	movs	r7, #1
 8005b2a:	781c      	ldrb	r4, [r3, #0]
 8005b2c:	1c95      	adds	r5, r2, #2
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d05e      	beq.n	8005bf0 <_strtol_l.constprop.0+0xfc>
 8005b32:	2e10      	cmp	r6, #16
 8005b34:	d109      	bne.n	8005b4a <_strtol_l.constprop.0+0x56>
 8005b36:	2c30      	cmp	r4, #48	; 0x30
 8005b38:	d107      	bne.n	8005b4a <_strtol_l.constprop.0+0x56>
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	782b      	ldrb	r3, [r5, #0]
 8005b3e:	4393      	bics	r3, r2
 8005b40:	2b58      	cmp	r3, #88	; 0x58
 8005b42:	d150      	bne.n	8005be6 <_strtol_l.constprop.0+0xf2>
 8005b44:	2610      	movs	r6, #16
 8005b46:	786c      	ldrb	r4, [r5, #1]
 8005b48:	3502      	adds	r5, #2
 8005b4a:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <_strtol_l.constprop.0+0x108>)
 8005b4c:	0031      	movs	r1, r6
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	0018      	movs	r0, r3
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	f7fa fb6e 	bl	8000234 <__aeabi_uidivmod>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	9104      	str	r1, [sp, #16]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4684      	mov	ip, r0
 8005b60:	0010      	movs	r0, r2
 8005b62:	4249      	negs	r1, r1
 8005b64:	0023      	movs	r3, r4
 8005b66:	3b30      	subs	r3, #48	; 0x30
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d903      	bls.n	8005b74 <_strtol_l.constprop.0+0x80>
 8005b6c:	3b11      	subs	r3, #17
 8005b6e:	2b19      	cmp	r3, #25
 8005b70:	d81d      	bhi.n	8005bae <_strtol_l.constprop.0+0xba>
 8005b72:	330a      	adds	r3, #10
 8005b74:	429e      	cmp	r6, r3
 8005b76:	dd1e      	ble.n	8005bb6 <_strtol_l.constprop.0+0xc2>
 8005b78:	1c54      	adds	r4, r2, #1
 8005b7a:	d009      	beq.n	8005b90 <_strtol_l.constprop.0+0x9c>
 8005b7c:	000a      	movs	r2, r1
 8005b7e:	4584      	cmp	ip, r0
 8005b80:	d306      	bcc.n	8005b90 <_strtol_l.constprop.0+0x9c>
 8005b82:	d102      	bne.n	8005b8a <_strtol_l.constprop.0+0x96>
 8005b84:	9c04      	ldr	r4, [sp, #16]
 8005b86:	429c      	cmp	r4, r3
 8005b88:	db02      	blt.n	8005b90 <_strtol_l.constprop.0+0x9c>
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4370      	muls	r0, r6
 8005b8e:	1818      	adds	r0, r3, r0
 8005b90:	782c      	ldrb	r4, [r5, #0]
 8005b92:	3501      	adds	r5, #1
 8005b94:	e7e6      	b.n	8005b64 <_strtol_l.constprop.0+0x70>
 8005b96:	f7fe ff95 	bl	8004ac4 <__errno>
 8005b9a:	2316      	movs	r3, #22
 8005b9c:	6003      	str	r3, [r0, #0]
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	b007      	add	sp, #28
 8005ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba4:	2c2b      	cmp	r4, #43	; 0x2b
 8005ba6:	d1c2      	bne.n	8005b2e <_strtol_l.constprop.0+0x3a>
 8005ba8:	781c      	ldrb	r4, [r3, #0]
 8005baa:	1c95      	adds	r5, r2, #2
 8005bac:	e7bf      	b.n	8005b2e <_strtol_l.constprop.0+0x3a>
 8005bae:	0023      	movs	r3, r4
 8005bb0:	3b61      	subs	r3, #97	; 0x61
 8005bb2:	2b19      	cmp	r3, #25
 8005bb4:	d9dd      	bls.n	8005b72 <_strtol_l.constprop.0+0x7e>
 8005bb6:	1c53      	adds	r3, r2, #1
 8005bb8:	d109      	bne.n	8005bce <_strtol_l.constprop.0+0xda>
 8005bba:	2322      	movs	r3, #34	; 0x22
 8005bbc:	9a05      	ldr	r2, [sp, #20]
 8005bbe:	9803      	ldr	r0, [sp, #12]
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	9b02      	ldr	r3, [sp, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0eb      	beq.n	8005ba0 <_strtol_l.constprop.0+0xac>
 8005bc8:	1e6b      	subs	r3, r5, #1
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	e007      	b.n	8005bde <_strtol_l.constprop.0+0xea>
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d000      	beq.n	8005bd4 <_strtol_l.constprop.0+0xe0>
 8005bd2:	4240      	negs	r0, r0
 8005bd4:	9b02      	ldr	r3, [sp, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0e2      	beq.n	8005ba0 <_strtol_l.constprop.0+0xac>
 8005bda:	2a00      	cmp	r2, #0
 8005bdc:	d1f4      	bne.n	8005bc8 <_strtol_l.constprop.0+0xd4>
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	9a01      	ldr	r2, [sp, #4]
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e7dc      	b.n	8005ba0 <_strtol_l.constprop.0+0xac>
 8005be6:	2430      	movs	r4, #48	; 0x30
 8005be8:	2e00      	cmp	r6, #0
 8005bea:	d1ae      	bne.n	8005b4a <_strtol_l.constprop.0+0x56>
 8005bec:	3608      	adds	r6, #8
 8005bee:	e7ac      	b.n	8005b4a <_strtol_l.constprop.0+0x56>
 8005bf0:	2c30      	cmp	r4, #48	; 0x30
 8005bf2:	d0a2      	beq.n	8005b3a <_strtol_l.constprop.0+0x46>
 8005bf4:	260a      	movs	r6, #10
 8005bf6:	e7a8      	b.n	8005b4a <_strtol_l.constprop.0+0x56>
 8005bf8:	08005ddb 	.word	0x08005ddb
 8005bfc:	7fffffff 	.word	0x7fffffff

08005c00 <_strtol_r>:
 8005c00:	b510      	push	{r4, lr}
 8005c02:	f7ff ff77 	bl	8005af4 <_strtol_l.constprop.0>
 8005c06:	bd10      	pop	{r4, pc}

08005c08 <_strtoul_l.constprop.0>:
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	9202      	str	r2, [sp, #8]
 8005c0e:	4a3e      	ldr	r2, [pc, #248]	; (8005d08 <_strtoul_l.constprop.0+0x100>)
 8005c10:	001e      	movs	r6, r3
 8005c12:	9101      	str	r1, [sp, #4]
 8005c14:	000b      	movs	r3, r1
 8005c16:	4694      	mov	ip, r2
 8005c18:	2108      	movs	r1, #8
 8005c1a:	9005      	str	r0, [sp, #20]
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	4660      	mov	r0, ip
 8005c20:	7814      	ldrb	r4, [r2, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	5d00      	ldrb	r0, [r0, r4]
 8005c26:	001d      	movs	r5, r3
 8005c28:	0007      	movs	r7, r0
 8005c2a:	400f      	ands	r7, r1
 8005c2c:	4208      	tst	r0, r1
 8005c2e:	d1f5      	bne.n	8005c1c <_strtoul_l.constprop.0+0x14>
 8005c30:	2c2d      	cmp	r4, #45	; 0x2d
 8005c32:	d13d      	bne.n	8005cb0 <_strtoul_l.constprop.0+0xa8>
 8005c34:	2701      	movs	r7, #1
 8005c36:	781c      	ldrb	r4, [r3, #0]
 8005c38:	1c95      	adds	r5, r2, #2
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	d05f      	beq.n	8005cfe <_strtoul_l.constprop.0+0xf6>
 8005c3e:	2e10      	cmp	r6, #16
 8005c40:	d109      	bne.n	8005c56 <_strtoul_l.constprop.0+0x4e>
 8005c42:	2c30      	cmp	r4, #48	; 0x30
 8005c44:	d107      	bne.n	8005c56 <_strtoul_l.constprop.0+0x4e>
 8005c46:	2220      	movs	r2, #32
 8005c48:	782b      	ldrb	r3, [r5, #0]
 8005c4a:	4393      	bics	r3, r2
 8005c4c:	2b58      	cmp	r3, #88	; 0x58
 8005c4e:	d151      	bne.n	8005cf4 <_strtoul_l.constprop.0+0xec>
 8005c50:	2610      	movs	r6, #16
 8005c52:	786c      	ldrb	r4, [r5, #1]
 8005c54:	3502      	adds	r5, #2
 8005c56:	2001      	movs	r0, #1
 8005c58:	0031      	movs	r1, r6
 8005c5a:	4240      	negs	r0, r0
 8005c5c:	f7fa fa64 	bl	8000128 <__udivsi3>
 8005c60:	9003      	str	r0, [sp, #12]
 8005c62:	2001      	movs	r0, #1
 8005c64:	0031      	movs	r1, r6
 8005c66:	4240      	negs	r0, r0
 8005c68:	f7fa fae4 	bl	8000234 <__aeabi_uidivmod>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2201      	movs	r2, #1
 8005c70:	9104      	str	r1, [sp, #16]
 8005c72:	2101      	movs	r1, #1
 8005c74:	0018      	movs	r0, r3
 8005c76:	4694      	mov	ip, r2
 8005c78:	4249      	negs	r1, r1
 8005c7a:	0022      	movs	r2, r4
 8005c7c:	3a30      	subs	r2, #48	; 0x30
 8005c7e:	2a09      	cmp	r2, #9
 8005c80:	d903      	bls.n	8005c8a <_strtoul_l.constprop.0+0x82>
 8005c82:	3a11      	subs	r2, #17
 8005c84:	2a19      	cmp	r2, #25
 8005c86:	d818      	bhi.n	8005cba <_strtoul_l.constprop.0+0xb2>
 8005c88:	320a      	adds	r2, #10
 8005c8a:	4296      	cmp	r6, r2
 8005c8c:	dd19      	ble.n	8005cc2 <_strtoul_l.constprop.0+0xba>
 8005c8e:	1c5c      	adds	r4, r3, #1
 8005c90:	d00b      	beq.n	8005caa <_strtoul_l.constprop.0+0xa2>
 8005c92:	9c03      	ldr	r4, [sp, #12]
 8005c94:	000b      	movs	r3, r1
 8005c96:	4284      	cmp	r4, r0
 8005c98:	d307      	bcc.n	8005caa <_strtoul_l.constprop.0+0xa2>
 8005c9a:	d103      	bne.n	8005ca4 <_strtoul_l.constprop.0+0x9c>
 8005c9c:	9c04      	ldr	r4, [sp, #16]
 8005c9e:	000b      	movs	r3, r1
 8005ca0:	4294      	cmp	r4, r2
 8005ca2:	db02      	blt.n	8005caa <_strtoul_l.constprop.0+0xa2>
 8005ca4:	4663      	mov	r3, ip
 8005ca6:	4370      	muls	r0, r6
 8005ca8:	1810      	adds	r0, r2, r0
 8005caa:	782c      	ldrb	r4, [r5, #0]
 8005cac:	3501      	adds	r5, #1
 8005cae:	e7e4      	b.n	8005c7a <_strtoul_l.constprop.0+0x72>
 8005cb0:	2c2b      	cmp	r4, #43	; 0x2b
 8005cb2:	d1c2      	bne.n	8005c3a <_strtoul_l.constprop.0+0x32>
 8005cb4:	781c      	ldrb	r4, [r3, #0]
 8005cb6:	1c95      	adds	r5, r2, #2
 8005cb8:	e7bf      	b.n	8005c3a <_strtoul_l.constprop.0+0x32>
 8005cba:	0022      	movs	r2, r4
 8005cbc:	3a61      	subs	r2, #97	; 0x61
 8005cbe:	2a19      	cmp	r2, #25
 8005cc0:	d9e2      	bls.n	8005c88 <_strtoul_l.constprop.0+0x80>
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	d108      	bne.n	8005cd8 <_strtoul_l.constprop.0+0xd0>
 8005cc6:	2222      	movs	r2, #34	; 0x22
 8005cc8:	9905      	ldr	r1, [sp, #20]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	600a      	str	r2, [r1, #0]
 8005cce:	9a02      	ldr	r2, [sp, #8]
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	d109      	bne.n	8005ce8 <_strtoul_l.constprop.0+0xe0>
 8005cd4:	b007      	add	sp, #28
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd8:	2f00      	cmp	r7, #0
 8005cda:	d000      	beq.n	8005cde <_strtoul_l.constprop.0+0xd6>
 8005cdc:	4240      	negs	r0, r0
 8005cde:	9a02      	ldr	r2, [sp, #8]
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d0f7      	beq.n	8005cd4 <_strtoul_l.constprop.0+0xcc>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <_strtoul_l.constprop.0+0xe4>
 8005ce8:	1e6b      	subs	r3, r5, #1
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	9b02      	ldr	r3, [sp, #8]
 8005cee:	9a01      	ldr	r2, [sp, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e7ef      	b.n	8005cd4 <_strtoul_l.constprop.0+0xcc>
 8005cf4:	2430      	movs	r4, #48	; 0x30
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d1ad      	bne.n	8005c56 <_strtoul_l.constprop.0+0x4e>
 8005cfa:	3608      	adds	r6, #8
 8005cfc:	e7ab      	b.n	8005c56 <_strtoul_l.constprop.0+0x4e>
 8005cfe:	2c30      	cmp	r4, #48	; 0x30
 8005d00:	d0a1      	beq.n	8005c46 <_strtoul_l.constprop.0+0x3e>
 8005d02:	260a      	movs	r6, #10
 8005d04:	e7a7      	b.n	8005c56 <_strtoul_l.constprop.0+0x4e>
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	08005ddb 	.word	0x08005ddb

08005d0c <_strtoul_r>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	f7ff ff7b 	bl	8005c08 <_strtoul_l.constprop.0>
 8005d12:	bd10      	pop	{r4, pc}

08005d14 <_malloc_usable_size_r>:
 8005d14:	1f0b      	subs	r3, r1, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1f18      	subs	r0, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da01      	bge.n	8005d22 <_malloc_usable_size_r+0xe>
 8005d1e:	580b      	ldr	r3, [r1, r0]
 8005d20:	18c0      	adds	r0, r0, r3
 8005d22:	4770      	bx	lr

08005d24 <_init>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr

08005d30 <_fini>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr
